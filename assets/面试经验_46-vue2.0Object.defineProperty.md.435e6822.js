import{_ as s,o as n,c as a,U as e}from"./chunks/framework.1d5623bb.js";const d=JSON.parse('{"title":"Object.defineProperty","description":"","frontmatter":{},"headers":[],"relativePath":"面试经验/46-vue2.0Object.defineProperty.md"}'),l={name:"面试经验/46-vue2.0Object.defineProperty.md"},p=e(`<h1 id="object-defineproperty" tabindex="-1">Object.defineProperty <a class="header-anchor" href="#object-defineproperty" aria-label="Permalink to &quot;Object.defineProperty&quot;">​</a></h1><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(obj, key, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 这里的键名，都是属性描述符 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    configurable:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">//当为true时，该属性的描述符能够被改变，同时该属性也可以从对应的对象上删除。</span></span>
<span class="line"><span style="color:#E1E4E8;">    enumerable:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//该属性为true时，该属性才会出现在对象的枚举属性中。</span></span>
<span class="line"><span style="color:#E1E4E8;">    value:</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//默认为false</span></span>
<span class="line"><span style="color:#E1E4E8;">    writable:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//当为true时，上面的value才能被赋值运算符改变。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;取值&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">x;</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;设置&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="对于对象和数组属性-只监听其指针是否改变" tabindex="-1">对于对象和数组属性，只监听其指针是否改变 <a class="header-anchor" href="#对于对象和数组属性-只监听其指针是否改变" aria-label="Permalink to &quot;对于对象和数组属性，只监听其指针是否改变&quot;">​</a></h2><ol><li>当传入一个对象，和key,define会对这个对象的属性监听，只监听其在栈区是否改变，如果属性值包含对象或者包含数组，修改对象属性或者数组元素，不触发set</li></ol><h2 id="vue中object-defineproperty" tabindex="-1">vue中Object.defineProperty <a class="header-anchor" href="#vue中object-defineproperty" aria-label="Permalink to &quot;vue中Object.defineProperty&quot;">​</a></h2><p>属性劫持时判断值是否为对象，是的话再对值进行劫持，不过Object.defineProperty有弊端</p><ol><li>对于值为数组，数组内元素的增删改，不触发set视图更新</li><li>对于对象，对象属性的增删，不触发set视图更新</li><li>内部引用也会出发get、set</li></ol><blockquote><p>使用vm.$set，vm.$set(this.data, key/index, newValue)</p></blockquote>`,8),o=[p];function r(t,c,i,E,y,b){return n(),a("div",null,o)}const m=s(l,[["render",r]]);export{d as __pageData,m as default};
