import{_ as s,o as a,c as n,U as l}from"./chunks/framework.1d5623bb.js";const u=JSON.parse('{"title":"js类型判断","description":"","frontmatter":{},"headers":[],"relativePath":"面试经验/21-类型判断.md"}'),p={name:"面试经验/21-类型判断.md"},e=l(`<h1 id="js类型判断" tabindex="-1">js类型判断 <a class="header-anchor" href="#js类型判断" aria-label="Permalink to &quot;js类型判断&quot;">​</a></h1><h2 id="typeof" tabindex="-1">typeOf <a class="header-anchor" href="#typeof" aria-label="Permalink to &quot;typeOf&quot;">​</a></h2><ol><li>typeof操作符一般用来检测基本数据类型，返回以下某个字符串：&#39;undefined&#39;, &#39;boolean&#39;, &#39;number&#39;, &#39;string&#39;, &#39;object&#39;, &#39;function&#39;。</li><li>null, Array, Date, RegExp, Object都返回&#39;object&#39;。</li><li>function虽然也是对象的一种，但是函数具有某些特殊属性，因此通过typeof来区分函数和其他对象是有必要的</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="instabceof" tabindex="-1">instabceof <a class="header-anchor" href="#instabceof" aria-label="Permalink to &quot;instabceof&quot;">​</a></h2><p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lei</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> temp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lei</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(temp </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lei</span><span style="color:#E1E4E8;">, temp.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Lei</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;str&#39;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;str&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;str&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;">(str) </span><span style="color:#6A737D;">// string</span></span>
<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;">(str2) </span><span style="color:#6A737D;">// string</span></span>
<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;">(str3) </span><span style="color:#6A737D;">// Object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">str.__proto </span><span style="color:#6A737D;">// String</span></span>
<span class="line"><span style="color:#E1E4E8;">str2.__proto </span><span style="color:#6A737D;">// String</span></span>
<span class="line"><span style="color:#E1E4E8;">str3.__proto </span><span style="color:#6A737D;">// String</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str3 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;">(str4) </span><span style="color:#6A737D;">// string</span></span>
<span class="line"><span style="color:#E1E4E8;">str4.__proto </span><span style="color:#6A737D;">// String</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="数组判断" tabindex="-1">数组判断 <a class="header-anchor" href="#数组判断" aria-label="Permalink to &quot;数组判断&quot;">​</a></h2><ol><li>instanceof arr instanceof Array</li><li>proto arr._proto === Array.prototype</li><li>Object.prototype.toString Object.prototype.tostring.call(arr) === &#39;[objdect Array]&#39;</li><li>Array.isArray() Array.isArray(arr)</li><li>constructor arr.constractor === Array</li></ol><h2 id="对象判断" tabindex="-1">对象判断 <a class="header-anchor" href="#对象判断" aria-label="Permalink to &quot;对象判断&quot;">​</a></h2><ol><li>typeof 只能判断基本类型</li><li>instanceof obj intancepof Object</li><li>constructor obj.contractor === Object</li><li>Object.prototype.toString Object.prototype.tostring.call(obj) === &#39;[objdect Object]&#39;</li></ol>`,13),o=[e];function r(t,c,i,E,y,b){return a(),n("div",null,o)}const m=s(p,[["render",r]]);export{u as __pageData,m as default};
