import{_ as s,o as n,c as a,U as l}from"./chunks/framework.1bc6aac7.js";const p="/assets/谷歌扔鸡蛋面试题.bfc5e7d8.png",_=JSON.parse('{"title":"谷歌扔鸡蛋面试题","description":"","frontmatter":{},"headers":[],"relativePath":"面试经验/29-谷歌扔两鸡蛋问题.md"}'),e={name:"面试经验/29-谷歌扔两鸡蛋问题.md"},o=l('<h1 id="谷歌扔鸡蛋面试题" tabindex="-1">谷歌扔鸡蛋面试题 <a class="header-anchor" href="#谷歌扔鸡蛋面试题" aria-label="Permalink to &quot;谷歌扔鸡蛋面试题&quot;">​</a></h1><img src="'+p+`"><ol><li>如果是一个鸡蛋，保险起见只能自下而上，一层层试，所以有两个鸡蛋，可以用一个先找到大致范围，然后再用另一个，自下而上，在这个区域一层层找。</li><li>所以涉及了两个范围，第一个和第二个鸡蛋的自下而上的次数。 <ul><li>比如100层，第一个鸡蛋每次以10层为单位往上找，在i层碎了，说明第一次查找的大致范围为i ~ i-10</li><li>然后在从i-10开始往上查找，直到在这个范围找到。</li><li>但比如在16和96层是寻找的位置，在16，第一个鸡蛋找2次，第二个鸡蛋找6次，共8次。在96，第一个鸡蛋找10次，第二枚鸡蛋6次，共16次，在高层找的次数比较多</li></ul></li><li>为了平衡高低层的次数，那就得尽量平衡第一次和第二次的次数，可以想象下99乘法表梯队，把垂直看作第一个鸡蛋分块，横向作为第二个鸡蛋的查找楼层，得到以下类似</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">n</span></span>
<span class="line"><span style="color:#e1e4e8;">  n-1 n-2</span></span>
<span class="line"><span style="color:#e1e4e8;">  n-3 n-4 n-5</span></span>
<span class="line"><span style="color:#e1e4e8;">  ...</span></span>
<span class="line"><span style="color:#e1e4e8;">  n-x n-x-1 ... 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="4"><li>所以问题就转为怎么把全部楼层这样划分，分了几块，转为js</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">drop</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 第一个鸡蛋的分块层</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> flag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 循环次数，看作扔鸡蛋次数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n ; i </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> num ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      flag</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> flag</span></span>
<span class="line"><span style="color:#E1E4E8;">      num</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> flag</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">drop</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">135</span><span style="color:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,6),r=[o];function c(t,i,E,y,b,u){return n(),a("div",null,r)}const m=s(e,[["render",c]]);export{_ as __pageData,m as default};
