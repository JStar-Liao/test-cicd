import{_ as e,o as l,c as a,U as i}from"./chunks/framework.1bc6aac7.js";const m=JSON.parse('{"title":"splice 和 slice","description":"","frontmatter":{},"headers":[],"relativePath":"js/array/splice和slice.md"}'),s={name:"js/array/splice和slice.md"},c=i('<h1 id="splice-和-slice" tabindex="-1">splice 和 slice <a class="header-anchor" href="#splice-和-slice" aria-label="Permalink to &quot;splice 和 slice&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>两者都能截取数组元素，但使用方式不一样</p><h2 id="slice" tabindex="-1">slice <a class="header-anchor" href="#slice" aria-label="Permalink to &quot;slice&quot;">​</a></h2><p>只能截取数组元素，arr.slice(startIndex, endIndex)</p><ol><li>不会改变原数组，返回新数组</li><li>包头不包尾</li><li>二参不填，截取到末尾</li><li>一参填负数，相当于(长度+负数，末尾)</li></ol><h2 id="splice" tabindex="-1">splice <a class="header-anchor" href="#splice" aria-label="Permalink to &quot;splice&quot;">​</a></h2><p>能添加，替换，删除数组元素,arr.slice(startIndex, selectNum, ...replaceArg)</p><ol><li>改变原数组，返回截取的新数组</li><li>包头不包尾</li><li>二参不填，截取到末尾</li><li>selectNum 数大于 replaceArg 数，在其中部分替换，多出部分删除</li><li>selectNum 数小于 replaceArg 数，在其中部分替换，多出部分往 toSelectIndex 按顺序插入</li></ol>',9),t=[c];function r(o,n,p,d,_,h){return l(),a("div",null,t)}const f=e(s,[["render",r]]);export{m as __pageData,f as default};
