import{_ as a,o as e,c as t,U as r}from"./chunks/framework.1d5623bb.js";const h=JSON.parse('{"title":"函数的argumnets","description":"","frontmatter":{},"headers":[],"relativePath":"面试经验/31-函数arguments.md"}'),o={name:"面试经验/31-函数arguments.md"},n=r('<h1 id="函数的argumnets" tabindex="-1">函数的argumnets <a class="header-anchor" href="#函数的argumnets" aria-label="Permalink to &quot;函数的argumnets&quot;">​</a></h1><p>非箭头函数，其包含两个自动生成的变量对象 <code>this</code>、<code>arguments</code>,内部函数在搜索这两个变量时，只会搜索到其活动对象为止。</p><h2 id="arguments" tabindex="-1">arguments <a class="header-anchor" href="#arguments" aria-label="Permalink to &quot;arguments&quot;">​</a></h2><p>它是一个类数组对象，指向形参。有length，可以索引，同时也有个callee属性，指向这个函数本身</p><h3 id="将其转化为数组" tabindex="-1">将其转化为数组 <a class="header-anchor" href="#将其转化为数组" aria-label="Permalink to &quot;将其转化为数组&quot;">​</a></h3><ol><li>Array.prototype.slice.apply(arguments)和Array.prototype.concat.apply([], arguments) 返回一个数组 相当于复制</li><li>Array.from 返回一个数组 相当于复制</li><li>展开运算符[...arguments] 返回一个数组 相当于复制</li></ol>',6),s=[n];function l(c,i,_,m,u,d){return e(),t("div",null,s)}const g=a(o,[["render",l]]);export{h as __pageData,g as default};
