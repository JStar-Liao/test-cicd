import{_ as s,o as n,c as a,U as l}from"./chunks/framework.1bc6aac7.js";const m=JSON.parse('{"title":"eventloop","description":"","frontmatter":{},"headers":[],"relativePath":"面试经验/08-eventloop.md"}'),p={name:"面试经验/08-eventloop.md"},e=l(`<h1 id="eventloop" tabindex="-1">eventloop <a class="header-anchor" href="#eventloop" aria-label="Permalink to &quot;eventloop&quot;">​</a></h1><p>Event Loop即事件循环，是指浏览器或Node的一种解决javaScript单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理</p><h2 id="任务队列" tabindex="-1">任务队列 <a class="header-anchor" href="#任务队列" aria-label="Permalink to &quot;任务队列&quot;">​</a></h2><p>一种先进先出的操作受限制的线性表</p><h2 id="任务" tabindex="-1">任务 <a class="header-anchor" href="#任务" aria-label="Permalink to &quot;任务&quot;">​</a></h2><p>在js中任务被分为宏任务和微任务</p><ul><li>宏任务 <ol><li>script里的代码</li><li>setTimeout</li><li>setInterval</li><li>setImmediate(非标准api)</li><li>I / O</li></ol></li><li>微任务 <ol><li>Process.nextTick（Node独有）</li><li>Promise.then catch finally</li><li>MutationObserver（监听DOM变化触发）</li></ol></li></ul><h2 id="机制" tabindex="-1">机制 <a class="header-anchor" href="#机制" aria-label="Permalink to &quot;机制&quot;">​</a></h2><p>JavaScript是一个单线程，它执行的所有代码都放在调用栈里面，遇到宏微任务分别将其加入各自任务队列，当调用栈执行完毕之后，就会在任务队列里面找任务，如果有微任务，就会先执行微任务，再去执行宏任务。</p><ul><li>await 返回的promise会被放到微任务队列</li></ul><h2 id="版本差异" tabindex="-1">版本差异 <a class="header-anchor" href="#版本差异" aria-label="Permalink to &quot;版本差异&quot;">​</a></h2><ul><li>在Google73版本之前，node.js v11之前 await的值被包裹在一个promise中，尚未resolve，然后将整个await放进微任务队列，等排到时执行了promise，then添加进微任务，再次排到await才全部执行完成</li><li>73版本之后，node.js v11 + await后的值包裹在一个promise.resolve中,await直接加进微任务，排到await就全部执行完成</li></ul><h2 id="nodejs" tabindex="-1">nodejs <a class="header-anchor" href="#nodejs" aria-label="Permalink to &quot;nodejs&quot;">​</a></h2><img src="https://user-gold-cdn.xitu.io/2018/6/12/163f35f70dc06fcd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><h2 id="libuv" tabindex="-1">libuv <a class="header-anchor" href="#libuv" aria-label="Permalink to &quot;libuv&quot;">​</a></h2><img src="https://user-gold-cdn.xitu.io/2018/6/12/163f410b951ce409?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><p>Node中的Event Loop是基于libuv实现的，而libuv是 Node 的新跨平台抽象层，libuv使用异步，事件驱动的编程方式，提供i/o的事件循环和异步回调，扮演着nodejs与文件、网络等异步任务的桥接角色。</p><ul><li>非i/o <ol><li>定时器</li><li>microtask</li><li>process.nextTick</li><li>setImmediate</li></ol></li><li>i/o <ol><li>网路i/o</li><li>文件i/oss</li></ol></li></ul><p>libuv内部还维护着一个默认4个线程的线程池，这些线程负责执行文件i/o操作、DNS操作、用户异步代码。当js层传递给 libuv 一个操作任务时，libuv 会把这个任务加到队列中。之后分两种情况：</p><ol><li>线程池中的线程都被占用的时候，队列中任务就要进行排队等待空闲线程。</li><li>线程池中有可用线程时，从队列中取出这个任务执行，执行完毕后，线程归还到线程池，等待下个任务。同时以事件的方式通知Event Loop，Event Loop接收到事件执行该事件注册的回调函数。</li></ol><h2 id="机制-1" tabindex="-1">机制 <a class="header-anchor" href="#机制-1" aria-label="Permalink to &quot;机制&quot;">​</a></h2><h3 id="六个阶段" tabindex="-1">六个阶段 <a class="header-anchor" href="#六个阶段" aria-label="Permalink to &quot;六个阶段&quot;">​</a></h3><ol><li>timers: 执行setTimeout和setInterval中到期的callback</li><li>pending callback: 上一轮循环中少数的callback会放在这一阶段执行</li><li>idle, prepare: 仅在内部使用</li><li>poll: 最重要的阶段，执行pending callback，在适当的情况下回阻塞在这个阶段。</li><li>check: 执行setImmediate(setImmediate()是将事件插入到事件队列尾部，主线程和事件队列的函数执行完成之后立即执行setImmediate指定的回调函数)的callback</li><li>close callbacks: 执行close事件的callback，例如socket.on(&#39;close&#39;[,fn])或者http.server.on(&#39;close, fn)</li></ol><h3 id="循环原理" tabindex="-1">循环原理 <a class="header-anchor" href="#循环原理" aria-label="Permalink to &quot;循环原理&quot;">​</a></h3><blockquote><p>setImmediate设计用于在当前poll阶段完成后check阶段执行脚本</p></blockquote><blockquote><p>当每个阶段完成后，如果存在 nextTick 队列，就会执行队列中的所有回调函数，并且优先于其他 microtask 执行</p></blockquote><blockquote><p>每阶段最后都会检测process.nextTic，microtasks有没有回调，有就执行完，然后退出该阶段。（通用阶段）</p></blockquote><ol><li>执行js代码，遇到各任务归类到各任务队列</li><li>执行process.nextTic回调</li><li>执行microtasks</li><li>进入循环</li><li>timers阶段，检测有没有到期的timers回调执行，先进先出。最后通用阶段</li><li>pending callback， 检查是否有pending的I/O回调，有就执行。通用阶段</li><li>idle, prepare这俩关系不大，不管先</li><li>poll阶段， <ol><li>检测有没有尚未到期的回调（定时器，i/o），有到期的就执行，然后通用阶段，没到期，检测有没有immediate回调，有就退出该阶段，没就等待到期的回调；</li><li>如果没有定时器或者i/o的回调任务，退出该阶段</li></ol></li><li>check阶段，检测有没有immediate回调，有就执行，然后通用阶段</li><li>closing阶段，检测有没有监听的close回调，检测有没有immediate回调，有就执行，然后通用阶段</li><li>检查有没有定时器、IO等事件句柄，有就进入下一循环，没就结束循环，程序结束</li></ol><h3 id="练习" tabindex="-1">练习 <a class="header-anchor" href="#练习" aria-label="Permalink to &quot;练习&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script start&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async1</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async2</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async3</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;async1 end&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;async2 end&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async3</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;async3 start&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">rej</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;async3 end&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">res</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">async1</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setImmediate</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;setImmediate1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  process.</span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;process.nextTick1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;setTimeout&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Promise&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setImmediate</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;setImmediate2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    process.</span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;process.nextTick2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;promise1&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;promise2&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script end&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div>`,30),o=[e];function c(r,t,E,i,y,b){return n(),a("div",null,o)}const F=s(p,[["render",c]]);export{m as __pageData,F as default};
