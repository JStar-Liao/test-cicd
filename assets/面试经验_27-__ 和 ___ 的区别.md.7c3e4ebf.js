import{_ as s,o as a,c as n,U as l}from"./chunks/framework.1d5623bb.js";const F=JSON.parse('{"title":"== 和 ===","description":"","frontmatter":{},"headers":[],"relativePath":"面试经验/27-== 和 === 的区别.md"}'),p={name:"面试经验/27-== 和 === 的区别.md"},o=l(`<h1 id="和" tabindex="-1">== 和 === <a class="header-anchor" href="#和" aria-label="Permalink to &quot;== 和 ===&quot;">​</a></h1><h2 id="" tabindex="-1">== <a class="header-anchor" href="#" aria-label="Permalink to &quot;==&quot;">​</a></h2><ol><li>只比较值，不比较类型</li><li>在判断相等时会进行隐式的类型转换， 其比较遵循一些原则，即先转换类型再比较。 <ul><li>如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值，即是调用Number()方法。</li><li>如果一个操作数是字符串，另一个是数值，在比较相等性之前先将字符串转换为数值，同样调用Number()方法。</li><li>如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf()和toString()方法把对象转换成基础类型的值再比较，除Date对象外，会优先尝试使用valueOf()方法，用得到的基本类型按照前面的规则进行比较。</li><li>以及null == undefined，此外任何其他组合，都不相等</li></ul></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//true // Number Boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//true // Number String</span></span>
<span class="line"><span style="color:#E1E4E8;">  [] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//true // Object String</span></span>
<span class="line"><span style="color:#E1E4E8;">  [] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true // Object Boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">  [] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//true // Object Number</span></span>
<span class="line"><span style="color:#E1E4E8;">  {} </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//false </span></span>
<span class="line"><span style="color:#E1E4E8;">  [] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> {}  </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">  [] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> []  </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">  {} </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> {}  </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> []   </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> [] </span><span style="color:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="-1" tabindex="-1">=== <a class="header-anchor" href="#-1" aria-label="Permalink to &quot;===&quot;">​</a></h3><p>先判断类型再比较，类型不同直接不相等</p>`,6),e=[o];function r(t,c,E,y,i,u){return a(),n("div",null,e)}const _=s(p,[["render",r]]);export{F as __pageData,_ as default};
