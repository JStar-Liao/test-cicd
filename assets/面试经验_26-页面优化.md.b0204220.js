import{_ as i,o as l,c as e,U as t}from"./chunks/framework.1d5623bb.js";const u=JSON.parse('{"title":"页面优化","description":"","frontmatter":{},"headers":[],"relativePath":"面试经验/26-页面优化.md"}'),a={name:"面试经验/26-页面优化.md"},o=t('<h1 id="页面优化" tabindex="-1">页面优化 <a class="header-anchor" href="#页面优化" aria-label="Permalink to &quot;页面优化&quot;">​</a></h1><h2 id="基本优化" tabindex="-1">基本优化 <a class="header-anchor" href="#基本优化" aria-label="Permalink to &quot;基本优化&quot;">​</a></h2><ol><li>减少http请求 <ul><li>根据页面情况，后台尽量将数据量小的几个接口，合并成一个</li></ul></li><li>使用浏览器http缓存 常规http缓存只缓存get方式 <ul><li>不常变资源使用强缓存，后台可以设置prama（http1.0产物）、cache-control、expires <ol><li>破强缓存，资源带上hash值，更新index.html的引用路径</li><li>请求带上类似时间戳参数</li></ol></li><li>较常变的资源使用协商缓存，后台设置请响应头last-modified，前端请求浏览器会带上if-modified-since，或者使用请求头 if-none-match 和响应头 etag <ol><li>每次请求带上if-modified-since或者if-none-match。后台判断是否最新的。有就返回新的，没就返回304用缓存的</li><li>优先级 if-none-match &gt; if-modified-since</li><li>会多一次协商请求，带上和协商缓存相关的请求头</li></ol></li></ul></li><li>浏览器Service Worker缓存 <ul><li>只能在https环境下部署，本地服务可以用来测试。国内谷歌浏览器的支持并不完整</li></ul></li><li>浏览器indexDB数据库 <ul><li>储存空间大 IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。</li><li>源限制 IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库</li><li>支持二进制储存。 IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）</li></ul></li><li>gzip压缩，静态资源最好本地打包时压好，不要让服务器响应时去压</li><li>静态资源压缩、合并</li><li>Sprites图片</li><li>资源懒加载，按需加载</li><li>合理搭配js，css加载的位置</li><li>减少dom操作，避免频繁重排</li><li>起本地服务，资源放本地</li><li>避免页面重定向</li></ol><h2 id="首次进入页面" tabindex="-1">首次进入页面 <a class="header-anchor" href="#首次进入页面" aria-label="Permalink to &quot;首次进入页面&quot;">​</a></h2><ol start="5"><li>gzip压缩，静态资源最好本地打包时压好，不要让服务器响应时去压</li><li>静态资源压缩、合并</li><li>Sprites图片</li><li>资源懒加载，按需加载</li><li>合理搭配js，css加载的位置</li><li>起本地服务，资源放本地</li><li>避免页面重定向</li></ol><h2 id="再次进入页面" tabindex="-1">再次进入页面 <a class="header-anchor" href="#再次进入页面" aria-label="Permalink to &quot;再次进入页面&quot;">​</a></h2><ol start="2"><li>使用浏览器http缓存 常规http缓存只缓存get方式 <ul><li>不常变资源使用强缓存，后台可以设置prama（http1.0产物）、cache-control、expires <ol><li>破强缓存，资源带上hash值，更新index.html的引用路径</li><li>请求带上类似时间戳参数</li></ol></li><li>较常变的资源使用协商缓存，后台设置请响应头last-modified，前端请求浏览器会带上if-modified-since，或者使用请求头 if-none-match 和响应头 etag <ol><li>每次请求带上if-modified-since或者if-none-match。后台判断是否最新的。有就返回新的，没就返回304用缓存的</li><li>优先级 if-none-match &gt; if-modified-since</li><li>会多一次协商请求，带上和协商缓存相关的请求头</li></ol></li></ul></li><li>浏览器Service Worker缓存 <ul><li>只能在https环境下部署，本地服务可以用来测试。国内谷歌浏览器的支持并不完整</li></ul></li><li>浏览器indexDB数据库 <ul><li>储存空间大 IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。</li><li>源限制 IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库</li><li>支持二进制储存。 IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）</li></ul></li></ol>',7),r=[o];function n(d,s,c,h,f,_){return l(),e("div",null,r)}const p=i(a,[["render",n]]);export{u as __pageData,p as default};
