import{_ as s,o as a,c as n,U as l}from"./chunks/framework.1d5623bb.js";const d=JSON.parse('{"title":"闭包","description":"","frontmatter":{},"headers":[],"relativePath":"面试经验/18-闭包.md"}'),p={name:"面试经验/18-闭包.md"},o=l(`<h1 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h1><p>js在执行上下文时，遇到函数执行，进入这个函数后，创建变量对象时，扫到内函数，如果这个内函数引用到了外层级的变量（非全局变量），浏览器会为这个内函数的作用域链上添加一个含这个变量的Closure作用域，这个作用域称之为闭包</p><p>console.dir(内函数),可在[[scopes]]内查看</p><h2 id="闭包的特征" tabindex="-1">闭包的特征 <a class="header-anchor" href="#闭包的特征" aria-label="Permalink to &quot;闭包的特征&quot;">​</a></h2><ol><li>函数内包含一个函数，且内函数含引用了父层函数的变量(包括形参)</li><li>闭包不会随着父级作用域的结束而结束</li></ol><h2 id="闭包共性" tabindex="-1">闭包共性 <a class="header-anchor" href="#闭包共性" aria-label="Permalink to &quot;闭包共性&quot;">​</a></h2><p>多个内函数共用一个闭包</p><h2 id="metetor经典闭包泄露问题" tabindex="-1">metetor经典闭包泄露问题 <a class="header-anchor" href="#metetor经典闭包泄露问题" aria-label="Permalink to &quot;metetor经典闭包泄露问题&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">replaceThing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> o </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unused</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (o) console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hi&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      longStr: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000000</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">someMethod</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(replaceThing, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>谷歌旧版本heap会一直递增，新版已处理</p>`,10),e=[o];function r(t,c,E,i,y,u){return a(),n("div",null,e)}const m=s(p,[["render",r]]);export{d as __pageData,m as default};
