const e={map:'[{"animation":["0.0"],"注意":["0.1","56.2","56.4"],"示例":["0.2","2.1","24.2","30.1","48.1"],"代码":["0.3","2.2","29.1","30.2","48.2"],"贡献名单":["0.4","2.3","48.4"],"flex":["1.0"],"一":["1.1"],"二":["1.2"],"注意点":["1.5","7.2","7.4","8.7","13.4","14.3","15.4","15.8","15.12","16.5","17.5","18.2","21.2","22.5","26.4","28.3","55.2"],"vmin和vmax":["2.0"],"web":["3.0"],"viewport":["3.1"],"flexible":["3.2"],"简介":["4.0"],"indexof":["6.0","6.3"],"定义":["6.1","9.1","13.1","14.1","15.1","15.5","15.9","16.1","17.1","18.1","19.1","21.1","22.1","28.1","31.1","34.1","35.1","37.1","50.1","50.20","55.1","56.1","56.3","57.1"],"includes":["6.2"],"判断是否为数组":["7.0"],"对象描述符":["7.1"],"原型链":["7.3","88.2"],"构造函数":["7.5","21.3"],"数组去重":["8.0","79.9"],"filter":["8.1"],"reduce":["8.2"],"set":["8.3"],"map":["8.4"],"双重循环遍历":["8.5"],"对象哈希表":["8.6"],"splice":["9.0","9.3"],"slice":["9.2"],"交集并集":["10.0"],"形成树结构":["11.0"],"递归":["11.1"],"对象引用":["11.2"],"插入排序":["12.0"],"apply":["13.0"],"使用方法":["13.2"],"好处":["13.3","15.7","15.11","17.3","22.3","26.2","28.2","37.2"],"实现":["13.5","21.6","44.4"],"asyncawait":["14.0"],"解决啥问题":["14.2","16.2"],"实现原理":["14.4","16.4","35.6"],"http":["15.0","20.1"],"特征":["15.2"],"优势":["15.3","24.1","54.1"],"怎么使用":["15.6","15.10"],"promise":["16.0"],"其中概念":["16.3"],"this":["17.0"],"用处":["17.2"],"坏处":["17.4"],"练习题":["17.6"],"undefined":["18.0"],"事件循环":["19.0"],"基本概念":["19.2"],"工作原理":["19.3"],"前端各类优化":["20.0"],"代码编写":["20.2"],"ssr":["20.3"],"预渲染":["20.4"],"使用":["20.5","29.2"],"原型和原型链":["21.0"],"构造函数创建实例过程":["21.4"],"原型对象":["21.5"],"变量提升":["22.0"],"为什么会有变量提升这种特性":["22.2"],"问题点":["22.4"],"解决方式":["22.6"],"如何支持块级作用域的":["22.7"],"暂示性死区":["22.8"],"练习":["22.9","63.10"],"垃圾回收":["23.0"],"js":["23.1","27.0","32.0"],"引用计数法":["23.2","69.4"],"弊端":["23.3","23.5","26.3"],"标记清除法":["23.4","69.3"],"分代回收法":["23.6"],"新生代":["23.7"],"老生代":["23.8"],"柯里化":["24.0"],"浏览器渲染":["25.0"],"箭头函数与普通函数区别":["26.0"],"箭头函数定义":["26.1"],"与普通函数区别":["26.5"],"创建类":["27.1"],"适用情况":["27.3","27.7","27.13","27.21","27.25","27.29"],"运用":["27.4","27.8","27.14","27.17","27.22","27.26","27.30"],"优缺点":["27.5","27.9","27.15","27.18","27.23","27.27","27.31"],"结构类":["27.11"],"行为类":["27.19"],"闭包":["28.0"],"函数参数数量重载":["29.0"],"数字逗号分隔":["30.0"],"api":["30.3"],"源码":["30.4"],"substr":["31.0","31.2"],"substring":["31.3"],"interface":["33.0"],"声明合并":["33.1"],"类型拓展":["33.2"],"rollup":["34.0","35.5"],"概念":["34.2","50.29"],"实现过程":["34.3","50.21"],"插件":["34.4","50.10"],"hook":["34.5","35.14","50.12"],"钩子函数":["34.6"],"build":["34.7"],"output":["34.8"],"主要介绍":["34.9"],"与":["34.10","35.16"],"vite":["35.0"],"双引擎架构":["35.2"],"esbuild":["35.3","35.4"],"实现方法":["35.7"],"开发阶段":["35.8","35.17"],"该阶段与":["35.9"],"生产阶段":["35.10","35.18"],"插件机制":["35.11"],"通用":["35.12"],"独有":["35.13"],"插件执行顺序":["35.15"],"vue":["36.0","42.0","44.0","47.0"],"diff":["37.0","37.5"],"大致实现逻辑":["37.3"],"缺陷":["37.4"],"vue2":["37.6","41.0","46.1"],"最长子序列的索引":["37.7"],"nexttick":["39.0","39.1"],"v":["40.0"],"定义和用处":["40.1"],"区别":["40.2","44.1","47.4","76.1","87.1"],"主要区别":["41.1"],"watch":["44.2","45.0","49.10","99.1"],"computed":["44.3","49.11","99.2"],"watcheffect":["45.1"],"区别与优缺点":["45.2"],"响应式原理":["46.0"],"具体流程":["46.2","46.4"],"vue3":["46.3"],"pinia":["47.1"],"storetoref":["47.2"],"vuex":["47.3"],"动态数字":["48.0"],"参数":["48.3"],"响应式":["49.0"],"ref":["49.1"],"为什么访问值需要":["49.2"],"reactive":["49.3"],"shallowref":["49.4"],"shallowreactive":["49.5"],"toraw":["49.6"],"markraw":["49.7"],"toref":["49.8"],"torefs":["49.9"],"webpack":["50.0"],"作用":["50.2"],"加载器":["50.3"],"规则":["50.4"],"占位符":["50.5"],"类型":["50.6"],"执行顺序":["50.7","50.13"],"内联方式":["50.8"],"编写自定义":["50.9"],"hooks":["50.11"],"自定义插件":["50.14"],"配置":["50.15"],"模块":["50.16"],"优化":["50.17"],"热更新机制":["50.18"],"treeshaking":["50.19"],"开发环境搭建":["50.22"],"注入环境变量":["50.23"],"别名":["50.24"],"外部扩展":["50.25"],"获取第三方对应":["50.26"],"缺点":["50.27"],"编译打包过程":["50.28"],"过程":["50.30"],"性能分析":["52.0"],"错误监听":["53.0"],"无界微前端方案":["54.0"],"对文档流的影响":["57.2"],"清除浮动":["57.3"],"bfc特性":["59.1"],"触发bfc":["59.2"],"解决块级块级margin重叠":["59.3"],"自适应布局":["59.4"],"任务队列":["63.1"],"任务":["63.2"],"机制":["63.3","63.7"],"版本差异":["63.4"],"nodejs":["63.5"],"libuv":["63.6"],"六个阶段":["63.8"],"循环原理":["63.9"],"手写promise":["64.0"],"特性":["65.1"],"demo":["65.2"],"原理demo":["66.1"],"注意事项":["66.2"],"不被回收的固有值":["69.1"],"回收机制":["69.2"],"作用域的形成":["71.1"],"闭包的特征":["72.1"],"闭包共性":["72.2"],"metetor经典闭包泄露问题":["72.3"],"typeof":["75.1"],"instabceof":["75.2","88.3"],"字符串":["75.3"],"数组判断":["75.4"],"对象判断":["75.5"],"const":["76.0"],"浏览器资源加载":["77.0"],"预加载新标准api":["77.1"],"异步加载":["77.2"],"页面加载过程":["77.3"],"浅拷贝":["78.1"],"浅拷贝方式":["78.2"],"深拷贝":["78.3"],"方法":["79.1"],"add":["79.2"],"clear":["79.3"],"delete":["79.4"],"has":["79.5"],"foreach":["79.6"],"entries":["79.7"],"values":["79.8"],"字符串去重":["79.10"],"实现并集":["79.11"],"基本优化":["80.1"],"首次进入页面":["80.2"],"再次进入页面":["80.3"],"xss攻击":["82.1"],"防御方式":["82.2","82.4","82.6"],"csrf攻击":["82.3"],"sql注入":["82.5"],"arguments":["85.1"],"将其转化为数组":["85.2"],"原生ajax":["86.1"],"jsonp":["86.2"],"cors":["86.3"],"nginx反向代理":["86.4"],"nodejs中间件代理":["86.5"],"websocket协议跨域":["86.6"],"iframe跨域通讯":["86.7"],"document":["86.8"],"location":["86.9"],"window":["86.10"],"postmessage跨域":["86.11"],"实例对象":["88.1"],"hasownproperty":["88.4"],"es6":["89.1"],"export":["89.2","89.4"],"import":["89.3","89.5"],"script中使用":["89.6"],"commonjs":["89.7"],"module对象":["89.8"],"module":["89.9"],"exports变量":["89.10"],"require":["89.11","89.15"],"加载规则":["89.12"],"模块的缓存":["89.13"],"循环加载":["89.14"],"模块的加载机制":["89.16"],"hash":["94.1"],"history":["94.2"],"相关":["94.3"],"原理":["95.1"],"diff流程":["98.1"],"对于对象和数组属性":["100.1","101.1"],"vue中object":["100.2"],"与其继承的defineproperty相比":["101.2"],"基本使用":["106.1"],"主应用vue":["106.2"],"单页面多子应用":["106.3"],"子应用子路由嵌套可以在一个子组件内引入乾坤":["106.4"],"应用间通讯":["106.5"],"子应用跳转其他应用":["106.6"],"沙箱隔离":["107.1"],"样式隔离":["107.2"]},{"0":["4.0","13.2","15.11","15.12","17.5","32.0","37.7","64.0"],"1":["0.1","1.3","1.4","1.5","7.4","8.7","10.0","13.3","13.4","14.2","14.3","14.4","15.2","15.3","15.4","15.7","15.8","15.11","15.12","16.2","16.3","16.4","16.6","17.2","17.3","17.6","18.2","19.2","19.3","20.1","20.2","21.2","21.4","22.3","22.4","22.5","22.7","24.1","25.0","26.2","26.4","26.5","27.2","27.9","27.13","27.15","27.21","27.23","27.31","28.2","28.3","34.2","34.5","34.9","34.10","35.3","35.6","35.8","35.9","35.10","35.17","36.0","37.3","37.4","37.6","40.2","41.1","42.0","44.2","44.3","46.2","46.4","47.1","47.3","47.4","50.5","50.7","50.8","50.12","50.14","50.18","50.21","50.29","50.30","54.1","56.2","56.4","57.2","57.3","59.1","59.2","59.3","59.4","63.2","63.8","64.0","65.1","66.2","69.1","71.1","72.1","75.1","75.4","75.5","76.1","77.1","77.3","78.2","78.3","80.1","81.1","82.2","82.4","82.6","85.2","86.10","87.1","89.7","89.8","94.1","94.3","98.1","99.1","99.2","101.2","106.1","106.5","107.2"],"2":["1.3","1.4","1.5","10.0","12.0","14.4","15.2","15.11","15.12","16.4","16.6","17.6","19.2","19.3","25.0","26.2","27.6","27.15","37.4","41.1","42.0","50.5","50.14","50.30","54.1","63.8","77.1","77.3","80.1","80.3","81.1","86.10","89.8","106.1"],"3":["10.0","16.6","17.6","27.10","36.0","50.14","64.0","77.1","79.9"],"4":["10.0","16.6","17.6","27.12","35.3","64.0"],"5":["10.0","12.0","27.16","64.0","79.9","80.2"],"6":["10.0","27.20","64.0"],"7":["27.24","64.0"],"8":["27.28","64.0"],"9":["12.0"],"10":["35.3","58.0","83.0","84.0"],"11":["64.0","90.0"],"12":["64.0"],"14":["91.0","92.0","93.0"],"15":["64.0","100.0","101.0","102.0"],"17":["90.0","105.0"],"19":["111.0"],"20":["91.0","93.0","101.0","102.0","111.0"],"21":["61.0","83.0","84.0"],"22":["67.0","93.0"],"24":["61.0"],"26":["58.0","61.0"],"28":["61.0"],"29":["64.0"],"30":["67.0"],"36":["93.0"],"46":["91.0"],"47":["67.0"],"48":["64.0","91.0"],"50":["93.0"],"53":["64.0","102.0"],"58":["64.0","84.0"],"71":["50.12"],"100":["35.3"],"127":["32.0"],"200":["108.2"],"400":["108.4"],"401":["108.4"],"2015":["15.9"],"2018":["63.6"],"2021":["58.0","61.0","62.0","64.0","66.0","67.0","70.0","71.0","73.0","74.0","83.0","84.0","90.0","91.0","92.0","93.0","98.0","100.0","101.0","102.0","105.0","111.0","116.0"],"10000":["106.1"],"timeline":["0.0","0.1"],"动画时间线":["0.0"],"animation":["0.1"],"animationtimeline":["0.2"],"vue":["0.3","27.30","37.3","39.1","47.1","47.3","106.1"],"template":["0.3"],"div":["0.3","2.2","30.1","48.1","48.2"],"class":["0.3","2.2","16.5","50.14"],"animationtimelinewrap":["0.3"],"h3":["0.3","2.2"],"实现滚动进度条":["0.3"],"demowrap":["0.3"],"vpteammembers":["0.4","2.3","48.4"],"探究":["1.0"],"作用":["1.1"],"基本使用":["1.2"],"容器属性":["1.3"],"flex":["1.3","1.4"],"direction":["1.3"],"项目属性":["1.4"],"grow":["1.4"],"设置":["1.4"],"项目主轴尺寸的每行均分时的所占比例":["1.4"],"justify":["1.5"],"items":["1.5","11.2"],"self":["1.5"],"在弹性盒子里是被忽略的":["1.5"],"可以结合":["1.5"],"gap":["1.5"],"属性做流式间隔布局":["1.5"],"vmin":["2.0"],"vminvmax":["2.1"],"html":["2.2","30.2","48.2","77.1","89.6"],"vminvmaxwrap":["2.2"],"和":["3.0","6.0","9.0","16.4","31.0","33.0","37.6","41.0","46.2","46.3","88.4"],"方案":["3.1","3.2"],"badge":["4.0"],"type":["4.0"],"tip":["4.0"],"text":["4.0"],"都是用来检查字符串或数组中是否包含某个元素的方法":["6.1"],"arr":["6.2","6.3","9.2","9.3","12.0","37.7","75.4","79.9"],"object":["7.1","46.2","78.2"],"如果其他对象类型使用了":["7.2"],"var":["7.3","17.6","72.3","79.7","79.8","89.12"],"如果其他类型对象使用了":["7.4"],"推荐":["7.5"],"搭配":["8.1","8.2"],"indexof":["8.1"],"includes":["8.2"],"js":["8.2","8.4","8.6","10.0","11.1","11.2","12.0","13.2","13.5","14.4","16.5","17.1","17.6","21.1","21.6","22.1","22.9","24.2","27.8","36.0","37.7","39.1","50.14","50.16","50.23","50.24","63.10","64.0","65.2","66.1","72.3","75.3","76.1","78.2","78.3","79.2","79.3","79.4","79.5","79.6","79.7","79.8","79.9","79.10","79.11","86.1","89.2","89.3","89.4","89.12","89.13","89.14","106.1","106.4","106.5"],"数据结构":["8.3","8.4"],"不推荐":["8.5","11.1"],"近乎o":["8.6"],"n":["8.6"],"两者都能截取数组元素":["9.1"],"只能截取数组元素":["9.2"],"能添加":["9.3"],"替换":["9.3"],"删除数组元素":["9.3"],"const":["10.0","11.1","11.2","12.0","13.2","13.5","21.6","29.1","29.2","32.0","37.7","50.23","106.1","106.5"],"arr1":["10.0"],"递归查找":["11.1"],"获取children":["11.1"],"function":["11.2","13.5","17.6","21.6","24.2","37.7","63.10","65.2","66.1","79.6"],"arraytotree":["11.2"],"result":["11.2","37.7"],"存放结果集":["11.2"],"itemmap":["11.2"],"for":["11.2","37.7"],"item":["11.2"],"of":["11.2"],"call":["13.0","19.2"],"允许改变函数运行时的":["13.1"],"obj":["13.2","21.6"],"initnum":["13.2"],"test":["13.2"],"a":["13.2","24.2","79.11","86.9","86.11","89.14"],"都可以改变函数的":["13.3"],"他们无法改变箭头函数的":["13.4"],"prototype":["13.5","21.5"],"myapply":["13.5"],"constructor":["13.5","50.14"],"args":["13.5"],"arguments":["13.5","26.2"],"console":["13.5","17.6","50.14","63.10","89.14"],"log":["13.5","17.6","50.14","63.10"],"async":["14.1","14.4","34.5","34.9","63.10"],"回调地狱":["14.2","16.2"],"callback":["14.2","16.2"],"hell":["14.2","16.2"],"在":["14.2","16.2","17.3","22.2","31.2","34.3","36.0","39.1"],"javascript":["14.2","16.2","17.3","19.2","39.1","50.1"],"的异步编程中":["14.2"],"经常需要使用回调函数来处理异步操作的结果":["14.2"],"然而":["14.2"],"当多个异步操作需要按顺序执行时":["14.2"],"回调函数很容易形成嵌套":["14.2"],"导致代码结构混乱":["14.2"],"await":["14.3","14.4","32.0","63.10","66.2"],"只能在":["14.3","76.1"],"调用":["14.4","37.5","47.1"],"会将函数转换为一个":["14.4"],"promise":["14.4","16.1","16.4","16.6","64.0","65.2","66.1"],"函数":["14.4","89.5"],"返回出去":["14.4"],"同时会生成一个生成器函数":["14.4"],"将":["14.4"],"的表达式转换为":["14.4"],"yield":["14.4"],"http":["15.1","15.5","15.9","15.11","15.12","32.0"],"超文本传输协议是位于":["15.1"],"支持客户":["15.2"],"服务器模式":["15.2"],"简单快速":["15.2"],"客户向服务器请求服务时":["15.2"],"灵活性强":["15.3"],"相当于":["15.5"],"ssl":["15.5"],"tls":["15.5"],"即":["15.5"],"下加入":["15.5"],"层":["15.5"],"https":["15.5","25.0","52.0","53.0","63.5","63.6"],"的安全基础是":["15.5"],"因此加密的详细内容就需要":["15.5"],"由于需要对证书判定":["15.8"],"年发布的":["15.9"],"第二个主要版本":["15.9"],"在不改动":["15.9"],"语义":["15.9"],"方法":["15.9","37.5","47.3","50.14"],"性能提升":["15.11"],"采用了二进制传输数据":["15.11"],"而非之前的文本格式":["15.11"],"复杂性增加":["15.12"],"相对于":["15.12"],"resolve":["16.3","16.6","64.0","65.2"],"首先知道几个概念":["16.4"],"pending":["16.4","16.6"],"fulfilled":["16.4"],"rejected":["16.4","16.5"],"三个状态":["16.4"],"的":["16.4","16.6","37.6","44.0","47.1","47.3"],"value":["16.4","16.6","40.2","49.2"],"下面的好混乱":["16.5"],"错的":["16.5"],"mypromise":["16.5"],"sta":["16.5"],"维护一个回调函数列表":["16.5"],"然后根据状态":["16.5"],"peddind":["16.5"],"fullfild":["16.5"],"判断是去执行加入列表":["16.5"],"走":["16.5"],"then":["16.5","64.0"],"实例创建后":["16.6"],"内部状态为":["16.6"],"执行传入的函数":["16.6"],"根据业务逻辑去执行":["16.6"],"还是":["16.6"],"reject":["16.6","64.0","65.2"],"如果业务逻辑能直接同步执行完":["16.6"],"触发":["16.6"],"或者":["16.6","106.1"],"则将传入参数缓存在":["16.6"],"中":["16.6","17.3","34.3","36.0","39.1","94.1"],"等待有链式调用时使用":["16.6"],"如果业务逻辑是需要等待的任务":["16.6"],"指向问题":["17.0"],"this":["17.1","17.3","17.6","26.2","26.4","87.1"],"是":["17.1","34.2"],"是一个非常重要的关键字":["17.3"],"它引用函数运行时的上下文":["17.3"],"理解并正确使用":["17.3"],"可以帮助你编写更灵活":["17.3"],"更可维护的代码":["17.3"],"以下是":["17.3"],"需要注意":["17.4"],"绑定优先级":["17.5"],"new":["17.5","37.7","50.14","65.2","66.1","79.4","79.7","79.8","79.11"],"关键字":["17.5"],"直接调用":["17.6"],"foo":["17.6","89.4","89.12"],"对象中的函数":["17.6"],"obj1":["17.6"],"fn1":["17.6"],"被全局变量引用":["17.6"],"obj2":["17.6"],"bar":["17.6"],"fn2":["17.6"],"函数嵌套调用":["17.6"],"null":["18.0","34.9","72.3","86.1"],"两者都代表空":["18.1"],"都是原始数据类型":["18.1"],"使用":["18.1","21.3","33.2","35.3","35.18","50.8","50.22"],"typeof":["18.2","75.5"],"检查":["18.2"],"事件循环是":["19.1"],"调用栈":["19.2"],"stack":["19.2"],"引擎有一个单线程的调用栈":["19.2"],"用于执行同步代码":["19.2"],"调用栈执行全局的同步代码":["19.3"],"强缓存协商缓存":["20.1"],"vue2":["20.2"],"v":["20.2","40.2"],"perfomance":["20.5"],"不管什么类型对象都有它的原型":["21.1"],"用来共享属性和方法":["21.1"],"对象的":["21.2"],"proto":["21.2"],"mynew":["21.6"],"hoisting":["22.0"],"在执行上下文其中的一种工作方式":["22.1"],"引擎在代码执行的过程中将变量声明部分和函数声明提取到开头一种行为":["22.1"],"与直觉不相符":["22.1"],"算是一种设计缺陷":["22.1"],"提高性能":["22.3"],"为解决上述变量提升问题":["22.6"],"通过词法环境的栈结构来实现":["22.7"],"变量提升是通过变量环境实现":["22.7"],"在创建执行上下文时":["22.7"],"es6":["22.8"],"规定":["22.8"],"如果区块中存在":["22.8"],"let":["22.8","22.9","37.7","63.10","66.1","75.3","78.3","79.4","79.9","79.11","86.1"],"temp":["22.9"],"内存概念":["23.1"],"变量声明":["23.2"],"循环引用":["23.3"],"垃圾回收器区将所有内存中的对象打上标记":["23.4"],"内存碎片化":["23.5"],"内部又分为使用区":["23.7"],"空闲区":["23.7"],"使用标记清除法和标记整理算法回收":["23.8"],"将一个接受多个参数的函数转换为一系列使用一个参数的函数":["24.0"],"add":["24.2","79.1","106.1"],"b":["24.2","86.11"],"dns":["25.0","77.1"],"解析":["25.0"],"然后走":["25.0"],"协议":["25.0"],"tcp":["25.0"],"ip":["25.0"],"获取静态资源":["25.0"],"浏览器会使用":["25.0"],"hmtl":["25.0"],"箭头函数表达式的语法比传统的函数表达式更简洁":["26.1"],"但在语义上有一些差异":["26.1"],"更简洁的语法":["26.2"],"箭头函数提供了一种更简洁的方式来编写函数":["26.2"],"特别是当函数体很短或者不需要自己的":["26.2"],"或":["26.2"],"super":["26.2"],"时":["26.2","34.9"],"传统函数":["26.2"],"不绑定自己的":["26.2"],"设计模式":["27.0"],"全局需要供用一个访问点":["27.3"],"vuex":["27.4"],"优点":["27.5","27.9","27.15","27.18","27.23","27.27","27.31"],"当类中有一些通用处理":["27.7"],"良好的封装":["27.9"],"使用一个已经存在的对象":["27.13"],"echarts":["27.14"],"提高代码的复用性":["27.15"],"适配器模式允许已有的接口与新的接口协同工作":["27.15"],"无需修改已有代码":["27.15"],"从而提高了代码的复用性":["27.15"],"静态数据过滤":["27.17"],"element":["27.22"],"策略相互独立":["27.23"],"dom":["27.26","37.4","37.5"],"发布订阅模式":["27.28"],"在函数作用域内执行上下文时":["28.1"],"ts":["29.1","29.2","30.4","41.1"],"export":["29.1","37.7","106.5"],"argsnumberoverload":["29.1"],"overloadobj":["29.1","29.2"],"重载汇集的对象":["29.2"],"x":["29.2","36.0","89.14"],"string":["29.2","30.4","33.1","34.2","34.9"],"count":["30.0"],"函数名":["30.3"],"number":["30.4"],"decimals":["30.4"],"两者都能截取字符串":["31.1"],"ecmascript":["31.2"],"str":["31.3","75.3"],"response":["32.0"],"fetch":["32.0"],"interface":["33.1","33.2"],"会做声明合并":["33.1"],"将同变量名的合并":["33.1"],"导致其声明的类型具有不确定性":["33.1"],"会造成比如":["33.1"],"将这个类型的变量赋值给":["33.1"],"record":["33.1"],"extends":["33.2"],"实现原理":["34.0","47.1"],"模块打包器":["34.1"],"magic":["34.2"],"rollup":["34.2","34.3","35.18"],"作者写的一个关于字符串操作的库":["34.2"],"一个文件就是一个模块":["34.3"],"每个模块都会根据文件的代码生成一个":["34.3"],"ast":["34.3"],"对于一个真实的项目构建场景来说":["34.4"],"类型":["34.5","48.3","50.12"],"sync":["34.5"],"有很多钩子函数":["34.6"],"阶段工作流":["34.7","34.8"],"outputoptions":["34.8"],"路径解析":["34.9"],"resolveid":["34.9"],"一般用来解析路径":["34.9"],"first":["34.9"],"类型的钩子":["34.9"],"返回值为":["34.9"],"会默认交给下一个插件的":["34.9"],"钩子处理":["34.9","50.13"],"则停止后续插件的处理":["34.9"],"这里为了让替换后的路径能被其他插件处理":["34.9"],"特意调用了":["34.9"],"webpack":["34.10","35.9","35.16","35.17","50.12","50.22","50.23"],"的区别":["34.10"],"设计理念不同":["34.10"],"一种新型前端构建工具":["35.1"],"能够显著提升前端开发体验":["35.1"],"性能利器":["35.3"],"基于":["35.3","69.2"],"golang":["35.3"],"开发的一款打包工具":["35.3"],"相比传统的打包工具":["35.3"],"主打性能优势":["35.3"],"在构建速度上可以比传统工具快":["35.3"],"倍":["35.3"],"那么":["35.3"],"它是如何达到这样超高的构建性能的呢":["35.3"],"主要原因可以概括为":["35.3"],"点":["35.3"],"开发":["35.3"],"构建逻辑代码直接被编译为原生机器码":["35.3"],"打包工具缺点":["35.4"],"构建基石":["35.5"],"关键点":["35.6"],"首先是基于":["35.8"],"esm":["35.8"],"为核心":["35.8"],"浏览器可以使用该模块":["35.8"],"做":["35.8","46.4"],"no":["35.8"],"bounld":["35.8"],"对比":["35.9"],"优势":["35.9"],"更快的启动":["35.9"],"在开发阶段":["35.11"],"hook":["35.12","35.13"],"config":["35.13","35.14"],"执行顺序":["35.14"],"服务启动阶段":["35.14"],"configresolved":["35.14"],"alias":["35.15"],"路径别名":["35.15"],"构建原理不一样":["35.17"],"需要将所有依赖编译构建好标准":["35.17"],"打包":["35.18"],"引入了":["36.0"],"composition":["36.0"],"api":["36.0","49.0"],"它与之前的":["36.0"],"options":["36.0"],"有一些显著的区别":["36.0"],"以下是两者之间的主要区别":["36.0"],"组织和重用逻辑的方式":["36.0"],"组件的逻辑是以选项对象的形式组织的":["36.0"],"算法":["37.0","37.1"],"diff":["37.1","37.4","37.6"],"比较简单的":["37.2"],"组件状态发生变化":["37.3"],"生成新的":["37.3"],"对大型":["37.4"],"树的性能影响":["37.4"],"当处理大型":["37.4"],"复杂的":["37.4"],"树时":["37.4"],"算法的性能可能会受到影响":["37.4"],"因为即使是最小的变化也可能需要遍历整个树来找出差异":["37.4"],"key":["37.4","50.26"],"步骤":["37.5"],"第一步":["37.5"],"patch":["37.5"],"传入新旧虚拟":["37.5"],"vue3":["37.6"],"区别":["37.6"],"贪心算法":["37.7"],"二分法":["37.7"],"前置回溯法":["37.7"],"getsequence":["37.7"],"len":["37.7"],"length":["37.7"],"默认以数组中第0个为基准来做序列":["37.7"],"注意":["37.7"],"存放的是数组":["37.7"],"索引":["37.7"],"resultlastindex":["37.7"],"结果集中最后的索引":["37.7"],"start":["37.7","63.10","106.1","106.4"],"end":["37.7"],"middle":["37.7"],"p":["37.7"],"array":["37.7","85.2"],"fill":["37.7"],"最后要标记索引":["37.7"],"放的东西不用关心":["37.7"],"但是要和数组一样长":["37.7"],"i":["37.7","63.10","106.1"],"arri":["37.7"],"兼容方式":["39.1"],"的兼容方式主要依赖于不同":["39.1"],"环境提供的异步任务队列":["39.1"],"由于":["39.1"],"需要在":["39.1"],"model":["40.0"],"它是一个":["40.1"],"使用在表单元素这类标签上面":["40.2"],"比如":["40.2"],"input":["40.2"],"相当于给":["40.2"],"添加了一个":["40.2"],"属性和":["40.2"],"on":["40.2"],"工程源码":["41.1"],"工程目录":["41.1"],"v3":["41.1"],"改成了":["41.1"],"monorepo":["41.1"],"方式维护":["41.1"],"v2":["41.1"],"是在":["41.1"],"src":["41.1","63.5","63.6","77.2"],"目录下根据功能拆分":["41.1"],"让开发人员更容易理解":["41.1"],"更改模块":["41.1"],"让包可以单独引用":["41.1"],"而不用依赖整个":["41.1"],"vuejs":["41.1"],"比如响应式库":["41.1"],"类型检查工具改成了":["41.1"],"typescript":["41.1"],"也就是使用":["41.1"],"重写":["41.1"],"是使用的是":["41.1"],"flow":["41.1"],"可以更好结合":["41.1"],"做开发":["41.1"],"性能":["41.1"],"源码体积优化":["41.1"],"移除了一些冷门的功能比如":["41.1"],"filter":["41.1"],"inline":["41.1"],"模板解析渲染流程":["42.0"],"首先会将单文件编译包模板使用编译函数":["42.0"],"生成模板信息":["42.0"],"是一个数据监听属性":["44.2","99.1"],"数据有变化会触发":["44.2"],"要依赖":["44.3"],"data":["44.3","46.1","46.2"],"上的属性变化返回一个值":["44.3"],"需要明确指定要侦听的响应式数据源":["45.0"],"不需要明确指定要侦听的数据源":["45.1"],"watch":["45.2"],"更适合于特定的侦听场景":["45.2"],"当你知道要侦听哪些特定的数据源时使用":["45.2"],"首先需要了解三个概念和发布":["46.1"],"订阅模式":["46.1"],"在组件实例初始化时":["46.2"],"observer":["46.2"],"会使用":["46.2","46.4"],"definepropty":["46.2"],"对":["46.2"],"这些对象遍历它的所有属性做":["46.2"],"getter":["46.2","46.4"],"setter":["46.2","46.4"],"初始化实例时":["46.4"],"reactive":["46.4"],"将对象和集合使用":["46.4"],"proxy":["46.4"],"deletepropty":["46.4"],"状态管理":["47.0"],"利用":["47.1","47.3"],"use":["47.1","47.3"],"原理":["47.3"],"提供":["47.3"],"install":["47.3"],"说明":["48.3"],"默认值":["48.3"],"一个用于现代":["50.1"],"把静态模块内容":["50.2"],"压缩":["50.2"],"loader":["50.3","50.7","50.9"],"rules":["50.4"],"hash":["50.5","86.9"],"对模块内容做算法计算":["50.5"],"得到映射的数字字母组合的字符串":["50.5"],"ext":["50.5"],"使用当前模块原本的占位符":["50.5"],"例如":["50.5"],"enforce":["50.6"],"pitching":["50.7"],"阶段":["50.7"],"上的":["50.7"],"pitch":["50.7"],"前缀":["50.8"],"将禁用所有已配置的":["50.8"],"三个参数":["50.9"],"source":["50.9"],"plugin":["50.10"],"entry":["50.11","106.1"],"option":["50.11"],"初始化":["50.11"],"run":["50.11"],"synchook":["50.12"],"同步钩子":["50.12"],"共出现":["50.12"],"次":["50.12"],"如":["50.12"],"compiler":["50.12","50.14"],"testplugin":["50.14"],"webpack读取配置时":["50.14"],"会执行插件":["50.14"],"webpack创建":["50.14"],"对象":["50.14"],"configuration":["50.15"],"modules":["50.16"],"与":["50.16","89.4"],"node":["50.16","63.4","89.7"],"optimization":["50.17"],"本地服务启动时":["50.18"],"机制":["50.19"],"是一种基于":["50.20"],"构建阶段收集模块信息":["50.21"],"有哪些导出值":["50.21"],"形成导出列表":["50.21"],"记录到依赖关系图":["50.21"],"dev":["50.22"],"require":["50.23","89.12"],"externals":["50.25"],"没":["50.27"],"bundle":["50.29"],"捆绑包":["50.29"],"是指将所有相关的模块和资源打包在一起形成的单个文件":["50.29"],"它是应用程序的最终输出":["50.29"],"初始化参数":["50.30"],"从配置文件和":["50.30"],"shell":["50.30","106.1"],"语句中读取与合并参数":["50.30"],"得出最终的参数":["50.30"],"开始编译":["50.30"],"使用成本低":["54.1"],"运行快":["54.1"],"不仅可以预加载":["54.1"],"也提供了类似":["54.1"],"fiber":["54.1"],"descriptios":["55.0","56.0","57.0","58.0","59.0","60.0","61.0","62.0","63.0","65.0","66.0","67.0","68.0","69.0","70.0","71.0","72.0","73.0","74.0","75.0","78.0","79.0","80.0","81.0","82.0","83.0","84.0","85.0","88.0","89.0","90.0","91.0","92.0","93.0","94.0","95.0","96.0","97.0","98.0","99.0","100.0","101.0","102.0","103.0","104.0","105.0","106.0","107.0","108.0","109.0","110.0","111.0","112.0","113.0","114.0","115.0","116.0"],"author":["55.0","56.0","57.0","58.0","59.0","60.0","61.0","62.0","63.0","64.0","65.0","66.0","67.0","68.0","69.0","70.0","71.0","72.0","73.0","74.0","75.0","78.0","79.0","80.0","81.0","82.0","83.0","84.0","85.0","86.0","87.0","88.0","89.0","90.0","91.0","92.0","93.0","94.0","95.0","96.0","97.0","98.0","99.0","100.0","101.0","102.0","103.0","104.0","105.0","106.0","107.0","108.0","109.0","110.0","111.0","112.0","113.0","114.0","115.0","116.0"],"maps131":["55.0","56.0","57.0","58.0","59.0","60.0","61.0","62.0","63.0","64.0","65.0","66.0","67.0","68.0","69.0","70.0","71.0","72.0","73.0","74.0","75.0","78.0","79.0","80.0","81.0","82.0","83.0","84.0","85.0","86.0","87.0","88.0","89.0","90.0","91.0","92.0","93.0","94.0","95.0","96.0","97.0","98.0","99.0","100.0","101.0","102.0","103.0","104.0","105.0","106.0","107.0","108.0","109.0","110.0","111.0","112.0","113.0","114.0","115.0","116.0"],"本质是一个区块盒子":["55.1"],"根据实际获取的宽度来区分":["55.2"],"padding":["55.2"],"设置元素的外边距":["56.1","56.3"],"标准文档流":["57.1"],"改变块级":["57.2"],"liaoxing":["58.0","59.0","60.0","61.0","62.0","63.0","64.0","66.0","67.0","68.0","69.0","70.0","71.0","72.0","73.0","74.0","79.0","83.0","84.0","85.0","86.0","88.0","90.0","91.0","92.0","93.0","95.0","96.0","97.0","98.0","100.0","101.0","102.0","105.0","109.0","110.0","111.0","116.0"],"date":["58.0","60.0","61.0","62.0","64.0","66.0","67.0","68.0","70.0","71.0","72.0","73.0","74.0","83.0","84.0","88.0","90.0","91.0","92.0","93.0","96.0","97.0","98.0","100.0","101.0","102.0","105.0","109.0","110.0","111.0","116.0"],"06":["58.0","61.0","64.0","67.0","84.0"],"00":["58.0","64.0"],"04":["58.0"],"lasteditors":["58.0","64.0","67.0","83.0","91.0","93.0"],"同一bfc下相邻块级元素的margin会重叠":["59.1"],"子":["59.2"],"float":["59.2"],"left":["59.2"],"right":["59.2"],"每个元素都设置":["59.2"],"注意宽度":["59.2"],"换行了才有效果显示":["59.2"],"一种先进先出的操作受限制的线性表":["63.1"],"在js中任务被分为宏任务和微任务":["63.2"],"宏任务":["63.2"],"javascript是一个单线程":["63.3"],"在google73版本之前":["63.4"],"img":["63.5","63.6","77.2"],"user":["63.6"],"gold":["63.6"],"cdn":["63.6","77.1"],"xitu":["63.6"],"io":["63.6"],"timers":["63.8"],"执行settimeout和setinterval中到期的callback":["63.8"],"setimmediate设计用于在当前poll阶段完成后check阶段执行脚本":["63.9"],"当每个阶段完成后":["63.9"],"如果存在":["63.9"],"nexttick":["63.9"],"队列":["63.9"],"就会执行队列中的所有回调函数":["63.9"],"并且优先于其他":["63.9"],"microtask":["63.9"],"执行":["63.9"],"script":["63.10"],"async1":["63.10"],"async2":["63.10"],"lastedittime":["64.0","67.0","83.0","93.0"],"description":["64.0"],"promise规则":["64.0"],"自身有reslove":["64.0"],"catch":["64.0"],"finally":["64.0"],"all":["64.0"],"race方法":["64.0"],"可以链式调用then":["64.0"],"且catch":["64.0"],"finally不阻断链式调用":["64.0"],"resolve后执行then的第一个函数参数":["64.0"],"然后进行链式调用":["64.0"],"reject后执行then的第二函数参数":["64.0"],"如果没则执行catch调用":["64.0"],"如果没catch调用":["64.0"],"则报错":["64.0"],"uncaught":["64.0"],"in":["64.0","88.4"],"param":["64.0"],"链式调用返回值可以是promise对象":["64.0"],"后面的链式调用都属于新promise对象":["64.0"],"同步执行和异步执行的结果都一样":["64.0"],"reject的参数和链式调用的返回值":["64.0"],"作为下一个链式调用的参数":["64.0"],"同一promise":["64.0"],"catch执行一次":["64.0"],"fetchdata":["65.2"],"params":["65.2"],"return":["65.2","66.1"],"settimeout":["65.2"],"07":["66.0","70.0","71.0","73.0","74.0","83.0","84.0","90.0","91.0","92.0","93.0","100.0","101.0","102.0","105.0","111.0","116.0"],"自动执行next":["66.1"],"co":["66.1"],"gen":["66.1"],"res":["66.1"],"rej":["66.1"],"命令后面的promise对象":["66.2"],"08":["67.0","83.0","111.0"],"当进入作用域":["69.3"],"声明一个引用类型时":["69.4"],"多个内函数共用一个闭包":["72.2"],"t":["72.3"],"02":["73.0"],"typeof操作符一般用来检测基本数据类型":["75.1"],"返回以下某个字符串":["75.1"],"instanceof":["75.2","75.4"],"运算符用于检测构造函数的":["75.2"],"只能判断基本类型":["75.5"],"const实际上保证的":["76.0"],"let声明的变量在块作用域内可访问":["76.1"],"例如在":["76.1"],"内声明":["76.1"],"内访问":["76.1"],"link":["77.1"],"prefetch":["77.1"],"作为link的rel属性的值":["77.1"],"允许浏览器后台在空闲时间获取将来可能用到的资源":["77.1"],"并且储存在缓存中":["77.1"],"当请求prefetched的资源时":["77.1"],"直接读取缓存中的":["77.1"],"低优先级":["77.1"],"不要滥用":["77.1"],"因为不知道用户的下一步动作":["77.1"],"很可能浪费资源":["77.1"],"允许浏览器后台在后台运行dns解析":["77.1"],"下次请求该地址时直接在本地dns解析表里找":["77.1"],"减少了dns服务查ip的时间":["77.1"],"rel":["77.1"],"href":["77.1"],"domain":["77.1","86.8"],"com":["77.1"],"prerender":["77.1"],"允许浏览器后台渲染整个页面":["77.1"],"当跳转时":["77.1"],"直接呈现":["77.1"],"减少页面加载时间":["77.1"],"html异步加载":["77.2"],"png":["77.2"],"默认情况html解析":["77.2"],"然后加载js":["77.2"],"此时html解析中断":["77.2"],"然后执行js":["77.2"],"拿到地址":["77.3"],"进入应用层":["77.3"],"dns解析":["77.3"],"发起http请求":["77.3"],"细节待补充":["77.3"],"让变量指向某个对象的指针":["78.1"],"assign":["78.2"],"对象合并":["78.2"],"json":["78.3"],"parse":["78.3"],"stringify":["78.3"],"newobj":["78.3"],"描述":["79.1"],"添加某个值":["79.1"],"栈区储存":["79.4"],"删除无效":["79.4"],"list2":["79.4"],"判断栈区":["79.5"],"logsetelements":["79.6"],"myset":["79.7","79.8"],"set":["79.7","79.11"],"交集":["79.11"],"和差集":["79.11"],"减少http请求":["80.1"],"根据页面情况":["80.1"],"后台尽量将数据量小的几个接口":["80.1"],"合并成一个":["80.1"],"使用浏览器http缓存":["80.1","80.3"],"常规http缓存只缓存get方式":["80.1","80.3"],"不常变资源使用强缓存":["80.1","80.3"],"后台可以设置prama":["80.1","80.3"],"http1":["80.1","80.3"],"0产物":["80.1","80.3"],"cache":["80.1","80.3"],"gzip压缩":["80.2"],"control":["80.3"],"expires":["80.3"],"只比较值":["81.1"],"不比较类型":["81.1"],"在判断相等时会进行隐式的类型转换":["81.1"],"其比较遵循一些原则":["81.1"],"即先转换类型再比较":["81.1"],"如果有一个操作数是布尔值":["81.1"],"先判断类型再比较":["81.2"],"cross":["82.1","82.3"],"site":["82.1"],"scripting攻击":["82.1"],"跨站脚本攻击":["82.1"],"前端入参字符转义过滤":["82.2"],"验证":["82.4"],"利用服务端代码漏洞":["82.5"],"它是一个类数组对象":["85.1"],"xhr":["86.1"],"if":["86.1"],"window":["86.1","94.2"],"xmlhttprequest":["86.1","86.11"],"jsonp的原理就是利用script标签没有跨域限制":["86.2"],"cors是一个w3c标准":["86.3"],"服务配置一个代理服务器":["86.4"],"node中间件实现跨域代理":["86.5"],"iframe跨域":["86.8","86.9","86.10"],"利用iframe的引用地址修改hash和监听hash":["86.9"],"再加一个相同域名页面实现":["86.9"],"例如a嵌b":["86.9"],"b嵌c":["86.9"],"c同域名端口":["86.9"],"name":["86.10","106.1"],"利用window":["86.10"],"name的独特之处":["86.10"],"name值在不同的页面":["86.10"],"甚至不同域名":["86.10"],"加载后依旧存在":["86.10"],"并且可以支持非常长的":["86.10"],"值":["86.10"],"2mb":["86.10"],"a页面创建一个方法":["86.10"],"监听iframe的onload方法":["86.10"],"会触发两次":["86.10"],"postmessage是html5":["86.11"],"level":["86.11"],"2中的api":["86.11"],"且是为数不多可以跨域操作的window属性之一":["86.11"],"它可用于解决以下方面的问题":["86.11"],"页面和其打开的新窗口的数据传递":["86.11"],"实力对象的没有prototype":["88.1"],"但有":["88.1"],"当访问一个对象的某个属性时":["88.2"],"检测实例对象的原型对象在不在这个构造函数的原型链上":["88.3"],"module":["89.1","89.8"],"模块的设计思想是尽量的静态化":["89.1"],"使得编译时就能确定模块的依赖关系":["89.1"],"以及输入和输出的变量":["89.1"],"输出模块":["89.2"],"一个模块就是一个独立的文件":["89.2"],"该文件内部的所有变量":["89.2"],"外部无法获取":["89.2"],"如果你希望外部能够读取模块内部的某个变量":["89.2"],"就必须使用export关键字输出该变量":["89.2"],"因为是静态化的":["89.2"],"所以不能写在运行时的代码里":["89.2"],"会报错":["89.2"],"违背初衷":["89.2"],"导出需要是":["89.2"],"包裹":["89.2"],"或者是如下的直接声明方式":["89.2"],"使用export命令定义了模块的对外接口以后":["89.3"],"其他":["89.3"],"文件就可以通过import命令加载这个模块":["89.3"],"引入是只读接口无法修改":["89.3"],"但对象可以":["89.3"],"import":["89.4","106.1","106.4","106.5"],"的复合写法":["89.4"],"如果在一个模块之中":["89.4"],"先输入后输出同一个模块":["89.4"],"import语句可以与export语句写在一起":["89.4"],"es2020提案":["89.5"],"引入import":["89.5"],"支持动态加载模块":["89.5"],"node内部提供一个module构建函数":["89.8"],"所有模块都是module的实例":["89.8"],"每个模块内部":["89.8"],"都有一个module对象":["89.8"],"代表当前模块":["89.8"],"它有以下属性":["89.8"],"id":["89.8"],"模块的识别符":["89.8"],"通常是带有绝对路径的模块文件名":["89.8"],"exports属性":["89.9","89.13"],"exports属性表示当前模块对外输出的接口":["89.9"],"其他文件加载该模块":["89.9"],"实际上就是读取module":["89.9"],"为了方便":["89.10"],"node为每个模块提供一个exports变量":["89.10"],"node使用commonjs模块规范":["89.11"],"内置的require命令用于加载模块文件":["89.11"],"require命令的基本功能是":["89.11"],"读入并执行一个javascript文件":["89.11"],"然后返回该模块的exports对象":["89.11"],"require命令用于加载文件":["89.12"],"后缀名默认为":["89.12"],"等同于":["89.12"],"根据参数的不同格式":["89.12"],"第一次加载某个模块时":["89.13"],"node会缓存该模块":["89.13"],"以后再加载该模块":["89.13"],"就直接从缓存取出该模块的module":["89.13"],"如果发生模块的循环加载":["89.14"],"即a加载b":["89.14"],"b又加载a":["89.14"],"则b将加载a的不完整版本":["89.14"],"exports":["89.14"],"a1":["89.14"],"main":["89.15"],"require方法有一个main属性":["89.15"],"commonjs模块的加载机制是":["89.16"],"输入的是被输出的值的拷贝":["89.16"],"也就是说":["89.16"],"一旦输出一个值":["89.16"],"01":["93.0"],"filepath":["93.0"],"hash模式的工作原理是hashchange事件":["94.1"],"可以在window监听hash的变化":["94.1"],"url":["94.1"],"利用html5的新api":["94.2"],"根据eventloop的微任务优先原则":["95.1"],"在dom更新完":["95.1"],"数据更新":["98.1"],"生成新的vnode":["98.1"],"调用patch方法":["98.1"],"是一个接收return":["99.2"],"只监听其指针是否改变":["100.1","101.1"],"defineproperty":["100.2"],"属性劫持时判断值是否为对象":["100.2"],"是的话再对值进行劫持":["100.2"],"安装":["106.1"],"yarn":["106.1"],"qiankun":["106.1","106.5"],"npm":["106.1"],"s":["106.1"],"在主应用中注册微应用":["106.1"],"registermicroapps":["106.1","106.4"],"setdefaultmountapp":["106.1"],"from":["106.1","106.5"],"apps":["106.1"],"子应用配置":["106.1"],"vueapp":["106.1"],"localhost":["106.1"],"子应用需要支持跨域":["106.1"],"container":["106.1"],"activerule":["106.1"],"history或者hash模式":["106.2"],"需要展示的子应用控制activerules为true":["106.3"],"官方组件通讯":["106.5"],"引入initglobalstate":["106.5"],"返回microappstateactions":["106.5"],"会自动注入微应用mount的props中":["106.5"],"actions":["106.5"],"initglobalstate":["106.5"],"initstate":["106.5"],"default":["106.5"],"传入父组件router作为props":["106.6"],"1开头":["108.1"],"2开头":["108.2"],"请求成功":["108.2"],"表示成功处理了请求的状态代码":["108.2"],"3开头":["108.3"],"请求被重定向":["108.3"],"表示要完成请求":["108.3"],"需要进一步操作":["108.3"],"通常":["108.3"],"这些状态代码用来重定向":["108.3"],"4开头":["108.4"],"请求错误":["108.4"],"这些状态代码表示请求可能出错":["108.4"],"妨碍了服务器的处理":["108.4"],"错误请求":["108.4"],"服务器不理解请求的语法":["108.4"],"未授权":["108.4"],"5开头":["108.5"],"服务器错误":["108.5"],"这些状态代码表示服务器在尝试处理请求时发生内部错误":["108.5"],"这些错误可能是服务器本身的错误":["108.5"]},{"0":["12.0","13.5","48.3","63.6","76.1"],"1":["4.0","12.0","15.9","16.5","17.5","22.9","23.7","27.5","27.18","27.27","30.4","32.0","34.3","35.4","35.18","37.7","39.1","50.4","50.9","57.1","63.9","77.2","79.4","79.11","80.3","86.9","89.12","89.16","94.2","100.1","100.2","101.1"],"2":["8.2","14.2","14.3","16.3","20.1","21.2","21.4","22.7","26.4","27.9","27.13","27.23","34.2","34.5","35.3","44.2","44.3","46.2","46.4","47.3","50.12","50.21","57.3","59.1","59.2","63.2","63.9","75.4","75.5","78.3","79.9","79.11","82.2","86.9","93.0","94.1","98.1","99.1","107.2"],"3":["1.5","14.4","16.3","16.4","19.3","25.0","27.15","34.5","35.3","37.4","41.1","46.2","46.4","50.5","50.30","59.2","63.2","63.8","77.3","79.11","86.10","89.8"],"4":["14.4","16.4","77.1","79.11","86.10","89.8"],"5":["16.6","17.6","77.1"],"6":["12.0","63.6","80.2","93.0"],"7":["10.0"],"8":["10.0"],"9":["10.0","64.0"],"10":["64.0","85.0","88.0","116.0"],"12":["62.0","63.6","67.0","105.0"],"13":["101.0"],"15":["58.0","71.0","95.0","96.0","97.0","98.0","105.0"],"16":["71.0"],"19":["66.0","101.0","102.0","109.0"],"20":["92.0","95.0","96.0","97.0","98.0","100.0","110.0"],"21":["60.0","66.0","67.0","68.0","69.0","72.0","74.0","79.0"],"22":["62.0","73.0","84.0","88.0","101.0","102.0","116.0"],"23":["70.0","73.0","109.0"],"24":["60.0","62.0"],"26":["59.0","98.0"],"27":["116.0"],"28":["60.0"],"29":["63.0","83.0","109.0","111.0"],"32":["61.0"],"37":["91.0","102.0","105.0"],"38":["67.0","74.0"],"39":["93.0"],"42":["70.0"],"43":["73.0","90.0"],"44":["102.0"],"45":["58.0","74.0","96.0"],"46":["97.0"],"48":["70.0"],"49":["91.0","92.0","96.0"],"50":["67.0","97.0"],"51":["72.0","98.0"],"52":["100.0","110.0"],"53":["101.0"],"55":["83.0"],"56":["71.0"],"57":["66.0"],"58":["100.0"],"66":["50.12"],"300":["108.3"],"403":["108.4"],"404":["108.4"],"405":["108.4"],"500":["108.5"],"960":["63.6"],"1280":["63.6"],"1994":["15.5"],"2015":["31.2"],"2021":["55.0","56.0","57.0","59.0","60.0","63.0","65.0","68.0","69.0","72.0","75.0","78.0","79.0","80.0","81.0","82.0","85.0","86.0","87.0","88.0","89.0","94.0","95.0","96.0","97.0","99.0","103.0","104.0","106.0","107.0","108.0","109.0","110.0","112.0","113.0","114.0","115.0"],"3000":["65.2"],"7345":["32.0"],"8080":["106.1"],"12000":["106.1"],"20000":["106.1"],"是css滚动驱动动画的一个实验性功能属性":["0.0"],"需要":["0.0"],"chrome":["0.0"],"需要写在":["0.1"],"后面":["0.1"],"contentwrap":["0.3"],"scrolllinewrap":["0.3"],"p":["0.3","4.0"],"v":["0.3"],"for":["0.3","11.1","20.2","78.3"],"item":["0.3"],"in":["0.3","78.3"],"list":["0.3","79.3"],"size":["0.4","2.3","48.4"],"flexvue":["1.0"],"简便":["1.1"],"定义内部元素是如何在弹性容器中布局的":["1.3"],"定义了主轴的方向":["1.3"],"正方向或反方向":["1.3"],"wrap":["1.3"],"shrink":["1.4"],"定义":["1.4"],"元素一行的收缩规则":["1.4"],"元素仅在默认宽度之和大于容器的时候才会发生收缩":["1.4"],"其收缩的大小是依据":["1.4"],"项目不设置高度":["1.5"],"也不设置":["1.5"],"align":["1.5","4.0"],"或者设置了":["1.5"],"stretch":["1.5"],"项目高度会均匀填充满弹性盒子":["1.5"],"默认值是":["1.5"],"normal":["1.5","50.8"],"在":["1.5","22.1","46.2"],"取视口宽度":["2.0"],"vw":["2.0"],"vmin":["2.2"],"img":["2.2","83.0"],"min":["2.2"],"h5":["3.0"],"利用":["3.1","3.2","35.9"],"center":["4.0"],"a":["4.0","22.9","64.0","86.10","89.9"],"includes":["6.0"],"但它们在使用和返回值上有一些重要的区别":["6.1"],"基本类型或者变量":["6.2","6.3"],"返回":["6.2"],"开始检索位置":["6.3"],"可选参数":["6.3"],"prototype":["7.1","21.2","75.2","85.2","106.5"],"symbol":["7.2"],"instanceof":["7.3","75.5"],"object":["7.4","18.2","41.1"],"setprototypeof":["7.4"],"array":["7.5","75.4"],"js":["8.1","19.1","22.3","35.3","35.17","50.8","50.22","54.1","63.4","67.0","75.2","86.10","88.1","88.3","88.4","89.9","89.11"],"o":["8.1","8.2","8.4"],"n":["8.1","8.2","8.4"],"搭配":["8.3"],"拓展运算符":["8.3"],"const":["8.6","22.8","50.24","106.4"],"uniquearray":["8.6"],"hashtable":["8.6"],"优先考虑":["8.7"],"set":["8.7","79.4","79.6","79.8"],"slice":["9.0","9.3","85.2"],"但使用方式不一样":["9.1"],"startindex":["9.2","9.3","31.3"],"endindex":["9.2","31.3"],"selectnum":["9.3"],"replacearg":["9.3"],"arr2":["10.0"],"交集":["10.0"],"相同":["10.0"],"getchildren":["11.1"],"data":["11.1","36.0","86.11"],"result":["11.1"],"pid":["11.1","11.2"],"id":["11.2","79.4"],"if":["11.2","20.2","30.4","37.7","64.0","76.1"],"children":["11.2"],"function":["12.0","14.4","22.9","64.0","72.3","89.2"],"bind":["13.0"],"this":["13.1","13.2","13.3","13.4","13.5","17.4","26.1","26.5","34.9","64.0","93.0"],"b":["13.2","79.11","89.14"],"c":["13.2","24.2","76.1","86.11"],"d":["13.2","86.11"],"console":["13.2","29.2","65.2","79.5","79.6","106.1"],"log":["13.2","29.2","65.2","79.5","89.14","106.1"],"的指向":["13.3"],"方便包含通过":["13.3"],"指向":["13.4","26.4"],"conetxt":["13.5"],"window":["13.5","34.9","67.0"],"fn":["13.5","29.1"],"res":["13.5"],"return":["13.5","17.6","24.2","64.0"],"await":["14.1","14.2"],"难以阅读和维护":["14.2"],"这种现象被称为":["14.2"],"async":["14.2","14.3","66.2"],"允许我们使用同步的写法来编写异步代码":["14.2"],"避免了嵌套回调":["14.2"],"使代码更加清晰和易于理解":["14.2"],"更好的错误处理":["14.2"],"在回调函数中处理错误通常比较繁琐":["14.2"],"因为需要在每个回调函数中显式地检查错误":["14.2"],"中使用":["14.3"],"表达式":["14.4"],"函数内部会去自动去调用生成器函数的":["14.4"],"next":["14.4","66.1"],"方法":["14.4","47.1","50.7","81.1"],"然后根据":["14.4"],"done":["14.4","66.1"],"判断算法执行结束":["14.4"],"返回解决值":["14.4"],"自动执行next":["14.4"],"co":["14.4"],"tcp":["15.1","77.1"],"ip":["15.1"],"只需传送请求方法和路径":["15.2"],"请求方法常用的有":["15.2"],"get":["15.2","32.0"],"head":["15.2","77.1"],"post":["15.2","32.0","50.7"],"每种方法规定了客户与服务器联系的类型不同":["15.2"],"由于":["15.2"],"可拓展性高":["15.3"],"允许传输各种类型数据":["15.3"],"通过":["15.3","17.3","33.2","34.2","47.1","47.3"],"通讯不加密":["15.4"],"容易被窃听到":["15.4"],"用于安全的":["15.5"],"数据传输":["15.5"],"secure":["15.5"],"socket":["15.5"],"layer":["15.5"],"安全套接字层":["15.5"],"年为":["15.5"],"netscape":["15.5"],"所研发":["15.5"],"通过加密算法":["15.7"],"数据加密解密":["15.8"],"请求时间会更慢":["15.8"],"状态码":["15.9"],"uri":["15.9"],"及首部字段的情况下":["15.9"],"大幅度提高了":["15.9"],"web":["15.9"],"性能":["15.9"],"二进制分帧层":["15.9"],"这大大提高了传输效率":["15.11"],"同时":["15.11"],"它还引入了流控制和帧压缩等机制":["15.11"],"进一步提升了数据传输的性能":["15.11"],"更好的并发性":["15.11"],"在协议设计和实现上更为复杂":["15.12"],"这可能导致一些开发人员和服务器管理员在理解和使用上存在一定的困难":["15.12"],"依赖":["15.12"],"es6":["16.1","22.1","22.2","22.6","34.1"],"的异步编程中":["16.2"],"我们经常需要嵌套多个回调函数来处理异步操作的结果":["16.2"],"这种嵌套会导致代码难以阅读和维护":["16.2"],"形成所谓的":["16.2"],"promise":["16.2","16.5","19.2"],"通过链式调用":["16.2"],"reject":["16.3"],"回调列表":["16.4"],"then":["16.4","16.6"],"会返回一个新的":["16.4"],"它的状态和值是根据":["16.4"],"的回调函数行为决定":["16.4"],"的方法还是":["16.5"],"catch":["16.5","66.1"],"的方法":["16.5","46.4"],"如果列表空了":["16.5"],"finally":["16.5"],"同时为保证链式调用":["16.5"],"链式调用的方法都会被":["16.5"],"包裹一层":["16.5"],"首先创建一个":["16.5"],"实例":["16.5","16.6","34.3"],"实例状态为":["16.5"],"执行不了":["16.6"],"则直接去执行链式调用":["16.6"],"遇到":["16.6"],"新建一个":["16.6"],"然后执行内部逻辑":["16.6"],"将":["16.6","47.3"],"onfullfilled":["16.6"],"onrejected":["16.6"],"和":["16.6","22.8","89.1","93.0"],"新":["16.6"],"映射成一个对象":["16.6"],"传入":["16.6"],"一个关键字":["17.1"],"表示当前对象":["17.1"],"也是一个重要的语法点":["17.1"],"它永远会指向一个对象":["17.1"],"在对象的方法内和类的方法内":["17.2"],"的一些主要好处":["17.3"],"代码复用":["17.3"],"你可以编写可以在多个不同上下文中运行的函数":["17.3"],"这些函数可以根据它们被调用的上下文来访问和修改不同的数据":["17.3"],"面向对象编程":["17.3"],"在面向对象编程":["17.3"],"oop":["17.3"],"显式绑定":["17.5"],"隐式绑定":["17.5"],"默认绑定":["17.5"],"箭头函数的":["17.5","26.5"],"foo1":["17.6"],"foo2":["17.6"],"注意":["17.6"],"foo3":["17.6"],"通过闭包调用":["17.6"],"区别":["18.0","49.0"],"typeof":["18.1","64.0"],"的类型检查":["18.1"],"可以看出":["18.1"],"undefined":["18.1","75.1","78.3"],"null":["18.2","64.0"],"的类型为":["18.2"],"任务队列":["19.2"],"task":["19.2"],"queue":["19.2"],"当异步任务完成时":["19.2"],"例如":["19.2","27.15"],"settimeout":["19.2","63.2"],"回调":["19.2"],"遇到各种异步任务将他们按宏":["19.3"],"微任务按顺序加进对列里去":["19.3"],"资源懒加载":["20.1"],"api":["20.5","32.0","41.1","54.1"],"实现继承":["21.1"],"可以使用原型":["21.1"],"proto":["21.1","21.6","75.4","88.1"],"访问":["21.1"],"指向构造函数的":["21.2"],"new":["21.3","34.9","47.3","64.0","86.1"],"关键字创建了实例对象":["21.3"],"创建一个新对象":["21.4"],"显式原型":["21.5"],"constructor":["21.6","64.0"],"args":["21.6"],"arguments":["21.6"],"引入这个问题":["22.1"],"但为了向下兼容":["22.1"],"目前还存在这种情况":["22.1"],"变量":["22.1"],"之前":["22.2"],"执行代码前":["22.3"],"变量会被覆盖":["22.4"],"函数内部不用":["22.5"],"会创建两个环境":["22.7"],"变量环境":["22.7"],"词法环境":["22.7"],"如果解析当前作用域是":["22.7"],"这个区块对这两个关键字声明的变量":["22.8"],"从一开始就形成了封闭作用域":["22.8"],"基础类型保存在栈中":["23.1"],"系统会自动处理":["23.1"],"引用计数":["23.2"],"导致引用无法清除":["23.3"],"然后从根结对象开始遍历":["23.4"],"分配速度慢":["23.5"],"新声明的对象都会放入使用区":["23.7"],"参数复用":["24.1"],"解析器去":["25.0"],"从上往下解析":["25.0"],"html":["25.0","34.10","86.10"],"遇到资源加载":["25.0"],"link":["25.0"],"资源":["25.0"],"通常是":["25.0"],"样式和":["25.0"],"icon":["25.0"],"加载资源时":["25.0"],"不影响":["25.0"],"继续解析":["25.0"],"在用法上也有一些限制":["26.1"],"箭头函数没有独立的":["26.1"],"箭头函数不会创建自己的":["26.2"],"上下文":["26.2"],"所以":["26.2"],"的值继承自包围它的函数执行上下文":["26.2"],"在非严格模式下":["26.2"],"或全局对象":["26.2"],"在严格模式下":["26.2"],"这使得在回调函数":["26.2"],"事件处理器或任何不期望或不方便创建新":["26.2"],"没有":["26.4"],"主要分为":["27.0"],"单例模式":["27.2"],"插件的":["27.4"],"工厂模式":["27.6"],"但所需的子类在运行时动态确定时才能确定时":["27.7"],"的":["27.8"],"访问者无需关注创建过程":["27.9"],"代码结构清晰":["27.9"],"良好的拓展性":["27.9"],"建造者模式":["27.10"],"适配器模式":["27.12"],"但其方法或属性接口不符合你的要求":["27.13"],"数据格式转换":["27.14"],"更好的扩展性":["27.15"],"通过使用适配器模式":["27.15"],"我们可以更轻松地扩展系统的功能":["27.15"],"当需要添加新的功能":["27.15"],"但现有的类无法满足需求时":["27.15"],"可以通过适配器模式来扩展现有类的功能":["27.15"],"装饰器模式":["27.16"],"只保存动态数据":["27.17"],"策略模式":["27.20"],"算法需要自由切换的场景":["27.21"],"的表单验证":["27.22"],"可以互相切换":["27.23"],"提高了灵活性以及复用性":["27.23"],"观察者模式":["27.24"],"一个对象":["27.24"],"事件监听":["27.26"],"观察者模式的变种":["27.28"],"基于一个主题":["27.28"],"双向绑定":["27.30"],"时间解耦":["27.31"],"注册的订阅行为由发布者决定何时调用":["27.31"],"订阅者无需持续关注":["27.31"],"如果内函数引用了外函数的变量":["28.1"],"封装私有化变量":["28.2"],"如果将内函数返回出去了":["28.3"],"x":["29.1","33.1"],"string":["29.1","64.0","75.3"],"any":["29.1","29.2"],"name":["29.1","64.0","79.4"],"argsnumberoverload":["29.2"],"find":["29.2"],"h1":["30.1"],"div":["30.2"],"说明":["30.3"],"转为字符串":["30.4"],"并按照":["30.4"],"拆分":["30.4"],"let":["30.4","76.1","78.2","79.2","79.10"],"haspoint":["30.4"],"false":["30.4"],"indexof":["30.4"],"substring":["31.0"],"中已标记为弃用":["31.2"],"str":["31.2"],"gpt":["32.0"],"method":["32.0"],"headers":["32.0"],"type":["33.0","33.2"],"类型变量时":["33.1"],"会报类型错误":["33.1"],"解决方法是给":["33.1"],"实现":["33.2"],"交叉运算符形成交叉类型":["33.2"],"支持":["34.1"],"这个库主要是对字符串一些常用方法进行了封装":["34.2"],"ast":["34.2","35.3"],"javascript":["34.2"],"parse":["34.2"],"抽象语法树":["34.3"],"首先生成一个打包器":["34.3"],"bundle":["34.3"],"从入口出发":["34.3"],"我们还需要考虑到模块打包之外的问题":["34.4"],"比如路径别名":["34.4"],"parallel":["34.5"],"并行钩子":["34.5"],"options":["34.7","35.12","35.14","47.3"],"renderstart":["34.8"],"banner":["34.8"],"resolve":["34.9"],"来交给其它插件处理":["34.9"],"否则将不会进入到其它插件的处理":["34.9"],"返回值为一个对象":["34.9"],"也会停止后续插件的处理":["34.9"],"不过这个对象就可以包含更多的信息":["34.9"],"opens":["34.9"],"了":["34.9"],"包括解析后的路径":["34.9"],"是否被":["34.9"],"enternal":["34.9"],"是否需要":["34.9"],"tree":["34.9","41.1","50.27"],"shaking":["34.9","41.1"],"等等":["34.9"],"不过大部分情况下返回一个":["34.9"],"是一个全能型的打包工具":["34.10"],"可以处理":["34.10"],"css":["34.10","50.17"],"图片等资源":["34.10"],"适合构建大型的":["34.10"],"它主要由两部分组成":["35.1"],"一个开发服务器":["35.1"],"它基于":["35.1"],"而不用像":["35.3"],"一样先代码解析为字节码":["35.3"],"然后转换为机器码":["35.3"],"大大节省了程序运行时间":["35.3"],"多核并行":["35.3"],"内部打包算法充分利用多核":["35.3"],"cpu":["35.3"],"优势":["35.3"],"所有的步骤尽可能并行":["35.3"],"这也是得益于":["35.3"],"go":["35.3"],"当中多线程共享内存的优势":["35.3"],"从零造轮子":["35.3"],"几乎没有使用任何第三方库":["35.3"],"所有逻辑自己编写":["35.3"],"大到":["35.3"],"不支持降级到":["35.4"],"解决":["35.5"],"esbuild":["35.5"],"快速冷启动":["35.6"],"no":["35.6","35.9"],"buonld":["35.6"],"机制":["35.8"],"自带按需加载的机制":["35.8"],"import":["35.8"],"只有使用到时才去加载":["35.8"],"同时会在本地会起一个":["35.8"],"node":["35.8"],"服务去拦截请求":["35.8"],"并在响应头里添加强缓存":["35.8"],"协商缓存的信息":["35.8"],"esm":["35.9"],"做":["35.9"],"bounld":["35.9"],"rollup":["35.10"],"vite":["35.11","35.17"],"有部分":["35.11"],"服务器启动阶段":["35.12"],"用来进一步修改配置":["35.13"],"configresolved":["35.13"],"用来记录最终的配置信息":["35.13"],"configureserver":["35.14"],"buildstart":["35.14"],"请求响应阶段":["35.14"],"如果是":["35.14"],"相关的插件":["35.15"],"带有":["35.15"],"enforce":["35.15"],"的区别":["35.16"],"执行文件":["35.17"],"再启动本地服务":["35.17"],"业务代码构建":["35.17"],"treeshaking":["35.18"],"的实现逻辑不一样":["35.18"],"如":["36.0"],"methods":["36.0"],"computed":["36.0"],"watch":["36.0","44.0","44.3"],"等":["36.0"],"每个选项都有自己的特定用途":["36.0"],"但这也意味着相同功能的代码可能会分散在不同的选项中":["36.0"],"允许开发者更灵活地组织和重用代码":["36.0"],"它引入了几个新的核心概念":["36.0"],"ref":["36.0"],"reactive":["36.0"],"onmounted":["36.0"],"差异算法":["37.1"],"的主要操作是比较两个数据结构":["37.1"],"如文本":["37.1"],"dom":["37.2","39.1","42.0"],"vnode":["37.3"],"树后":["37.3"],"diff":["37.3","41.1"],"算法会去获取旧树和新树":["37.3"],"开始比较":["37.3"],"的重要性":["37.4"],"在列表渲染中":["37.4"],"vue":["37.4","40.1","93.0","106.5"],"使用":["37.4","54.1"],"来追踪每个节点的身份":["37.4"],"以便在重新渲染时可以高效地复用和重新排序元素":["37.4"],"如果没有提供唯一的":["37.4"],"会使用一种就地复用策略":["37.4"],"这可能会导致渲染错误或不可预期的行为":["37.4"],"嵌套组件的复杂性":["37.4"],"开始同层对比":["37.5"],"第二步":["37.5"],"samenode":["37.5"],"对比新旧节点是否同类型节点":["37.5"],"第三步":["37.5"],"子节点比较":["37.6"],"使用双端比较法":["37.6"],"头和头":["37.6"],"尾和尾":["37.6"],"头和尾":["37.6"],"尾和头":["37.6"],"当前这一项比我们最后一项大则直接放到末尾":["37.7"],"因为在vue":["37.7"],"newindextooldindexmap":["37.7"],"中":["37.7"],"0代表需要创建新元素":["37.7"],"无需进行位置移动操作":["37.7"],"比较当前项和最后一项的值":["37.7"],"如果大于最后一项":["37.7"],"则将当前索引添加到结果集中":["37.7"],"push":["37.7"],"记录索引":["37.7"],"当前放到末尾的要记录他前面的索引":["37.7"],"用于追溯":["37.7"],"continue":["37.7"],"这里我们需要通过二分查找":["37.7"],"在结果集中找到仅大于当前值的":["37.7"],"所有大于当前值的结果中的最小值":["37.7"],"用当前值的索引将其替换掉":["37.7"],"递增序列":["37.7"],"采用二分查找":["37.7"],"是最快的":["37.7"],"while":["37.7"],"更新完成后执行回调":["39.1"],"因此它需要一种机制来保证回调函数在所有":["39.1"],"操作完成后执行":["39.1"],"以下是":["39.1"],"实现的几种兼容方式":["39.1"],"promises":["39.1"],"在现代浏览器中":["39.1"],"原理":["40.0"],"的的核心指令":["40.1"],"修改":["40.2"],"值的方法的指令语法糖":["40.2"],"在标签":["40.2"],"oninput":["40.2"],"事件触发后":["40.2"],"会去把绑定":["40.2"],"事件触发":["40.2"],"vue3":["41.0"],"template":["41.1"],"还有引入了":["41.1"],"技术":["41.1"],"编译优化":["41.1"],"在编译阶段会对静态模板分析":["41.1"],"会将不需要动态更新的节点生成":["41.1"],"block":["41.1","59.2"],"只去":["41.1"],"绑定动态节点的标签":["41.1"],"数据劫持修改":["41.1"],"是使用":["41.1"],"proxy":["41.1"],"劫持数据的":["41.1"],"而":["41.1"],"vue2":["41.1","46.3"],"使用的是":["41.1"],"definepropty":["41.1"],"提供更多的监听方法":["41.1"],"可以劫持的是整个对象属性的增删改":["41.1"],"注意点":["41.1"],"不能监听内部深层次的对象变化":["41.1"],"然后会使用":["42.0"],"编译包":["42.0"],"拓展模板信息":["42.0"],"比如":["42.0","89.12"],"handle":["44.2"],"的执行回调函数":["44.2"],"则是观察数据触发回调":["44.3"],"再次引用该变量":["44.3"],"它可以侦听一个或多个数据源":["45.0"],"如响应式对象的属性":["45.0"],"getter":["45.0"],"它会在函数内部自动追踪所有被访问的响应式数据":["45.1"],"更为合适":["45.2"],"它提供了更多的灵活性":["45.2"],"并且可以访问旧值和新值":["45.2"],"watcheffect":["45.2"],"属性发布者":["46.1"],"setter":["46.1"],"事务处理":["46.1"],"做数据劫持":["46.2"],"同时也会创建一个观察者对象":["46.2"],"里会将每个属性和一个依赖对象做关联":["46.2"],"在首次渲染时":["46.2"],"会去获取":["46.2"],"里面的数据":["46.2"],"触发这个属性的":["46.2"],"这些操作":["46.4"],"针对对象和集合会有不同的处理方法":["46.4"],"然后会执行":["46.4"],"effect":["46.4"],"传入渲染方法":["46.4"],"会在内部有执行逻辑":["46.4"],"最后会把自身返回出去":["46.4"],"作为实例的更新方法":["46.4"],"提供的":["47.1"],"install":["47.1"],"provide":["47.1"],"将当前":["47.1"],"对象":["47.3","50.30"],"挂载到":["47.3"],"组件全局":["47.3"],"去掉了":["47.4"],"countto":["48.1","48.2"],"endval":["48.1","48.2","48.3"],"startval":["48.3"],"开始滚动数值":["48.3"],"number":["48.3","75.1"],"应用程序的":["50.1"],"静态模块打包工具":["50.1"],"转译":["50.2"],"打包等":["50.2"],"webpack":["50.3","50.16","50.29"],"它有两个属性":["50.4"],"png":["50.5"],"jpg":["50.5"],"等字符串":["50.5"],"query":["50.5"],"保留引入文件时代码中查询参数":["50.5"],"只有":["50.5"],"url":["50.5"],"属性":["50.6"],"按照":["50.7"],"后置":["50.7"],"行内":["50.7"],"inline":["50.7","59.2"],"普通":["50.7","50.8"],"loader":["50.8","50.10"],"map":["50.9"],"meta":["50.9","77.1"],"开始编译":["50.11"],"compile":["50.11","50.14"],"真正开始的编译":["50.11"],"在创建":["50.11"],"compilation":["50.11","50.12"],"hooks":["50.12","50.14"],"syncbailhook":["50.12"],"同步熔断钩子":["50.12"],"没有执行顺序一说":["50.13"],"遍历所有插件":["50.14"],"调用插件的":["50.14"],"apply":["50.14","85.2"],"从文档可知":["50.14"],"hook":["50.14"],"是":["50.14"],"synchook":["50.14"],"也就是同步钩子":["50.14"],"只能用tap注册":["50.14"],"tap":["50.14"],"模块相比":["50.16"],"模块能以各种方式表达它们的依赖关系":["50.16"],"下面是一些示例":["50.16"],"minimizer":["50.17"],"会启动一个":["50.18"],"websocket":["50.18"],"服务":["50.18"],"es":["50.20"],"module":["50.20","50.22","50.23","89.4"],"modulegraph":["50.21"],"对象里去":["50.21"],"封装阶段":["50.21"],"再次遍历模块":["50.21"],"标记出导出列表哪些导出值被用到":["50.21"],"server":["50.22"],"做服务器":["50.22"],"exports":["50.23","89.10"],"plugins":["50.23"],"配置选项提供了":["50.25"],"从输出的":["50.25"],"value":["50.26","66.1"],"可以在浏览器中加载和执行":["50.29"],"捆绑包通常由":["50.29"],"根据入口点":["50.29"],"entry":["50.29"],"和它们的依赖关系自动创建":["50.29"],"用上一步得到的参数初始化":["50.30"],"compiler":["50.30"],"加载所有配置的插件":["50.30"],"执行对象的":["50.30"],"run":["50.30"],"方法开始执行编译":["50.30"],"jonny":["52.0"],"segmentfault":["53.0"],"的方式":["54.1"],"requestidlecallback":["54.1"],"去执行":["54.1"],"避免阻塞主应用的渲染进程":["54.1"],"同时子应用的":["54.1"],"liaoxing":["55.0","56.0","57.0","65.0","75.0","78.0","80.0","81.0","82.0","87.0","89.0","94.0","99.0","103.0","104.0","106.0","107.0","108.0","112.0","113.0","114.0","115.0"],"date":["55.0","56.0","57.0","59.0","63.0","65.0","69.0","75.0","78.0","79.0","80.0","81.0","82.0","85.0","86.0","87.0","89.0","94.0","95.0","99.0","103.0","104.0","106.0","107.0","108.0","112.0","113.0","114.0","115.0"],"包裹着hmtl的元素":["55.1"],"margin":["55.2"],"boxder":["55.2"],"content决定盒子大小":["55.2"],"对于内联元素上下无效":["56.2"],"对内联元素有效果":["56.4"],"空白折叠":["57.1"],"内联盒子特性":["57.2"],"内联可设宽高":["57.2"],"给上层级的盒子添加特定高度":["57.3"],"lastedittime":["58.0","61.0","70.0","73.0","84.0","90.0","91.0","92.0","100.0","101.0","102.0","105.0","111.0"],"05":["58.0","67.0","79.0"],"filepath":["58.0","61.0","67.0","83.0","84.0","91.0"],"进击的面试":["58.0","67.0","83.0","91.0","93.0"],"position属性":["58.0"],"md":["58.0","67.0","83.0","91.0","93.0"],"06":["59.0","60.0","62.0","63.0","65.0"],"触发了bfc的元素":["59.1"],"不会被浮动元素覆盖":["59.1"],"position":["59.2"],"absolute":["59.2"],"fixed":["59.2"],"display":["59.2"],"给其中一个元素触发bfc":["59.3"],"左右自适应":["59.4"],"00":["60.0","116.0"],"lasteditors":["61.0","62.0","66.0","70.0","71.0","73.0","74.0","84.0","90.0","92.0","98.0","100.0","101.0","102.0","105.0","111.0","116.0"],"script里的代码":["63.2"],"它执行的所有代码都放在调用栈里面":["63.3"],"v11之前":["63.4"],"user":["63.5","108.3"],"gold":["63.5"],"cdn":["63.5"],"163f410b951ce409":["63.6"],"imageview2":["63.6"],"w":["63.6"],"h":["63.6"],"format":["63.6"],"pending":["63.8"],"callback":["63.8","64.0"],"上一轮循环中少数的callback会放在这一阶段执行":["63.8"],"idle":["63.8"],"每阶段最后都会检测process":["63.9"],"nexttic":["63.9"],"microtasks有没有回调":["63.9"],"有就执行完":["63.9"],"然后退出该阶段":["63.9"],"通用阶段":["63.9"],"执行js代码":["63.9"],"遇到各任务归类到各任务队列":["63.9"],"async3":["63.10"],"end":["63.10"],"all方法需要等所有promise执行完毕出发":["64.0"],"包括其链式调用":["64.0"],"如果链式调用不返回值":["64.0"],"all接收的值为undefined":["64.0"],"race方法返回最快执行完毕返回值":["64.0"],"race接收的值为undefined":["64.0"],"不阻断较慢promise执行":["64.0"],"class":["64.0"],"模拟promise上面的11条规则":["64.0"],"我这里主干逻辑是保证所有的链式调用":["64.0"],"遇到所有pendding状态的promise":["64.0"],"都将其添加进等待任务":["64.0"],"等状态改变后循环触发":["64.0"],"throw":["64.0"],"error":["64.0"],"resolver":["64.0"],"is":["64.0"],"not":["64.0"],"status":["64.0"],"pedding":["64.0"],"状态":["64.0"],"resparam":["64.0"],"res与链式传递的值":["64.0"],"rejparam":["64.0"],"rej的值":["64.0"],"waittask":["64.0"],"被异步阻断的任务":["64.0"],"遇到yield表达式":["65.1"],"就暂停执行后面的操作":["65.1"],"gen":["65.2"],"01":["66.0","68.0","69.0","72.0","74.0","88.0","91.0"],"params":["66.1"],"try":["66.1"],"获取yield右边表达式":["66.1"],"var":["66.1","76.1","86.10","89.2","89.9"],"运行结果可能是":["66.2"],"rejected":["66.2"],"此时等同于":["66.2"],"07":["67.0","68.0","69.0","72.0","79.0","81.0","85.0","86.0","88.0","89.0","95.0","96.0","97.0","98.0","103.0","109.0","110.0"],"监听页面性能":["67.0"],"performance可查看个阶段时间":["67.0"],"本地函数的局部变量和参数":["69.1"],"可达性":["69.2"],"局部变量打上进入的标签":["69.3"],"标记其引用为0":["69.4"],"02":["70.0","90.0"],"03":["71.0"],"在执行上下文阶段":["71.1"],"遇到函数声明时":["71.1"],"函数内包含一个函数":["72.1"],"replacething":["72.3"],"boolean":["75.1"],"属性是否出现在某个实例对象的原型链上":["75.2"],"str2":["75.3"],"str3":["75.3"],"obj":["75.5","78.2","78.3"],"并不是变量的值不得改动":["76.0"],"而是变量指向的那个内存地址不得改动":["76.0"],"i":["76.1"],"http":["77.1","82.4"],"www":["77.1"],"maps131":["77.1"],"cn":["77.1"],"preconnect":["77.1"],"允许浏览器在一个":["77.1"],"请求正式发给服务器前预先执行一些操作":["77.1"],"这包括":["77.1"],"解析":["77.1"],"tls":["77.1"],"协商":["77.1"],"握手":["77.1"],"先建立连接":["77.1"],"而不下载任何内容":["77.1"],"这消除了往返延迟并为用户节省了时间":["77.1"],"https":["77.1"],"crossorigin":["77.1"],"preload":["77.1"],"指明哪些资源是在页面加载完成后即刻需要的":["77.1"],"在浏览器的主渲染机制介入前就进行预加载":["77.1"],"charset":["77.1"],"最后js执行完成恢复html解析":["77.2"],"defer情况下html和js并驾齐驱":["77.2"],"最后才执行js":["77.2"],"async情况则html和js并驾齐驱":["77.2"],"js的执行可能在html解析之前就已经完成了":["77.2"],"最后module情况和defer的情况类似":["77.2"],"只不过会在提取的过程中加载多个js文件罢了":["77.2"],"defer":["77.2"],"不阻碍html解析":["77.2"],"进入传输层使用tcp协议":["77.3"],"然后通过网路层":["77.3"],"数据链路层":["77.3"],"物理层":["77.3"],"建立三次握手连接":["77.3"],"传输html页面数据":["77.3"],"共享指针":["78.1"],"newobj":["78.2"],"合并一层相当于深拷贝":["78.2"],"会转为null":["78.3"],"第一个参数内的对象不能含有tojson方法不然会被调用":["78.3"],"递归复制":["78.3"],"拿健名":["78.3"],"返回set对象本身":["79.1"],"clear":["79.1"],"删除所有的键":["79.1"],"值对":["79.1"],"naem":["79.4"],"list2":["79.5"],"value1":["79.6"],"value2":["79.6"],"add":["79.7","79.8"],"foobar":["79.7"],"foo":["79.8"],"setarr":["79.9"],"control":["80.1"],"expires":["80.1"],"破强缓存":["80.1","80.3"],"资源带上hash值":["80.1","80.3"],"更新index":["80.1","80.3"],"html的引用路径":["80.1","80.3"],"请求带上类似时间戳参数":["80.1","80.3"],"较常变的资源使用协商缓存":["80.1","80.3"],"后台设置请响应头last":["80.1","80.3"],"modified":["80.1","80.3"],"前端请求浏览器会带上if":["80.1"],"静态资源最好本地打包时压好":["80.2"],"不要让服务器响应时去压":["80.2"],"则在比较相等性之前先将其转换为数值":["81.1"],"即是调用number":["81.1"],"如果一个操作数是字符串":["81.1"],"另一个是数值":["81.1"],"在比较相等性之前先将字符串转换为数值":["81.1"],"同样调用number":["81.1"],"如果一个操作数是对象":["81.1"],"类型不同直接不相等":["81.2"],"反射型":["82.1"],"所谓反射型":["82.1"],"得用户去触发":["82.1"],"那得先注入":["82.1"],"服务端入参过滤":["82.2"],"site":["82.3"],"request":["82.3"],"referer":["82.4"],"注入可执行sql代码":["82.5"],"长度限制":["82.6"],"04":["83.0"],"谷歌扔两鸡蛋问题":["83.0"],"谷歌扔鸡蛋面试题":["83.0"],"src":["83.0"],"指向形参":["85.1"],"09":["86.0","92.0"],"else":["86.1"],"activexobject":["86.1"],"microsoft":["86.1"],"通过script标签src属性":["86.2"],"全称是":["86.3"],"跨域资源共享":["86.3"],"反向代理请求跨域接口":["86.4"],"原理大致与nginx相同":["86.5"],"两个域名必须属于同一个一级域名":["86.8"],"而且所用的协议":["86.8"],"端口都要一致":["86.8"],"c可以通过window":["86.9"],"parent":["86.9","89.8"],"parent访问a":["86.9"],"所以可以在创建一个方法接受c传进来的参数":["86.9"],"a修改iframeb页面的hash值":["86.9"],"b页面监听hash改变":["86.9"],"拿到hash值":["86.9"],"执行iframe创建":["86.10"],"指向b页面":["86.10"],"b页面将要传递的数据赋值给window":["86.10"],"第一次触发将iframe":["86.10"],"contentwindow":["86.10"],"loaction设置为和a同域名的空代理页面c":["86.10"],"第二次将则可以去获取b传进来的name值":["86.10"],"用iframe":["86.10"],"name获取":["86.10"],"多窗口之间消息传递":["86.11"],"页面与嵌套的iframe消息传递":["86.11"],"上面三个场景的跨域数据传递":["86.11"],"用法":["86.11"],"postmessage":["86.11"],"origin":["86.11"],"普通函数内部默认指向window":["87.1"],"严格undefined":["87.1"],"指向原型对象":["88.1"],"会先在这个对象本身属性上查找":["88.2"],"如果没有找到":["88.2"],"检测属性是否在原型链中":["88.4"],"dd":["88.4"],"commonjs":["89.1","89.16"],"amd":["89.1"],"模块":["89.1"],"都只能在运行时确定这些东西":["89.1"],"firstname":["89.2"],"michael":["89.2"],"lastname":["89.2"],"jackson":["89.2"],"temp":["89.2"],"等同于":["89.2"],"import命令具有提升效果":["89.3"],"会提升到整个模块的头部":["89.3"],"首先执行":["89.3"],"引入":["89.3"],"包裹的内容":["89.3"],"bar":["89.4"],"from":["89.4","106.4"],"my":["89.4"],"可以简单理解为":["89.4"],"import函数的参数specifier":["89.5"],"指定所要加载的模块的位置":["89.5"],"import命令能够接受什么参数":["89.5"],"函数就能接受什么参数":["89.5"],"应用由模块组成":["89.7"],"采用":["89.7"],"filename":["89.8"],"模块的文件名":["89.8"],"带有绝对路径":["89.8"],"loaded":["89.8"],"返回一个布尔值":["89.8"],"表示模块是否已经完成加载":["89.8"],"返回一个对象":["89.8"],"表示调用该模块的模块":["89.8"],"exports变量":["89.9"],"指向module":["89.10"],"这等同在每个模块头部":["89.10"],"如果没有发现指定模块":["89.11"],"会报错":["89.11"],"example":["89.11","89.13"],"require命令去不同路径寻找模块文件":["89.12"],"如果参数字符串以":["89.12"],"开头":["89.12"],"则表示加载的是一个位于绝对路径的模块文件":["89.12"],"home":["89.12"],"marco":["89.12"],"将加载":["89.12"],"require":["89.13","89.14"],"message":["89.13"],"a2":["89.14"],"可以用来判断模块是直接执行":["89.15"],"还是被调用执行":["89.15"],"模块内部的变化就影响不到这个值":["89.16"],"commonjs和es6":["89.16"],"module的区别":["89.16"],"js数组扁平化":["91.0"],"vue插槽相关":["93.0"],"版本后对":["93.0"],"slot":["93.0"],"scope":["93.0"],"做了一次统一的整合":["93.0"],"让它们全部都变为函数的形式":["93.0"],"所有的插槽都可以在":["93.0"],"slotscopes":["93.0"],"上直接访问":["93.0"],"这让我们在开发高级组件的时候变得更加方便":["93.0"],"在优化上":["93.0"],"值只是客户端的一种状态":["94.1"],"也就是说当向服务器端发出请求时":["94.1"],"部分不会被发送":["94.1"],"修改浏览器历史记录":["94.2"],"并渲染页面":["94.2"],"popstate":["94.3"],"进入事件队列":["95.1"],"nexttick会根据浏览器的支持程度":["95.1"],"用samevnode判断两个node是否值得比较":["98.1"],"不值得":["98.1"],"就直接替换oldvnode":["98.1"],"数据有变化会触发handle的执行回调函数":["99.1"],"数据的变量":["99.2"],"内部可以含有被劫持的变量":["99.2"],"变量改变":["99.2"],"不过object":["100.2"],"defineproperty有弊端":["100.2"],"当传入一个对象":["101.1"],"不需要逐一为每个做劫持":["101.2"],"props":["106.1"],"test":["106.1"],"reactapp":["106.1"],"react":["106.1"],"vueapphash":["106.1"],"vuehash":["106.1"],"hashhome":["106.1"],"生命周期":["106.1"],"beforeload":["106.1"],"app":["106.1"],"before":["106.1"],"load":["106.1"],"子应用可以是hash或者history":["106.2"],"qiankun":["106.4"],"mounted":["106.4"],"在主应用mian":["106.5"],"js的注册一次":["106.5"],"utils":["106.5"],"onglobalstatechange":["106.5"],"state":["106.5"],"globaldata":["106.5"],"setglobalstate":["106.5"],"第一次赋值":["106.5"],"data1":["106.5"],"initdata1":["106.5"],"data2":["106.5"],"initdata2":["106.5"],"然后子应用拿到做跳转":["106.6"],"命名空间":["107.2"],"临时响应":["108.1"],"用于表示临时响应并需要请求者执行操作才能继续的状态代码":["108.1"],"成功":["108.2"],"服务器已成功处理了请求":["108.2"],"通常":["108.2"],"这表示服务器提供了请求的网页":["108.2"],"多种选择":["108.3"],"针对请求":["108.3"],"服务器可执行多种操作":["108.3"],"服务器可根据请求者":["108.3"],"agent":["108.3"],"请求要求身份验证":["108.4"],"对于需要登录的网页":["108.4"],"服务器可能返回此响应":["108.4"],"禁止":["108.4"],"服务器拒绝请求":["108.4"],"未找到":["108.4"],"服务器找不到请求的网页":["108.4"],"而不是请求出错":["108.5"],"服务器内部错误":["108.5"],"服务器遇到错误":["108.5"],"08":["110.0"]},{"0":["8.6","11.2","79.4","79.5","86.10"],"1":["9.2","9.3","17.1","23.2","31.3","55.2","58.0","63.6","79.7","82.1","83.0","91.0","102.0"],"2":["0.1","8.1","9.3","13.4","15.8","16.2","18.2","20.2","22.4","22.9","23.7","24.1","27.5","27.21","27.31","34.3","34.9","35.4","35.6","35.9","36.0","37.3","37.7","39.1","47.1","50.7","50.9","50.18","50.29","57.2","58.0","69.1","77.2","78.2","79.4","82.4","82.6","83.0","87.1","89.12","89.16","91.0","100.2"],"3":["1.3","1.4","14.2","14.3","15.11","19.2","20.1","20.2","26.2","27.0","27.9","37.7","42.0","44.3","50.12","50.21","63.9","75.4","75.5","82.2","86.9","89.12","91.0","94.1","98.1","106.1"],"4":["1.5","26.2","27.15","34.5","37.4","37.7","41.1","46.2","46.4","50.21","50.30","59.2","63.2","63.8","63.9","77.3","86.9","91.0"],"5":["1.5","63.9","77.3","86.9","89.8","91.0","93.0"],"6":["16.6","37.7","77.3","89.8","91.0"],"7":["16.6","37.7","80.2","91.0"],"8":["37.7","77.1","91.0"],"9":["37.7","65.2","91.0"],"10":["91.0","103.0","104.0"],"11":["86.0","89.0","106.0","109.0","115.0"],"12":["56.0","112.0","113.0","114.0"],"13":["59.0"],"14":["59.0","89.0","115.0"],"15":["94.0","99.0"],"16":["103.0","107.0","116.0"],"17":["63.0","71.0","87.0","103.0","104.0","116.0"],"18":["106.0","107.0"],"19":["73.0","100.0","105.0","108.0"],"20":["62.0","70.0","94.0","99.0","112.0","113.0","114.0"],"21":["55.0","63.0","65.0","75.0","78.0","80.0","81.0","85.0"],"22":["68.0","69.0","82.0","100.0","105.0","108.0"],"23":["57.0"],"24":["55.0","115.0"],"25":["116.0"],"26":["57.0","92.0"],"27":["56.0"],"28":["62.0","79.0"],"30":["65.0","84.0"],"31":["112.0"],"33":["70.0"],"35":["95.0"],"36":["74.0","90.0"],"37":["50.12"],"38":["92.0"],"39":["111.0"],"40":["55.0","78.0","81.0","85.0","100.0"],"41":["79.0","80.0"],"43":["101.0"],"44":["73.0"],"45":["82.0"],"46":["100.0"],"47":["71.0","74.0","101.0","108.0"],"48":["102.0","113.0","114.0"],"49":["72.0","86.0","94.0","95.0"],"51":["65.0","75.0","81.0","103.0"],"52":["99.0","105.0"],"54":["86.0","89.0"],"55":["65.0"],"58":["66.0","85.0","111.0"],"59":["59.0","101.0","106.0"],"100":["108.1"],"115":["0.0"],"201":["108.2"],"202":["108.2"],"301":["108.3"],"406":["108.4"],"407":["108.4"],"501":["108.5"],"1000":["67.0"],"2018":["63.5"],"2022":["68.0"],"352255":["79.10"],"99999999":["48.1","48.2"],"canary":["0.0"],"不设置":["0.1"],"scroll":["0.1","59.2"],"函数的指定容器":["0.1"],"key":["0.3","37.6","50.23"],"jstar":["0.3"],"id":["0.3","34.9"],"text":["0.3"],"实现横向滚动进度条":["0.3"],"small":["0.4","2.3","48.4"],"display":["1.1"],"position":["1.1"],"定义":["1.3"],"元素单行显示还是多行显示":["1.3"],"如果允许换行":["1.3"],"这个属性允许你控制行的堆叠方向":["1.3"],"的值":["1.4"],"basis":["1.4"],"指定了":["1.4"],"元素在主轴方向上的初始大小":["1.4"],"如果不使用":["1.4"],"box":["1.4"],"flex":["1.5","59.2"],"布局下它等同于":["1.5"],"content":["1.5","15.3","32.0","55.1"],"如果使用了":["1.5"],"unsafe":["1.5"],"滚动会失效":["1.5"],"和视口高度":["2.0"],"vh":["2.0"],"src":["2.2","86.10"],"star":["2.2"],"png":["2.2","83.0"],"vmax":["2.2"],"兼容方式":["3.0"],"vw":["3.1"],"rem":["3.2"],"href":["4.0"],"https":["4.0"],"gitee":["4.0"],"com":["4.0","53.0"],"maps":["4.0"],"x":["4.0"],"boolean":["6.2"],"值":["6.2"],"规定在字符串中开始检索的位置":["6.3"],"它的合法取值是":["6.3"],"tostring":["7.1"],"call":["7.1"],"tostringtag":["7.2"],"array":["7.3","7.4"],"var":["7.4","14.4","22.1","22.5","22.7","22.8","89.8","89.10","89.11"],"prototype":["7.4","21.1","21.6","26.4","75.4"],"isarray":["7.5"],"适用小型数据":["8.1","8.2"],"const":["8.1","8.2","8.4","22.7","30.4","67.0"],"uniquearray":["8.2"],"推荐":["8.3"],"js":["8.3","19.3","22.2","22.8","25.0","50.3","50.5","77.1","84.0","89.1","89.8","89.10","91.0","101.0"],"通过map键的唯一性来做":["8.4"],"然后将map转为数组":["8.4"],"for":["8.6","12.0"],"let":["8.6","12.0","14.4","21.6","22.7","64.0","65.2","75.2","88.1","91.0","106.5"],"i":["8.6","10.0","12.0"],"map":["8.7","41.1"],"不会改变原数组":["9.2"],"改变原数组":["9.3"],"返回截取的新数组":["9.3"],"q":["10.0"],"filter":["10.0"],"includes":["10.0"],"console":["10.0","22.1","64.0","76.1","89.11"],"log":["10.0","22.1","76.1","79.6","89.11"],"item":["11.1"],"of":["11.1","78.3"],"if":["11.1","27.23","66.1","80.1","80.3","106.5","111.0"],"treeitem":["11.2"],"insertsort":["12.0"],"上下文":["13.1"],"return":["13.2","14.4","63.10","67.0","78.3"],"业务逻辑复用":["13.3"],"使用方式不一样":["13.4"],"mycall":["13.5"],"是":["14.1","39.1","50.26"],"es7":["14.1"],"使用":["14.2","34.3","42.0"],"时":["14.2","47.1"],"可以使用":["14.2","50.14"],"try":["14.2","14.4"],"catch":["14.2","16.4","16.6"],"语句来捕获和处理异步操作中抛出的错误":["14.2"],"这使得错误处理更加集中和一致":["14.2"],"易于维护":["14.2"],"代码的可读性和可维护性":["14.2"],"返回的是一个":["14.3"],"promise":["14.3","39.1","66.2","89.5"],"gen":["14.4"],"new":["14.4","17.6","21.2","50.23","63.10","75.3","79.9","88.1","106.5"],"res":["14.4","16.5","21.6"],"rej":["14.4","16.5"],"params":["14.4"],"获取yield右边表达式":["14.4"],"value":["14.4"],"体系结构中的应用层协议":["15.1"],"其内部":["15.1"],"http":["15.2"],"协议简单":["15.2"],"使得":["15.2"],"服务器的程序规模小":["15.2"],"因而通信速度很快":["15.2"],"type":["15.3","32.0","33.1"],"来却分":["15.3"],"解决办法":["15.4"],"协议位于":["15.5"],"tcp":["15.5"],"ip":["15.5"],"协议与各种应用层协议之间":["15.5"],"为数据通讯提供安全支持":["15.5"],"transport":["15.5"],"security":["15.5"],"传输层安全":["15.5"],"其前身是":["15.5"],"避免":["15.7"],"资源消耗也会更大":["15.8"],"将":["15.9"],"的文版传输方式":["15.9"],"切分成了两个分帧":["15.9"],"header":["15.9"],"和":["15.9","26.1","34.9","35.12","36.0","40.2","44.0"],"data":["15.9","27.30","47.3"],"两个帧层":["15.9"],"支持并发请求":["15.11"],"这意味着服务器可以同时处理多个请求":["15.11"],"从而提高了应用的响应速度和效率":["15.11"],"安全性增强":["15.11"],"tls":["15.12"],"强制要求使用":["15.12"],"进行加密传输":["15.12"],"里正式加入":["16.1"],"chaining":["16.2"],"的方式":["16.2"],"使得我们可以将多个异步操作按照顺序连接在一起":["16.2"],"而无需嵌套回调函数":["16.2"],"错误处理":["16.2"],"在回调函数中处理错误通常比较繁琐":["16.2"],"then":["16.3"],"onfulfiled":["16.3"],"onrejected":["16.3"],"finally":["16.4"],"都是特殊的":["16.4"],"方法":["16.4","16.5","46.2"],"创建实例后会去触发传入的执行函数":["16.4"],"如果是不用等待的任务则直接走":["16.4"],"resolve":["16.4","35.8","50.24"],"或者":["16.4","25.0"],"pendding":["16.5"],"这个状态下":["16.5"],"实例自身每次链式调用":["16.5"],"链式调用的方法会去创建一个新的":["16.5"],"遇到":["16.5","22.7"],"会将两个回调函数和这个新":["16.5"],"的":["16.5","41.1"],"映射成一个":["16.5"],"hanlder":["16.6"],"执行函数":["16.6"],"执行函数里会根据内部状态":["16.6"],"status":["16.6"],"去判断执行对应的方法还是":["16.6"],"将这个对象缓存到回调列表里":["16.6"],"等待":["16.6"],"调用自身静态方法":["16.6"],"把":["16.6","50.2"],"参数":["16.6","30.3"],"非严格模式下":["17.1"],"全局作用域里":["17.1"],"单独使用的话指向全局对象":["17.1"],"快速获取自身的属性或者其他方法":["17.2"],"通常用于引用当前对象":["17.3"],"这使得你可以通过对象的方法来访问和修改对象的属性":["17.3"],"事件处理":["17.3"],"dom":["17.3","77.2"],"事件处理中":["17.3"],"通常引用触发事件的元素":["17.3"],"这使得你可以在不使用额外变量的情况下":["17.3"],"直接访问和修改该元素":["17.3"],"回调函数和闭包":["17.3"],"虽然回调函数和闭包通常有自己的作用域和上下文":["17.3"],"但":["17.3","33.1"],"的行为有时可能会让人感到困惑":["17.4"],"特别是在回调函数":["17.4"],"this":["17.5"],"指向其定义时的所在的函数对象":["17.5","26.5"],"bind":["17.5","17.6","26.5","64.0"],"aplly":["17.5"],"user":["17.6"],"name":["17.6","88.4","106.4"],"lisa":["17.6"],"fn":["17.6","24.2"],"hello":["17.6","89.13"],"window":["17.6"],"person":["17.6"],"sayname":["17.6"],"就是":["18.1"],"类型":["18.1","34.9"],"null":["18.1"],"unefined":["18.2"],"计算时会隐式转换为":["18.2"],"运行时环境":["19.1"],"解析等":["19.2"],"它们的回调函数会被添加到任务队列中等待执行":["19.2"],"微任务队列":["19.2"],"microtask":["19.2"],"某些异步任务":["19.2"],"如":["19.2","35.3","40.1"],"会先检查微任务队列":["19.3"],"按先进先出原则":["19.3"],"资源压缩":["20.1"],"内存泄漏":["20.2"],"闭包":["20.2"],"进行各类监听":["20.5"],"指向其构造函数的原型对象":["21.1"],"里面包含":["21.1"],"不是所有函数都是构造函数":["21.2"],"只有使用":["21.2"],"关键字创建了实例对象":["21.2"],"那":["21.3"],"将构造函数的作用域赋值给新对象":["21.4"],"这样":["21.4"],"只有函数才有原型对象":["21.5"],"apply":["21.6"],"源代码":["22.1"],"num":["22.1"],"里作用域分两种":["22.2"],"会去语法检查和预编译":["22.3"],"并且只操作一次":["22.3"],"函数内部同名变量会去覆盖全局的":["22.4"],"引入的":["22.6"],"则将该变量放置变量环境":["22.7"],"假如尝试在声明前去使用这类变量":["22.8"],"就会报错":["22.8"],"这一段会报错的区域就是暂时性死区":["22.8"],"asd":["22.9"],"引用类型":["23.1"],"栈只保存堆的引用地址":["23.1"],"变量被重新赋值":["23.2"],"把还在上下文中的活动变量去掉标记":["23.4"],"老生代会有标记整理算法去解决":["23.5"],"垃圾回收时":["23.7"],"currey":["24.2"],"exec":["24.2"],"但会阻止页面渲染":["25.0"],"样式下载完毕":["25.0"],"则有":["25.0"],"css":["25.0","77.1","107.2"],"解析器将文件解析成":["25.0"],"cssom":["25.0"],"script":["25.0","77.1"],"获取":["25.0"],"如果标签没有设置":["25.0"],"defer":["25.0"],"async":["25.0"],"属性":["25.0","26.4"],"arguments":["26.1","85.2"],"super":["26.1"],"上下文的地方使用箭头函数特别有用":["26.2"],"不绑定":["26.2"],"对象":["26.2","50.11","78.2","89.5"],"箭头函数没有自己的":["26.2"],"但是":["26.2"],"你可以使用剩余参数":["26.2"],"args":["26.2"],"来替代它":["26.2"],"不能作为构造函数":["26.4"],"全局只有一个实例":["27.2"],"install":["27.4"],"节约资源":["27.5"],"根据不同参数返回不同类的实例":["27.6"],"我们可以用工厂方法模式":["27.7"],"document":["27.8","86.10"],"隔离了用户和创建流程":["27.9"],"符合开闭原则":["27.9","27.15"],"解耦了高层逻辑和底层产品类":["27.9"],"用于解决兼容问题":["27.12"],"你想创建一个可复用的对象":["27.13"],"该对象可以与其它不相关的对象或不可见对象":["27.13"],"时间格式转换":["27.14"],"灵活性":["27.15"],"适配器模式提供了一种灵活的方式来处理接口不兼容的问题":["27.15"],"当系统的接口发生变化时":["27.15"],"只需修改适配器":["27.15"],"而无需修改其他类":["27.15"],"从而降低了系统的耦合度":["27.15"],"在不改变原对象的基础上":["27.16"],"使用时添加静态数据":["27.17"],"对象的核心职责和装饰功能区分开":["27.18"],"定义一系列算法":["27.20"],"适用邮件还是电话等":["27.22"],"不需要使用":["27.23"],"else":["27.23","37.7","66.1"],"称为":["27.24","27.28"],"subject":["27.24"],"rxjs":["27.26"],"目标变化就会通知观察者":["27.27"],"这是观察者模式最大的优点":["27.27"],"事件通道":["27.28"],"希望接收通知的对象":["27.28"],"由发布者负责通知":["27.31"],"对象解耦":["27.31"],"那内函数的作用域里就会新增一个包含这个变量的作用域":["28.1"],"让外部无法访问":["28.2"],"那需要及时清除":["28.3"],"存储上一次的方法":["29.1"],"形成闭包":["29.1"],"old":["29.1"],"没有参数":["29.2"],"p":["29.2"],"count":["30.1"],"h1":["30.2","77.1"],"返回类型":["30.3"],"true":["30.4","86.1","88.4"],"arr":["30.4","91.0"],"split":["30.4"],"整数部分再拆分":["30.4"],"int":["30.4"],"startindex":["31.2"],"length":["31.2"],"包头不包尾":["31.3"],"不改变原字符串":["31.3"],"application":["32.0"],"json":["32.0","50.22"],"body":["32.0","77.1"],"stringify":["32.0","86.11"],"message":["32.0"],"的区别":["33.0"],"加上索引签名":["33.1"],"不做声明合并":["33.1"],"所以是没有问题的":["33.1"],"ts":["33.2","35.3"],"userextends":["33.2"],"模块":["34.1"],"可以把代码转化为一颗抽象语法树":["34.2"],"这颗树定义了代码的结构":["34.2"],"通过操纵这个树":["34.2"],"我们可以精确的定位到声明语句":["34.2"],"赋值语句":["34.2"],"将其生成":["34.3"],"module":["34.3","50.5","89.15","106.1"],"在实例中":["34.3"],"alias":["34.4"],"全局变量注入和代码压缩等等":["34.4"],"sequential":["34.5"],"串行钩子":["34.5"],"first":["34.5"],"buildstart":["34.7","35.12"],"resolveld":["34.7"],"footer":["34.8"],"intro":["34.8"],"就够用了":["34.9"],"load":["34.9","35.8"],"为":["34.9"],"即异步优先的钩子":["34.9"],"类似":["34.9"],"它的作用是通过":["34.9"],"解析后的路径来加载模块内容":["34.9"],"钩子的入参是模块":["34.9"],"返回值一般是":["34.9"],"web":["34.10"],"应用":["34.10"],"rollup":["34.10"],"主要是针对库打包而设计的":["34.10"],"esm":["34.10","35.17"],"模块打包工具":["34.10"],"原生":["35.1"],"es":["35.1"],"解析":["35.3"],"小到字符串的操作":["35.3"],"保证极致的代码性能":["35.3"],"高效的内存利用":["35.3"],"中从头到尾尽可能地复用一份":["35.3"],"节点数据":["35.3"],"打包工具中频繁地解析和传递":["35.3"],"数据":["35.3"],"string":["35.3","75.1"],"造成内存的大量浪费":["35.3"],"es5":["35.4"],"支持不了的功能":["35.5"],"加上预加载":["35.5"],"esbuild":["35.6","35.8"],"预构建":["35.6"],"在服务端使用自身插件和":["35.8"],"对文件做":["35.8"],"transform":["35.8"],"parse":["35.8"],"然后以":["35.8"],"业务代码不编译":["35.9"],"只做简单的分析转换":["35.9"],"需要先构建再打包成":["35.9"],"boundle":["35.9"],"打包":["35.10"],"hook":["35.11"],"是和":["35.11"],"configureserver":["35.13"],"用来获取":["35.13"],"html":["35.14"],"文件":["35.14"],"仅执行":["35.14"],"transformindexhtml":["35.14"],"钩子":["35.14"],"pre":["35.15","50.6","50.7"],"的用户插件":["35.15"],"vite":["35.15","35.16"],"将第三方依赖预构建":["35.17"],"页面访问时再去转换成":["35.17"],"返回给浏览器执行":["35.17"],"并带上浏览器缓存":["35.17"],"webpack":["35.18","50.1","50.17"],"先收集所以模块的导出值":["35.18"],"形成导出列表":["35.18"],"这些可以在组件内部任意位置组合使用":["36.0"],"使得相关功能的代码可以放在一起":["36.0"],"提高了代码的可读性和可维护性":["36.0"],"响应式系统的灵活性":["36.0"],"响应式数据通常在":["36.0"],"选项中定义":["36.0"],"而计算属性和侦听器在":["36.0"],"中定义":["36.0"],"这种分离有时候会导致逻辑的碎片化":["36.0"],"树形结构等":["37.1"],"的差异":["37.1"],"并生成描述这些差异的补丁或指令":["37.1"],"结构直接更新":["37.2"],"node":["37.2","63.6","89.15"],"视图更新是组件级的":["37.3"],"首先是同层比较":["37.3"],"比较两个节点的":["37.3"],"当处理嵌套组件时":["37.4"],"算法可能需要递归地遍历整个组件树":["37.4"],"这可能会增加计算的复杂性":["37.4"],"特别是在处理深度嵌套的组件时":["37.4"],"动态内容的限制":["37.4"],"对于某些动态内容":["37.4"],"如条件渲染的块":["37.4"],"可能需要频繁地创建和销毁":["37.4"],"元素":["37.4"],"如果不同":["37.5"],"新节点直接代替旧节点":["37.5"],"第四步":["37.5"],"如果相同":["37.5"],"patchnode":["37.5"],"进行对比节点":["37.5"],"匹配到再位移起始结束节点下标":["37.6"],"然后再利用":["37.6"],"循环比较看有没有可以复用的节点":["37.6"],"然后移动":["37.6"],"end的时候就停止了":["37.7"],"这个二分查找在找索引":["37.7"],"向下取整":["37.7"],"找到中间值后":["37.7"],"我们需要做替换操作":["37.7"],"这里用当前这一项":["37.7"],"替换掉以有的比当前大的那一项":["37.7"],"更有潜力的我需要他":["37.7"],"会优先使用":["39.1"],"es6":["39.1"],"引入的异步编程解决方案":["39.1"],"它允许你注册回调函数":["39.1"],"这些回调函数会在当前的":["39.1"],"执行栈完成之后异步执行":["39.1"],"mutationobserver":["39.1"],"如果环境不支持":["39.1"],"于在表单元素":["40.1"],"checkbox":["40.2"],"radio":["40.2"],"则是":["40.2"],"checked":["40.2"],"change":["40.2"],"事件":["40.2"],"select":["40.2"],"区别":["41.0"],"getter":["41.1"],"里做递归劫持":["41.1"],"这样做好处是只有使用了这个对象才去劫持":["41.1"],"解决了不能检测到对象属性添加删除的缺陷":["41.1"],"解决一开始旧遍历劫持对象层次耗性能的问题":["41.1"],"还代理了":["41.1"],"set":["41.1","79.9"],"weakmap":["41.1"],"weakset":["41.1"],"依赖项的收集是用":["41.1"],"类型收集":["41.1"],"已":["41.1"],"target":["41.1","78.3"],"为键":["41.1"],"effect":["41.1"],"列表":["41.1"],"好处":["41.1"],"不在被引用时":["41.1"],"其值的列表项也会被自动回收":["41.1"],"具有更好的内存管理":["41.1"],"提供了":["41.1"],"composition":["41.1"],"组合式":["41.1"],"style":["42.0","77.1"],"的转换函数和指令函数":["42.0"],"结合这些信息":["42.0"],"有":["44.2"],"deep":["44.2"],"属性可以设置":["44.2"],"深度监听元素变化":["44.2","99.1"],"如果关联的劫持变量没改变":["44.3"],"会从缓存中拿":["44.3"],"内部不能操作异步函数":["44.3"],"会提示错误":["44.3"],"函数":["45.0"],"甚至是多个数据源组成的数组":["45.0"],"在组件初始化时会立即执行一次":["45.1"],"以收集依赖":["45.1"],"之后会在任何依赖的数据变更时重新执行":["45.1"],"更适合于一些通用的副作用场景":["45.2"],"当你需要在函数中自动追踪多个数据源时使用":["45.2"],"更为方便":["45.2"],"watcher":["46.1"],"订阅者":["46.1"],"observer":["46.1"],"然后":["46.2","47.3"],"deps":["46.2"],"将这个观察者加入进其观察者列表里":["46.2"],"当属性修改":["46.2"],"则触发了":["46.2"],"依赖对象触发":["46.2"],"notice":["46.2"],"不同它需要先了解两个概念":["46.3"],"内部不仅会执行渲染方法":["46.4"],"也会设置一些当前":["46.4"],"的属性和设置当前的活动":["46.4"],"以便在":["46.4"],"时做依赖收集":["46.4"],"执行渲染方法":["46.4"],"实例注册到每个组件实例里去":["47.1"],"当业务里使用":["47.1"],"usexx":["47.1"],"会调用":["47.1"],"内部方法":["47.1"],"实例":["47.3"],"创建响应式":["47.3"],"类内部创建":["47.3"],"get":["47.3","86.1"],"state":["47.3","86.10"],"返回这个":["47.3"],"实例的":["47.3"],"mutaions":["47.4"],"结束滚动数值":["48.3"],"duration":["48.3"],"滚动时间":["48.3"],"当":["50.1"],"前端工程化":["50.2"],"less":["50.2"],"默认只识别":["50.3"],"test":["50.4","50.5","50.8"],"下生效":["50.5"],"处理图片规则":["50.5"],"exports":["50.5","50.22","89.8","89.9","106.1"],"rules":["50.5"],"分为前置":["50.6"],"normal":["50.7"],"前置":["50.7"],"的顺序调用":["50.7"],"import":["50.8","50.16"],"from":["50.8","89.3"],"c":["50.8"],"是一个函数":["50.9"],"接收一个源代码":["50.9"],"用于转换某些类型的模块":["50.10"],"对象之前":["50.11"],"生成好了":["50.11"],"shouldemit":["50.12"],"syncwaterfallhook":["50.12"],"同步瀑布流钩子":["50.12"],"谁先触发钩子谁先执行":["50.13"],"compilationparams":["50.14"],"make":["50.14"],"asyncparallelhook":["50.14"],"也就是异步并行钩子":["50.14"],"特点就是异步任务同时执行":["50.14"],"tapasync":["50.14"],"tappromise":["50.14"],"注册":["50.14"],"如果使用tap注册的话":["50.14"],"进行异步操作是不会等待异步操作执行完成的":["50.14"],"es2015":["50.16"],"语句":["50.16"],"commonjs":["50.16"],"plugin":["50.17"],"与浏览器建立连接":["50.18"],"规范的":["50.20"],"dead":["50.20"],"哪些没有":["50.21"],"导出阶段":["50.21"],"将未使用和使用的值生成不同的代码":["50.21"],"删除阶段":["50.21"],"mode":["50.22"],"development":["50.22"],"defineplugin":["50.23"],"是注入到打包后的前端":["50.23"],"config":["50.24"],"bundle":["50.25"],"中排除依赖":["50.25"],"shaking":["50.27"],"当你运行":["50.29"],"构建时":["50.29"],"它会根据配置将所有模块和资源打包成一个或多个捆绑包":["50.29"],"chunk":["50.29"],"确定入口":["50.30"],"根据配置中的":["50.30"],"entry":["50.30"],"找出所有的入口文件":["50.30"],"编译模块":["50.30"],"创建":["50.30"],"compilation":["50.30"],"wei":["52.0"],"github":["52.0"],"在":["54.1","93.0"],"iframe":["54.1","86.10"],"执行":["54.1"],"子应用通过":["54.1"],"proxy":["54.1","86.10","101.0"],"object":["54.1","75.1","75.4","75.5","78.3"],"defineproperty":["54.1"],"06":["55.0","56.0","57.0","68.0","71.0","81.0","82.0","102.0"],"它有四个属性":["55.1"],"w3c":["55.2"],"真实的宽高等于content的":["55.2"],"左右正常":["56.2"],"但只影响文档流左右":["56.4"],"无论多少个tab":["57.1"],"空格":["57.1"],"块级可内容撑开":["57.2"],"脱离标准文档流":["57.2"],"父级after类添加clear":["57.3"],"both":["57.3"],"static":["58.0"],"默认值":["58.0"],"块级和内联元素在正常文本流中":["58.0"],"relative":["58.0"],"相对定位":["58.0"],"相对自身在文本流的位置偏移":["58.0"],"不影响块级":["58.0"],"lasteditors":["59.0","60.0","63.0","68.0","69.0","72.0","79.0","85.0","88.0","95.0","96.0","97.0","109.0","110.0"],"避免文字环绕":["59.1"],"overflow":["59.1"],"父flex":["59.2"],"父overflow":["59.2"],"hidden":["59.2"],"auto":["59.2"],"但这几个不改变元素特性":["59.2"],"但overflow作用在子元素上所以无效":["59.3"],"一边浮动":["59.4"],"lastedittime":["60.0","62.0","66.0","68.0","71.0","72.0","74.0","88.0","96.0","97.0","98.0","109.0","110.0","116.0"],"07":["60.0","63.0","75.0","78.0","80.0","82.0","87.0","94.0","99.0","104.0","106.0","107.0","108.0","112.0","113.0","114.0","115.0"],"进击的面试":["61.0","70.0","73.0","84.0","90.0","92.0","100.0","101.0","102.0","105.0","111.0"],"浏览器cookies工作原理":["61.0"],"md":["61.0","84.0","90.0","92.0","101.0","102.0","111.0"],"cookies":["61.0"],"属性名":["61.0"],"描述":["61.0"],"path":["61.0"],"cookie的使用路径":["61.0"],"如果设置为":["61.0"],"sessionweb":["61.0"],"则只有contextpath为":["61.0"],"setinterval":["63.2"],"setimmediate":["63.2"],"遇到宏微任务分别将其加入各自任务队列":["63.3"],"当调用栈执行完毕之后":["63.3"],"await的值被包裹在一个promise中":["63.4"],"尚未resolve":["63.4"],"然后将整个await放进微任务队列":["63.4"],"xitu":["63.5"],"io":["63.5"],"webp":["63.6"],"ignore":["63.6"],"error":["63.6"],"node中的event":["63.6"],"loop是基于libuv实现的":["63.6"],"而libuv是":["63.6"],"的新跨平台抽象层":["63.6"],"libuv使用异步":["63.6"],"prepare":["63.8"],"仅在内部使用":["63.8"],"poll":["63.8"],"最重要的阶段":["63.8"],"执行process":["63.9"],"nexttic回调":["63.9"],"执行microtasks":["63.9"],"进入循环":["63.9"],"timers阶段":["63.9"],"检测有没有到期的timers回调执行":["63.9"],"resolved":["64.0"],"触发等待的任务":["64.0"],"opratetask":["64.0"],"rejected":["64.0"],"如果一直处于rejected状态说明没catch和then第二参":["64.0"],"报个错":["64.0"],"settimeout":["64.0","67.0"],"next":["64.0"],"rejnext":["64.0"],"返回值是":["64.0"],"promise对象":["64.0"],"将后面的":["64.0"],"instanceof":["64.0","88.3"],"that":["64.0"],"opratethen":["64.0"],"并将紧跟在yield后面的那个表达式的值":["65.1"],"start":["65.2"],"a":["65.2"],"yield":["65.2"],"b":["65.2"],"e":["66.1","88.1","88.3"],"根据done判断是否结束":["66.1"],"用promise包裹":["66.1"],"兼容value的值为promise":["66.1"],"函数返回的":["66.2"],"对象被reject":["66.2"],"因此需要加上错误处理":["66.2"],"export":["67.0"],"default":["67.0"],"fpscompatibility":["67.0"],"function":["67.0","75.1","78.3","84.0","86.10","89.11","106.5"],"requestanimationframe":["67.0"],"webkitrequestanimationframe":["67.0"],"callback":["67.0","86.10"],"09":["69.0","87.0"],"概念":["69.2"],"垃圾回收时对进入状态的变量永远不会清除":["69.3"],"然后跟踪这个引用类型":["69.4"],"当这个引用类型地址赋值给变量时引用标记":["69.4"],"03":["70.0","73.0"],"filepath":["70.0","73.0","74.0","90.0","92.0","100.0","101.0","102.0","105.0","111.0","116.0"],"在创建阶段":["71.1"],"汇报父级的变量对象集合保存到内部属性":["71.1"],"且内函数含引用了父层函数的变量":["72.1"],"o":["72.3"],"unused":["72.3"],"01":["75.0","107.0"],"class":["75.2"],"lei":["75.2"],"typeof":["75.3"],"intancepof":["75.5"],"对于简单类型的数据":["76.0"],"数值":["76.0"],"utf":["77.1"],"title":["77.1"],"and":["77.1"],"example":["77.1","89.8"],"as":["77.1","89.2","89.4"],"main":["77.1"],"stylesheet":["77.1"],"bouncing":["77.1"],"balls":["77.1"],"与解析并行":["77.2"],"在解析完成后执行":["77.2"],"最迟也会在domcontentloaded事件前执行完":["77.2"],"要等到整个页面在内存中正常渲染结束":["77.2"],"结构完全生成":["77.2"],"以及其他脚本执行完成":["77.2"],"才会执行":["77.2"],"渲染完再执行":["77.2"],"开始解析html的文档":["77.3"],"开启下载线程":["77.3"],"对所有资源进行优先级排序下载":["77.3"],"解析到在头部":["77.3"],"05":["78.0","80.0","100.0"],"其中一成员修改内容":["78.1"],"值不为数组":["78.2"],"可以是函数":["78.2"],"类":["78.2"],"数组拿下标":["78.3"],"那元素":["78.3"],"obj报错":["78.3"],"judgetype":["78.3"],"没有返回值":["79.1"],"delete":["79.1"],"删除某个键":["79.1"],"返回true":["79.1"],"list":["79.2"],"s":["79.6"],"baz":["79.7","79.8"],"bar":["79.8"],"返回set数据结构":["79.9"],"str":["79.10"],"并集":["79.11"],"union":["79.11"],"since":["80.1","80.3"],"或者使用请求头":["80.1","80.3"],"none":["80.1","80.3"],"match":["80.1","80.3"],"和响应头":["80.1","80.3"],"etag":["80.1","80.3"],"每次请求带上if":["80.1"],"since或者if":["80.1"],"静态资源压缩":["80.2"],"合并":["80.2"],"前端请求浏览器会带上if":["80.3"],"另一个操作数不是":["81.1"],"则调用对象的valueof":["81.1"],"和tostring":["81.1"],"方法把对象转换成基础类型的值再比较":["81.1"],"除date对象外":["81.1"],"会优先尝试使用valueof":["81.1"],"用得到的基本类型按照前面的规则进行比较":["81.1"],"以及null":["81.1"],"注入得通过页面劫持或者不法数据返回":["82.1"],"所以不明白这是咋分成反射型的":["82.1"],"和其他方式关联极大":["82.1"],"账号密码":["82.1"],"服务器端返回前过滤或者转义":["82.2"],"长度限制":["82.2"],"forgery":["82.3"],"跨站请求伪造":["82.3"],"字段":["82.4"],"判断请求来源":["82.4"],"服务端读取时没做相关处理":["82.5"],"如果是一个鸡蛋":["83.0"],"保险起见只能自下而上":["83.0"],"一层层试":["83.0"],"所以有两个鸡蛋":["83.0"],"可以用一个先找到大致范围":["83.0"],"然后再用另一个":["83.0"],"自下而上":["83.0"],"在这个区域一层层找":["83.0"],"所以涉及了两个范围":["83.0"],"第一个和第二个鸡蛋的自下而上的次数":["83.0"],"比如100层":["83.0"],"第一个鸡蛋每次以10层为单位往上找":["83.0"],"斐波那契数":["84.0"],"递归":["84.0"],"n大占内存也大":["84.0"],"f":["84.0"],"n":["84.0"],"有length":["85.1"],"和array":["85.2"],"xmlhttp":["86.1"],"open":["86.1"],"url":["86.1","86.10"],"发送带有callback参数的get请求":["86.2"],"cross":["86.3"],"origin":["86.3"],"并且可以顺便修改cookie中domain信息":["86.4"],"都是通过启一个代理服务器":["86.5"],"否则无法利用document":["86.8"],"domain进行跨域":["86.8"],"b修改iframec页面的hash值":["86.9"],"c页面监听到hash改变":["86.9"],"c页面中转":["86.9"],"利用window":["86.9"],"createelement":["86.10"],"加载跨域页面":["86.10"],"onload事件会触发2次":["86.10"],"方法接受两个参数":["86.11"],"html5规范支持任意基本类型或可复制的对象":["86.11"],"但部分浏览器只支持字符串":["86.11"],"所以传参时最好用json":["86.11"],"序列化":["86.11"],"协议":["86.11"],"主机":["86.11"],"箭头指向上一作用域this指向":["87.1"],"则会去它的":["88.2"],"proto":["88.2"],"模块不是对象":["89.1"],"而是通过令显式指定输出的代码":["89.1"],"再通过import命令输入":["89.1"],"自动采用严格模式":["89.1"],"as重命名":["89.2"],"v1":["89.2"],"v2":["89.2"],"streamv1":["89.2"],"firstname":["89.3"],"lastname":["89.3"],"temp":["89.3"],"xx":["89.3"],"引入default":["89.3"],"接口改名":["89.4"],"两者区别主要是后者为动态加载":["89.5"],"返回一个":["89.5"],"模块规范":["89.7"],"children":["89.8"],"返回一个数组":["89.8"],"表示该模块要用到的其他模块":["89.8"],"表示模块对外输出的值":["89.8"],"jquery":["89.8"],"eventemitter":["89.9"],"require":["89.9"],"events":["89.9"],"有一行这样的命令":["89.10"],"invisible":["89.11"],"则表示加载的是一个位于相对路径":["89.12"],"跟当前执行脚本的位置相比":["89.12"],"的模块文件":["89.12"],"circle":["89.12"],"将加载当前脚本同一目录的circle":["89.12"],"如果参数字符串不以":["89.12"],"或":["89.12"],"上面代码中":["89.13"],"连续三次使用require命令":["89.13"],"b1":["89.14"],"直接执行的时候":["89.15"],"是同步加载模块":["89.16"],"用在服务端":["89.16"],"es6是异步加载模块":["89.16"],"04":["90.0"],"严格模式":["90.0"],"严格模式主要有以下限制":["90.0"],"多维数组变成一维数组":["91.0"],"spa页面易造成的内存泄露":["92.0"],"也尽可能的让":["93.0"],"的更新不触发父组件的渲染":["93.0"],"通过一系列巧妙的判断和算法去尽可能避免不必要的渲染":["93.0"],"的版本中":["93.0"],"由于生成":["93.0"],"的作用域是在父组件中":["93.0"],"所以明明是子组件的插槽":["93.0"],"的更新是会带着父组件一起更新的":["93.0"],"父组件经过初始化时的一系列处理":["93.0"],"每个插槽会转换成一个key":["93.0"],"插槽名":["93.0"],"未命名时是default":["93.0"],"对应的函数":["93.0"],"有作用域参数的话":["93.0"],"会传作用越参数":["93.0"],"子组件的实例":["93.0"],"值的改变":["94.1"],"都会在浏览器的访问历史中增加一个记录":["94.1"],"因此我们能通过浏览器的回退":["94.1"],"前进按钮控制hash":["94.1"],"的切换":["94.1"],"back":["94.2"],"foeward":["94.2"],"go":["94.2"],"前进或者后退时会触发":["94.3"],"pushstate":["94.3"],"判断用那种任务的执行方法包裹回调函数执行":["95.1"],"比如promise包裹":["95.1"],"判断key是否相同与标签是否相同":["98.1"],"是否都含有data属性":["98.1"],"input类型是否相同这些":["98.1"],"值得就调用patchvnode进行节点比较":["98.1"],"有deep属性可以设置":["99.1"],"也会触发该函数的get属性":["99.2"],"return最新值":["99.2"],"当传入一个对象":["100.1"],"和key":["100.1"],"对于值为数组":["100.2"],"数组内元素的增删改":["100.2"],"不触发set视图更新":["100.2"],"vue3proxy":["101.0"],"简单使用":["101.0"],"proxy会对起所有属性的栈区监听":["101.1"],"如果属性值包含对象或者包含数组":["101.1"],"直接监听对象":["101.2"],"vue2":["102.0"],"3区别":["102.0"],"vue23区别":["102.0"],"3做了向下兼容":["102.0"],"发生改变":["102.0"],"webpack工作原理":["105.0"],"挂载前回调":["106.1"],"beforemount":["106.1"],"mount":["106.1"],"挂载后回调":["106.1"],"afterunmount":["106.1"],"after":["106.1"],"unload":["106.1"],"卸载后回调":["106.1"],"注册应用":["106.1"],"默认子应用":["106.1"],"开启":["106.1"],"子应用需要需改打包配置":["106.1"],"publicpath":["106.1"],"child":["106.1"],"url资源路径":["106.1"],"apps":["106.4"],"子应用配置":["106.4"],"vueapphash":["106.4"],"在子应用mian":["106.5"],"从props内拿到传过来的信息":["106.5"],"render":["106.5"],"props":["106.5"],"store":["106.5"],"方式一":["106.5"],"将主应用的actions方法拿到":["106.5"],"在onglobalstatechange":["106.5"],"可以拿到state的值":["106.5"],"等于父传子通讯":["106.5"],"instance":["106.5"],"继续":["108.1"],"已创建":["108.2"],"请求成功并且服务器创建了新的资源":["108.2"],"选择一项操作":["108.3"],"或提供操作列表供请求者选择":["108.3"],"永久移动":["108.3"],"请求的网页已永久移动到新位置":["108.3"],"服务器返回此响应":["108.3"],"对":["108.3"],"方法禁用":["108.4"],"禁用请求中指定的方法":["108.4"],"不接受":["108.4"],"无法使用请求的内容特性响应请求的网页":["108.4"],"需要代理授权":["108.4"],"此状态代码与":["108.4"],"无法完成请求":["108.5"],"尚未实施":["108.5"],"服务器不具备完成请求的功能":["108.5"],"例如":["108.5"],"v":["111.0"],"for和v":["111.0"]},{"0":["6.3","15.3","15.5","30.4","67.0"],"1":["6.2","15.5","22.1","31.2","69.4","70.0","73.0","84.0","86.11","90.0","92.0","101.0","105.0","116.0"],"2":["8.7","9.2","13.3","15.4","15.5","15.9","17.1","17.2","17.5","28.2","31.3","34.10","35.8","35.17","40.2","50.8","59.3","63.6","65.1","75.1","84.0","89.7","90.0","94.2","99.2","101.2","102.0","111.0"],"3":["9.3","15.2","15.5","17.1","22.7","26.4","27.23","34.2","34.3","34.9","37.3","47.1","47.3","54.1","57.3","58.0","65.2","80.1","82.4","90.0","102.0","107.2"],"4":["1.4","14.2","16.3","19.2","19.3","20.1","20.2","27.9","42.0","44.3","50.12","58.0","82.2","90.0","98.1","102.0"],"5":["27.15","37.4","41.1","46.2","46.4","50.12","50.30","63.2","63.8"],"6":["1.5","63.5","63.9"],"7":["63.9","77.3"],"8":["16.6","78.3","80.2"],"11":["66.0","69.0","91.0","108.0"],"12":["63.5"],"13":["68.0"],"14":["63.0","69.0","99.0"],"15":["74.0"],"16":["70.0","78.0","104.0"],"17":["68.0","88.0","107.0"],"18":["110.0"],"21":["82.0","98.0"],"22":["60.0","72.0","98.0"],"23":["88.0"],"29":["87.0"],"30":["96.0"],"31":["57.0","72.0","113.0"],"34":["112.0"],"37":["68.0","87.0","106.0"],"40":["60.0"],"41":["88.0"],"44":["98.0"],"46":["80.0"],"50":["96.0"],"51":["97.0"],"53":["114.0"],"54":["68.0","72.0"],"56":["60.0","62.0"],"59":["89.0","110.0"],"60":["67.0"],"99":["63.10","89.2"],"100":["13.2","59.2"],"101":["37.7"],"103":["37.7"],"104":["37.7"],"106":["37.7"],"107":["37.7"],"109":["37.7"],"111":["22.9","50.14"],"203":["108.2"],"408":["108.4"],"409":["108.4"],"502":["108.5"],"1000":["63.10"],"1999":["15.5"],"2000":["50.14"],"2022":["63.0"],"12000":["106.4"],"999999999":["30.1"],"版本":["0.0"],"驱动动画定义了两种新的的":["0.0"],"滚动关联的是绑定动画元素的父级元素或者定位的元素":["0.1"],"可以用":["0.1"],"contentwrap2":["0.3"],"span":["0.3"],"members":["0.4","2.3","48.4"],"float":["1.1","59.1"],"flow":["1.3"],"和":["1.3","21.1","41.1","44.3","50.3","94.3","111.0"],"sizing":["1.4"],"改变盒模型的话":["1.4"],"那么这个属性就决定了":["1.4"],"元素的内容盒":["1.4"],"content":["1.4","15.2"],"的尺寸":["1.4"],"会覆盖":["1.5"],"的效果":["1.5"],"grow":["1.5"],"会受":["1.5"],"较小的值":["2.0"],"max":["2.2"],"viewport":["3.0"],"vh":["3.1"],"配合":["3.2"],"front":["4.0"],"end":["4.0"],"scraps":["4.0"],"git":["4.0"],"target":["4.0"],"能检测":["6.2"],"到":["6.3"],"stringobject":["6.3"],"var":["7.1"],"修改了默认描述符为":["7.2"],"判断变量原型链上是否有数组原型":["7.3"],"修改了这个对象原型":["7.4"],"是无法正确判断的":["7.4"],"声明数组肯定会经过构造函数":["7.5"],"uniquearrat":["8.1"],"array":["8.1","8.2","8.4","8.6","75.1","78.2"],"acc":["8.2"],"o":["8.3","63.2","63.6"],"n":["8.3"],"uniquearray":["8.4"],"length":["8.6","12.0","24.2"],"哈希法":["8.7"],"返回新数组":["9.2"],"包头不包尾":["9.2","9.3"],"二参不填":["9.3"],"截取到末尾":["9.3"],"并集":["10.0"],"合并去重":["10.0"],"w":["10.0"],"new":["10.0","26.2","75.2","79.2","79.6","89.9","101.0"],"set":["10.0"],"newitem":["11.1"],"children":["11.1"],"push":["11.2"],"else":["11.2","14.4"],"t":["12.0"],"并且传递参数":["13.1"],"obj2":["13.2"],"apply":["13.3","13.4"],"可以数组作为函数参数传递":["13.3"],"二参传入数组":["13.4"],"mybind":["13.5"],"正式加入":["14.1"],"语法使得异步代码看起来更加直观和易于理解":["14.2"],"它允许我们以同步的方式编写异步代码":["14.2"],"使得代码结构更加清晰":["14.2"],"易于阅读和维护":["14.2"],"同时":["14.2","15.12"],"由于避免了嵌套回调":["14.2"],"代码也更容易进行重构和扩展":["14.2"],"更自然的控制流":["14.2"],"不能处理状态为":["14.3"],"rejected":["14.3"],"catch":["14.4","16.2","16.3"],"e":["14.4"],"根据done判断是否结束":["14.4"],"if":["14.4","24.2","32.0","72.3","84.0","86.10"],"用promise包裹":["14.4"],"api":["15.1"],"xmlhttprequest":["15.1"],"灵活":["15.2"],"允许传输任意类型的数据对象":["15.2"],"正在传输的类型由":["15.2"],"type":["15.2","50.5"],"从":["15.3","50.11"],"https":["15.4"],"它最初的几个版本":["15.5"],"由网景公司开发":["15.5"],"年从":["15.5"],"http":["15.7"],"需要去机构申请":["15.8"],"ca":["15.8"],"并用二进制进行编码":["15.9"],"更加健壮":["15.9"],"多路复用":["15.9"],"会有线头阻塞和多个":["15.9"],"tcp":["15.9"],"采用了":["15.11"],"tls":["15.11"],"这可能增加了部署和配置的成本和复杂性":["15.12"],"如果服务器或客户端不支持":["15.12"],"那么它们将无法使用":["15.12"],"用于处理异步操作和值传递的一个对象":["16.1"],"因为你需要在每个回调函数中显式地检查错误":["16.2"],"提供了一种更优雅的错误处理机制":["16.2"],"即使用":["16.2"],"方法来捕获并处理":["16.2"],"reject":["16.4","16.5"],"然后将状态修改成":["16.4"],"如果有链式调用":["16.4"],"会执行对应的方法":["16.4"],"返回一个新的":["16.4"],"然后将这个":["16.4"],"onfullfild":["16.5"],"onrejected":["16.5"],"reslove":["16.5"],"的对象":["16.5"],"在":["16.5","17.5","37.1","111.0"],"内部":["16.5"],"当做":["16.5"],"handle":["16.5"],"方法的参数":["16.5"],"执行":["16.5","16.6"],"参数里":["16.6"],"则传空":["16.6"],"最后":["16.6"],"return":["16.6","21.6","32.0","84.0","91.0"],"出去":["16.6"],"finally":["16.6"],"会做些逻辑处理":["16.6"],"然后":["16.6"],"传入特殊处理的参数":["16.6"],"会用":["16.6"],"的回调函数":["16.6","19.2"],"这样通过":["16.6"],"函数作用域里":["17.1"],"单独使用的话也指向全局对象":["17.1"],"可以在这些函数中用于引用外部上下文":["17.3"],"这可以通过":["17.3"],"function":["17.3","29.1","89.8","89.9","91.0"],"prototype":["17.3","26.2","78.3","88.1"],"bind":["17.3"],"call":["17.3","17.5","26.5","78.3"],"或":["17.3","108.3"],"事件处理程序和某些异步操作中":["17.4"],"显示绑定也无法改变":["17.5"],"settimeout":["17.5","50.14","63.10","89.9"],"sss":["17.6"],"注意点":["17.6"],"b":["17.6","22.9"],"let":["17.6","22.6","89.2","101.0"],"person1":["17.6"],"是":["18.1","50.29"],"object":["18.1","21.6","47.3","77.1","100.0"],"历史原因":["18.1"],"nan":["18.2"],"为":["18.2"],"如":["19.1"],"会被添加到微任务队列中":["19.2"],"它们的优先级高于普通的任务队列":["19.2"],"事件循环":["19.2"],"一个不断运行的循环":["19.2"],"负责监控任务队列和微任务队列":["19.2"],"放到调用栈里去执行":["19.3"],"后面再检查任务队列":["19.3"],"使用":["20.1","46.4","47.3","50.21"],"vue3":["20.2"],"shallow":["20.2"],"然后针对优化":["20.5"],"constructor":["21.1","75.5"],"prototypr":["21.1"],"自定义的原型属性和方法":["21.1"],"那":["21.2"],"的这个函数就是这个实例对象的构造函数":["21.2","21.3"],"this":["21.4","50.9","106.5"],"typeof":["21.6"],"变量提升代码":["22.1"],"全局作用域":["22.2"],"函数作用域":["22.2"],"这样每次执行代码的时候就不用再去解析一边这些变量和函数":["22.3"],"直接分配执行空间就行":["22.3"],"变量未被销毁":["22.4"],"声明":["22.5"],"放置词法环境栈底":["22.7"],"如果该作用域内部还有其他函数作用域":["22.7"],"其内部遇到":["22.7"],"name":["22.8","33.1","79.5"],"javascript":["22.8"],"temp":["22.8","75.2"],"值保存在堆中":["23.1"],"垃圾回收针对的就是这个堆中的引用数据":["23.1"],"然后清理所有带标记的对象":["23.4"],"会在使用区中寻找活动的对象":["23.7"],"将其复制到空闲空间":["23.7"],"延迟执行":["24.1"],"arr":["24.2"],"则会停止解析":["25.0"],"去加载":["25.0"],"加载完成立即执行代码":["25.0"],"执行完毕再恢复解析":["25.0"],"如果":["25.0"],"加载":["25.0"],"不会停止解析":["25.0"],"但延迟执行":["25.0"],"在文档解析完成":["25.0"],"domcontentloaded":["25.0"],"绑定":["26.1"],"并且不可被用作方法":["26.1"],"箭头函数不能用作构造函数":["26.1"],"有构造函数":["26.2"],"但没有":["26.2"],"箭头函数没有":["26.2","87.1"],"属性":["26.2","47.4","94.1"],"因此它们不能用作构造函数":["26.2"],"即":["26.2"],"不能用":["26.2"],"关键字与箭头函数一起使用":["26.2"],"这实际上是一个限制":["26.2"],"但也是它简洁性的一部分":["26.2"],"不能再其中使用":["26.4"],"aplly":["26.5"],"大类":["27.0"],"并提供一个全局访问点":["27.2"],"方法":["27.4"],"保证访问的一致性":["27.5"],"将对象的创建与对象的实现分离":["27.6"],"createelement":["27.8"],"符合最少知识原则":["27.9"],"代码复用性好":["27.9"],"接口":["27.12"],"即接口方法或属性不兼容的对象":["27.13"],"协同工作":["27.13"],"开闭原则要求软件实体对扩展开放":["27.15"],"对修改关闭":["27.15"],"适配器模式通过扩展新的适配器类来满足新的需求":["27.15"],"而无需修改已有的类":["27.15"],"客户端代码透明":["27.15"],"增加新属性":["27.16"],"可以通过动态增删装饰去除目标对象中的装饰逻辑":["27.18"],"根据输入的参数决定使用哪个算法":["27.20"],"多个算法只有行为上有些不同":["27.21"],"进行策略选择":["27.23"],"提高了维护性":["27.23"],"维持一系列依赖于它的对象":["27.24"],"缺点":["27.27"],"subscriber":["27.28"],"通过自定义事件订阅主题":["27.28"],"发布者":["27.30"],"发布者无需知道消息的接受者":["27.31"],"只需遍历订阅该消息类型的订阅者发送消息":["27.31"],"解耦了发布者和订阅者之间的联系":["27.31"],"这个作用域就称之为闭包":["28.1"],"不然闭包会一直存在":["28.3"],"方法挂载最新赋值的方法":["29.1"],"args":["29.1"],"一个参数":["29.2"],"count":["30.2","30.3"],"小数部分":["30.4"],"fraction":["30.4"],"包头包尾":["31.2"],"不改变原字符串":["31.2"],"返回截取字符串":["31.3"],"value":["32.0","50.23"],"role":["32.0"],"ts":["33.1","47.1"],"user":["33.1","33.2","86.1","89.12"],"breed":["33.1","33.2"],"string":["33.2"],"tree":["34.1"],"shaking":["34.1"],"运算符语句等等":["34.2"],"实现对代码的分析":["34.2"],"优化":["34.2"],"变更等操作":["34.2"],"acorn":["34.3"],"方法将代码解析成":["34.3"],"分析当前模块的":["34.3"],"因此":["34.4"],"rollup":["34.4","35.11"],"如果有多个插件实现了这个":["34.5"],"那么":["34.5","108.4"],"load":["34.7"],"outro":["34.8"],"renderdynamicimport":["34.8"],"或者一个对象":["34.9"],"如果返回值为":["34.9"],"则交给下一个插件处理":["34.9"],"或者对象":["34.9"],"则终止后续插件的处理":["34.9"],"如果是对象可以包含":["34.9"],"sourcemap":["34.9"],"ast":["34.9"],"等":["34.9","50.21"],"代码转换":["34.9"],"transform":["34.9"],"sequential":["34.9"],"功能不同":["34.10"],"提供了":["34.10","35.1","36.0"],"loader":["34.10","50.30"],"chunks":["34.10"],"模块":["35.1"],"丰富的内建功能":["35.1"],"作为":["35.3"],"vite":["35.3","35.13"],"的双引擎之一":["35.3"],"在很多关键的构建阶段":["35.3"],"如依赖预编译":["35.3"],"语法转译":["35.3"],"代码压缩":["35.3"],"让":["35.3"],"获得了相当优异的性能":["35.3"],"依赖预构建":["35.3"],"boundle":["35.3"],"工具":["35.3"],"是提倡":["35.3"],"no":["35.3"],"不支持":["35.4"],"const":["35.4","50.8","89.5"],"异步加载这些功能":["35.5"],"热更新模块":["35.6"],"基于":["35.6"],"模块返回给浏览器":["35.8"],"做到了冷启动":["35.8"],"其次是":["35.8"],"的预构建机制":["35.8"],"将其他格式的依赖转为":["35.8"],"更快的热更新":["35.9"],"还是利用了":["35.9"],"只去更新边界内的模块":["35.9"],"的":["35.11","37.4"],"请求响应阶段":["35.12"],"dev":["35.13"],"server":["35.13"],"对于非":["35.14"],"则依次执行":["35.14"],"resolveid":["35.14"],"核心插件":["35.15"],"没有":["35.15"],"是双引擎架构":["35.16"],"hmr":["35.17"],"实现不一样":["35.17"],"放到依赖图对象里去":["35.18"],"然后再递归遍历模块标记哪些导出值使用到了哪些没使用到":["35.18"],"按不同方式构建出代码后":["35.18"],"用于创建响应式数据":["36.0"],"以及":["36.0"],"用于创建计算属性和侦听器":["36.0"],"这些功能可以在函数内部任意组合":["36.0"],"使得响应式逻辑的编写更加灵活":["36.0"],"类型支持":["36.0"],"vue":["37.1","111.0"],"效率是比较高":["37.2"],"key":["37.3"],"和属性值":["37.3"],"看是否相同":["37.3"],"节点不同":["37.3"],"即使这些元素的内容只是略有变化":["37.4"],"这可能会导致不必要的性能开销":["37.4"],"对第三方库和插件的依赖":["37.4"],"算法主要关注于":["37.4"],"自身的虚拟":["37.4"],"结构和渲染机制":["37.4"],"如果开发者使用了大量的第三方库或插件":["37.4"],"并且这些库或插件没有与":["37.4"],"如果旧节点和新节点都是文本节点":["37.5"],"则新文本代替旧文本":["37.5"],"如果旧节点有子节点":["37.5"],"新节点没":["37.5"],"则删除旧节点的子节点":["37.5"],"如果旧节点没有子节点":["37.5"],"新节点有":["37.5"],"使用双端比较头和头":["37.6"],"匹配到再位移起始结束下标":["37.6"],"剩余新节点的会生成":["37.6"],"keymap":["37.6"],"然后根据":["37.6"],"记住他的前一个人是谁":["37.7"],"console":["37.7","72.3","79.7","79.8","89.8","106.5"],"log":["37.7","72.3","79.7","89.8","106.5"],"undifine":["37.7"],"l1":["37.7"],"foreach":["37.7"],"result1":["37.7"],"默认追加记录前驱索引":["37.7"],"会使用":["39.1"],"html5":["39.1"],"新增的特性":["39.1"],"用于监视":["39.1"],"变动":["39.1"],"通过创建一个":["39.1"],"input":["40.1"],"在组件上使用":["40.2"],"vue2":["40.2","100.0"],"里":["40.2"],"默认也是相当于个组件传递了一个":["40.2"],"逻辑点不会怎么分散":["41.1"],"码更易于复用和组合":["41.1"],"on":["41.1"],"off":["41.1"],"once":["41.1"],"被移除":["41.1"],"新组件":["41.1"],"teleport":["41.1"],"模态框组件":["41.1"],"将内部":["41.1"],"dom":["41.1","54.1"],"插入到指定标签":["41.1"],"id":["41.1","93.0"],"类名下面去":["41.1"],"html":["41.1","86.9","106.1"],"to":["41.1"],"suspense":["41.1"],"异步处理组件":["41.1"],"在加载异步组件时":["41.1"],"可以先渲染其它东西":["41.1"],"让渲染更加平滑":["41.1"],"default":["41.1","89.2","93.0"],"async":["41.1","77.2","86.1"],"component":["41.1"],"core":["42.0"],"里包里的解析方法":["42.0"],"将模板信息转换成模板抽象语法树":["42.0"],"然后再转换函数里":["42.0"],"computed":["44.0"],"默认是":["44.2"],"false":["44.2"],"只监听对象自身":["44.2","99.1"],"有":["44.3"],"get":["44.3","108.3"],"只会在侦听的数据源发生变更时才执行回调函数":["45.0"],"可以访问旧值和新值":["45.0"],"无法直接访问旧值和新值":["45.1"],"它的自动依赖追踪减少了手动":["45.2"],"指定依赖的需要":["45.2"],"但这也意味着它可能执行更多的次数":["45.2"],"因为它会在任何依赖的数据变更时重新执行":["45.2"],"数据的劫持者":["46.1"],"用来劫持":["46.1"],"遍历观察者列表触发更新":["46.2"],"观察者接到依赖对象的通知":["46.2"],"会触发其":["46.2"],"update":["46.2"],"做组件级更新执行":["46.2"],"render":["46.2"],"diff":["46.2"],"对比更新":["46.2"],"vdom":["46.2"],"reactive":["46.3"],"会去获取数据":["46.4"],"触发":["46.4"],"track":["46.4","77.1"],"方法做依赖收集":["46.4"],"方法内部":["46.4"],"会根据当前的传入的对象":["46.4"],"在实例":["46.4"],"definestore":["47.1"],"去初始化仓库":["47.1"],"store":["47.1"],"对象":["47.1"],"首先根据参数类别":["47.1"],"getter":["47.3"],"则是遍历":["47.3"],"内部的方法":["47.3"],"definepropty":["47.3"],"劫持":["47.3"],"br":["48.1","48.2"],"单位":["48.3"],"ms":["48.3"],"decimals":["48.3"],"处理应用程序时":["50.1"],"它会在内部从一个或多个入口点构建一个":["50.1"],"sass":["50.2"],"转成":["50.2"],"识别出哪些文件会被转换":["50.4"],"一般是正则匹配":["50.4"],"jpeg":["50.5"],"gif":["50.5"],"i":["50.5","63.2","83.0"],"asset":["50.5"],"generator":["50.5"],"普通":["50.6"],"常规方法":["50.7"],"a":["50.8","53.0","94.1"],"不能是箭头函数因为要复用":["50.9"],"传递上下文参数":["50.9"],"而插件则可以用于执行范围更广的任务":["50.10"],"make":["50.11"],"开始递归分析依赖":["50.11"],"准备对每个模块进行":["50.11"],"assetpath":["50.12"],"syncloophook":["50.12"],"同步循环钩子":["50.12"],"中未使用":["50.12"],"asyncparallelhook":["50.12"],"异步并行钩子":["50.12"],"compilation":["50.14"],"使用tapasync":["50.14"],"tappromise注册":["50.14"],"进行异步操作会等异步操作做完再继续往下执行":["50.14"],"require":["50.16","89.8"],"amd":["50.16"],"define":["50.16"],"压缩":["50.17"],"服务端监控到文件修改":["50.18"],"会去构建新的模块":["50.18"],"生成新的编译标识":["50.18"],"code":["50.20"],"elimination":["50.20"],"根据生成代码的标记":["50.21"],"terser":["50.21"],"uglifyjs":["50.21"],"scripts":["50.22"],"build":["50.22"],"代码中作为全局变量":["50.23"],"是变量对应的值":["50.23"],"alias":["50.24"],"的方法":["50.25"],"相反":["50.25"],"package":["50.26"],"代码块":["50.29"],"在打包过程中生成的中间文件":["50.29"],"它代表着一堆":["50.29"],"module":["50.29","89.10"],"和其相关回调钩子":["50.30"],"从入口文件出发":["50.30"],"调用所有配置的":["50.30"],"对模块进行翻译":["50.30"],"再找出该模块依赖的模块":["50.30"],"再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理":["50.30"],"io":["52.0"],"的方式劫持":["54.1"],"操作":["54.1"],"然后代理到":["54.1"],"webcomponent":["54.1"],"shadowroot":["54.1"],"容器中":["54.1"],"lasteditors":["55.0","56.0","57.0","65.0","75.0","78.0","80.0","81.0","82.0","86.0","87.0","89.0","94.0","99.0","103.0","104.0","106.0","107.0","108.0","112.0","113.0","114.0","115.0"],"margin":["55.1"],"不包含border和padding":["55.2"],"相当于box":["55.2"],"size":["55.2"],"padding":["56.2"],"上下不影响":["56.4"],"换行都折叠成一个空格":["57.1"],"向文本流前面带相同float属性的元素对齐":["57.2"],"如果没有就向前直到找到块级元素排在其后面":["57.2"],"浮动元素后隔添加元素的带上clear":["57.3"],"内联元素本身的特性":["58.0"],"absolute会影响宽高":["58.0"],"内联可设宽高":["58.0"],"块级可内容撑开":["58.0"],"不脱离文本流":["58.0"],"还在文本流中占据原来的位置":["58.0"],"定位偏移自身移动不影响其他的兄弟元素重排":["58.0"],"提升层级":["58.0"],"z":["58.0"],"index只能在relative和absolute":["58.0"],"fixed有效":["58.0"],"lastedittime":["59.0","63.0","65.0","69.0","79.0","85.0","86.0","95.0"],"dispaly":["59.1"],"inline":["59.1"],"作用在子元素上":["59.2"],"css":["59.2"],"body":["59.2"],"wrap":["59.2"],"width":["59.2"],"overflow":["59.2"],"另一边overflow":["59.4"],"05":["60.0","62.0","72.0"],"filepath":["60.0","62.0","66.0","68.0","71.0","96.0","97.0","98.0","110.0"],"进击的面试":["60.0","62.0","66.0","71.0","74.0","98.0","116.0"],"的程序可以访问该cookie":["61.0"],"则本域名下contextpath都可以访问该cookie":["61.0"],"注意最后一个字符必须为":["61.0"],"domain":["61.0"],"可以访问该cookie的域名":["61.0"],"google":["61.0"],"com":["61.0","86.8"],"则所有以":["61.0"],"js监听复制和粘贴":["62.0"],"md":["62.0","66.0","70.0","71.0","73.0","74.0","100.0","105.0","116.0"],"非标准api":["63.2"],"就会在任务队列里面找任务":["63.3"],"等排到时执行了promise":["63.4"],"then添加进微任务":["63.4"],"163f35f70dc06fcd":["63.5"],"事件驱动的编程方式":["63.6"],"提供i":["63.6"],"o的事件循环和异步回调":["63.6"],"扮演着nodejs与文件":["63.6"],"网络等异步任务的桥接角色":["63.6"],"非i":["63.6"],"定时器":["63.6"],"执行pending":["63.8"],"在适当的情况下回阻塞在这个阶段":["63.8"],"check":["63.8"],"先进先出":["63.9"],"最后通用阶段":["63.9"],"pending":["63.9"],"callback":["63.9"],"检查是否有pending的i":["63.9"],"o回调":["63.9"],"有就执行":["63.9"],"promise":["63.10","95.1"],"res":["63.10","78.3","91.0"],"rej":["63.10"],"返回值不是":["64.0"],"opratecach":["64.0"],"opratefina":["64.0"],"如果没有等待任务就直接调出":["64.0"],"作为返回的对象的value属性值":["65.1"],"c":["65.2"],"async和await":["66.0"],"resolve":["66.1","95.1"],"then":["66.1"],"data":["66.1"],"递归执行":["66.1"],"实现自动":["66.1"],"开启执行":["66.1"],"可以给每个":["66.2"],"后的":["66.2"],"fpsconfig":["67.0"],"lasttime":["67.0"],"performance":["67.0"],"now":["67.0"],"是一个浏览器提供的api":["67.0"],"lastfametime":["67.0"],"frame":["67.0"],"fpslist":["67.0"],"全局变量":["69.1"],"活在作用域中":["69.2"],"当作用域结束时":["69.3"],"js执行上下文":["70.0"],"创建阶段":["70.0"],"生成变量对象vo":["70.0"],"作用域":["71.0"],"控制变量和函数的可见范围和生命周期称为作用域":["71.0"],"scope":["71.1"],"包括形参":["72.1"],"this指向":["73.0"],"js中this指向":["73.0"],"谁调用指向谁":["73.0"],"跟所处作用域无关":["73.0"],"全局或者函数内部执行":["73.0"],"open":["73.0"],"null和undefined":["74.0"],"null和undefied":["74.0"],"目前":["74.0"],"null和undefined基本是同义的":["74.0"],"09":["75.0"],"null":["75.1"],"tostring":["75.4","78.3"],"contractor":["75.5"],"字符串":["76.0"],"is":["76.1"],"not":["76.1"],"defined":["76.1"],"for":["76.1"],"canvas":["77.1"],"可加载类型audio":["77.1"],"document内嵌html页":["77.1"],"fetch":["77.1"],"arraybuffer":["77.1"],"json":["77.1"],"font":["77.1"],"image":["77.1"],"video":["77.1"],"worker":["77.1"],"web":["77.1"],"worker或shared":["77.1"],"mime类型":["77.1"],"浏览器将使用type属性来判断它是否支持这一资源":["77.1"],"如果浏览器支持这一类型资源的预加载":["77.1"],"下载将会开始":["77.1"],"否则便对其加以忽略":["77.1"],"加载完立即执行":["77.2"],"执行阻断解析":["77.2"],"所以不能保证html全部解析完成":["77.2"],"一旦下载完":["77.2"],"渲染引擎就会中断渲染":["77.2"],"执行这个脚本以后":["77.2"],"遇到script":["77.3"],"阻断解析":["77.3"],"加载完成后":["77.3"],"直接执行":["77.3"],"遇到link":["77.3"],"不阻断解析":["77.3"],"其他也跟着修改":["78.1"],"concat":["78.2","85.2","91.0"],"数组合并":["78.2"],"newarr":["78.2"],"slice":["78.3"],"deepcopy":["78.3"],"如果删除失败":["79.1"],"返回false":["79.1"],"has":["79.1"],"返回一个布尔值":["79.1"],"foo":["79.6"],"setiter":["79.7","79.8"],"方法一":["79.9"],"es6的":["79.9"],"后台判断是否最新的":["80.1","80.3"],"有就返回新的":["80.1","80.3"],"没就返回304用缓存的":["80.1","80.3"],"优先级":["80.1","80.3"],"会多一次协商请求":["80.1"],"带上和协商缓存相关的请求头":["80.1"],"sprites图片":["80.2"],"每次请求带上if":["80.3"],"since或者if":["80.3"],"undefined":["81.1"],"此外任何其他组合":["81.1"],"都不相等":["81.1"],"js":["81.1","89.5","89.15","100.0"],"true":["81.1"],"number":["81.1"],"boolean":["81.1"],"表单方式提交":["82.1"],"输入js代码":["82.1"],"表单没做过滤转义":["82.1"],"因为是get请求":["82.1"],"cookies设置httponly为true":["82.2"],"通过存储在cookies里的信息":["82.3"],"请求自动带上":["82.3"],"添加请求参数双重验证":["82.4"],"导致这段sql命令":["82.5"],"关键字过滤转义":["82.6"],"在i层碎了":["83.0"],"说明第一次查找的大致范围为i":["83.0"],"然后在从i":["83.0"],"10开始往上查找":["83.0"],"直到在这个范围找到":["83.0"],"但比如在16和96层是寻找的位置":["83.0"],"在16":["83.0"],"第一个鸡蛋找2次":["83.0"],"第二个鸡蛋找6次":["83.0"],"共8次":["83.0"],"在96":["83.0"],"第一个鸡蛋找10次":["83.0"],"第二枚鸡蛋6次":["83.0"],"共16次":["83.0"],"ac1":["84.0"],"ac2":["84.0"],"可以索引":["85.1"],"method":["86.1"],"password":["86.1"],"setrequestheader":["86.1"],"服务端将接口返回数据拼凑到callback函数中":["86.2"],"resource":["86.3"],"sharing":["86.3"],"方便当前域cookie写入":["86.4"],"实现数据的转发":["86.5"],"例如news":["86.8"],"maps131":["86.8"],"调用a的方法":["86.9"],"比如callback":["86.9"],"a内就会执行这个方法":["86.9"],"iframe":["86.9"],"第1次加载跨域页":["86.10"],"并留存数据于window":["86.10"],"onload":["86.10"],"第2次onload":["86.10"],"同域proxy页":["86.10"],"成功后":["86.10"],"读取同域window":["86.10"],"name中数据":["86.10"],"端口号":["86.11"],"也可以设置为":["86.11"],"表示可以传递给任意窗口":["86.11"],"如果要指定和当前窗口同源的话设置为":["86.11"],"利用iframe":["86.11"],"contentwindow":["86.11"],"传递数据":["86.11"],"argunments":["87.1"],"enum":["88.1","88.3"],"隐式原型上查找":["88.2"],"即它的构造函数的prototype":["88.2"],"es6模块":["89.1"],"import":["89.1"],"stat":["89.1"],"exists":["89.1"],"readfile":["89.1"],"streamv2":["89.2"],"streamlatestversion":["89.2"],"输出default":["89.2"],"相当于把default后面的值赋值给default":["89.2"],"混合输出":["89.2"],"加动态改变":["89.2"],"c3":["89.2"],"num":["89.2"],"引入重命名":["89.3"],"myfoo":["89.4"],"整体输出":["89.4"],"下面是一个例子":["89.5"],"main":["89.5","89.14"],"document":["89.5","101.0"],"每个文件就是一个模块":["89.7"],"打印出来的module":["89.8"],"exports":["89.11"],"message":["89.11"],"hi":["89.11"],"则表示加载的是一个默认提供的核心模块":["89.12"],"位于node的系统安装目录中":["89.12"],"或者一个位于各级node":["89.12"],"modules目录的已安装模块":["89.12"],"全局安装或局部安装":["89.12"],"举例来说":["89.12"],"脚本":["89.12"],"projects":["89.12"],"js执行了require":["89.12"],"bar":["89.12"],"命令":["89.12"],"加载同一个模块":["89.13"],"第二次加载的时候":["89.13"],"为输出的对象添加了一个message属性":["89.13"],"但是第三次加载的时候":["89.13"],"这个message属性依然存在":["89.13"],"这就证明require命令并没有重新加载模块文件":["89.13"],"而是输出了缓存":["89.13"],"b2":["89.14"],"模块输出的是一个值的拷贝":["89.16"],"并且回缓存加载":["89.16"],"es6":["89.16"],"模块输出的是值的引用":["89.16"],"变量必须声明后再使用":["90.0"],"函数的参数不能有同名属性":["90.0"],"否则报错":["90.0"],"不能使用with语句":["90.0"],"不能对只读属性赋值":["90.0"],"reducearr":["91.0"],"newarr1":["91.0"],"reduce":["91.0"],"item":["91.0"],"通常不是来自框架自身":["92.0"],"可能出现在":["92.0"],"组件通过原生方法选择了组件的dom对象":["92.0"],"然后赋值给了组件外的变量":["92.0"],"组件销毁后":["92.0"],"内存中还保留着选择的组件dom":["92.0"],"scopedslots":["93.0"],"就可以访问到":["93.0"],"父组件里的":["93.0"],"插槽函数":["93.0"],"如果是":["93.0"],"普通插槽":["93.0"],"就直接调用函数生成":["93.0"],"vnode":["93.0"],"作用域插槽":["93.0"],"就带着":["93.0"],"props":["93.0"],"去调用函数生成":["93.0"],"引用组件":["93.0"],"template":["93.0"],"div":["93.0"],"app":["93.0","106.5"],"iamslot":["93.0"],"可以通过":["94.1"],"标签":["94.1"],"并设置":["94.1"],"href":["94.1"],"step":["94.2"],"前进后退":["94.2"],"02":["97.0","98.0"],"该删删":["98.1"],"改增增":["98.1"],"还有简单的属性替换":["98.1"],"默认是false":["99.1"],"再次引用该变量":["99.2"],"如果关联的劫持变量没改变":["99.2"],"0object":["100.0"],"defineproperty":["100.0"],"define会对这个对象的属性监听":["100.1"],"对于对象":["100.2"],"对象属性的增删":["100.2"],"text":["101.0"],"queryselector":["101.0"],"obj":["101.0"],"修改对象属性或者数组元素":["101.1"],"不触发set":["101.1"],"从object":["102.0"],"defineproperty改成了用proxy劫持数据":["102.0"],"未使用的data":["102.0"],"不再监听":["102.0"],"新增响应式api":["102.0"],"可在setup内映射生命周期":["102.0"],"watch这些":["102.0"],"webpack的运行流程是一个串行的过程":["105.0"],"从启动到结束会依次执行以下流程":["105.0"],"读取命令和config文件":["105.0"],"初始化本次构建的参数":["105.0"],"会执行new":["105.0"],"plugin":["105.0"],"outputdir":["106.1"],"appvue":["106.1"],"打包总出口":["106.1"],"assetsdir":["106.1"],"js等资源文件出口":["106.1"],"indexpath":["106.1"],"index":["106.1"],"html文件出口":["106.1"],"devserver":["106.1"],"port":["106.1"],"headers":["106.1"],"access":["106.1"],"control":["106.1"],"allow":["106.1"],"origin":["106.1"],"configurewebpack":["106.1"],"output":["106.1"],"library":["106.1"],"librarytarget":["106.1"],"umd":["106.1"],"webpack":["106.1"],"config":["106.1"],"entry":["106.4"],"localhost":["106.4"],"container":["106.4"],"router":["106.5"],"h":["106.5"],"mount":["106.5"],"子应用需要用到的组件":["106.5"],"组件创建时会触发":["106.5"],"将父组件传进来的值附上":["106.5"],"微应用helloworld":["106.5"],"modules":["107.2"],"请求者应当继续提出请求":["108.1"],"服务器返回此代码则意味着":["108.1"],"已接受":["108.2"],"服务器已接受请求":["108.2"],"但尚未处理":["108.2"],"head":["108.3"],"请求的响应":["108.3"],"时":["108.3"],"会自动将请求者转到新位置":["108.3"],"类似":["108.4"],"但却指定了请求者应当使用代理进行授权":["108.4"],"如果服务器返回此响应":["108.4"],"服务器还会指明请求者应当使用的代理":["108.4"],"请求超时":["108.4"],"服务器等候请求时发生超时":["108.4"],"冲突":["108.4"],"服务器无法识别请求方法时可能会返回此代码":["108.5"],"错误网关":["108.5"],"服务器作为网关或代理":["108.5"],"x":["111.0"],"中":["111.0"],"在一个元素上同时使用":["111.0"],"08":["115.0"],"路线":["116.0"],"vue原理":["116.0"],"vue双向数据绑定原理":["116.0"]},{"0":["15.9","18.2","20.1","44.2","63.5","90.0","93.0"],"1":["6.3","13.2","74.0","79.5"],"2":["7.4","15.3","16.5","26.5","31.2","50.4","55.2","57.1","59.4","70.0","72.1","85.2","86.11","92.0","101.0","101.1","105.0","106.5","116.0"],"3":["8.7","9.2","15.12","16.2","17.5","18.2","21.2","21.4","24.1","27.13","27.21","35.8","39.1","50.9","50.18","57.2","63.6","70.0","77.2","80.3","82.6","83.0","89.1","89.16","99.2","100.2","101.0","105.0","111.0","116.0"],"4":["1.3","9.3","15.2","15.11","17.1","22.7","25.0","26.4","36.0","37.3","47.1","63.6","75.5","80.1","105.0","106.1","116.0"],"5":["1.3","1.4","14.2","16.3","19.2","19.3","20.2","26.2","37.3","42.0","60.0","82.2","90.0","98.1","102.0"],"6":["16.3","20.2","37.4","41.1","46.2","50.12","50.30","90.0"],"7":["1.5","90.0"],"8":["1.5","63.9","77.3"],"9":["71.0","77.3","80.2"],"11":["89.2"],"12":["63.0"],"15":["88.1"],"16":["86.0"],"18":["72.0"],"22":["79.0"],"23":["63.0"],"27":["59.0","66.0"],"29":["66.0"],"33":["89.2"],"34":["88.0"],"36":["95.0"],"38":["109.0"],"41":["85.0","95.0"],"42":["96.0"],"43":["97.0"],"44":["89.2"],"48":["59.0"],"50":["66.0"],"51":["69.0"],"55":["79.0","89.2"],"56":["109.0"],"57":["110.0"],"59":["69.0"],"100":["89.2"],"204":["108.2"],"222":["50.14"],"302":["108.3"],"303":["108.3"],"333":["50.14"],"410":["108.4"],"411":["108.4"],"412":["108.4"],"503":["108.5"],"1000":["50.14","89.9"],"3000":["89.2"],"999999999":["30.2"],"可以指定动画在元素滚动时运行":["0.0"],"keyframes":["0.0"],"的进度也会跟随滚动运行":["0.0"],"属性设置相关滚动属性":["0.1"],"然后赋值给":["0.1"],"style":["0.3","25.0","48.3"],"margin":["0.3"],"right":["0.3"],"10px":["0.3"],"等属性做一些特殊的布局":["1.1"],"比如垂直居中":["1.1"],"的简写":["1.3"],"justify":["1.3"],"content":["1.3","55.2","62.0","86.1"],"定义沿着弹性容器的主轴和网格容器的行向轴分配内容元素之间和周围的空间":["1.3"],"上面三个属性的简写":["1.4"],"order":["1.4"],"属性规定了弹性容器中的可伸缩项目在布局时的顺序":["1.4"],"元素按照":["1.4"],"属性的值的增序进行布局":["1.4"],"拥有相同":["1.4"],"属性值的元素按照它们在源代码中出现的顺序进行布局":["1.4"],"min":["1.5"],"xxx":["1.5"],"属性覆盖":["1.5"],"shrink":["1.5"],"仅在单行生效":["1.5"],"值单数字相当于":["1.5"],"vmax":["2.0","3.1"],"scss":["2.2"],"background":["2.2"],"视口":["3.0"],"postcss":["3.2"],"blank":["4.0"],"rel":["4.0"],"noopener":["4.0"],"noreferrer":["4.0"],"img":["4.0"],"width":["4.0"],"nan":["6.2"],"因为内部使用":["6.2"],"length":["6.3","29.1","64.0"],"返回下标和":["6.3"],"用对象原型转字符串的方式判断":["7.1"],"正常情况下如果执行完为":["7.1"],"array":["7.2","91.0"],"正常情况下为":["7.3"],"iframe":["7.4"],"构造函数提供了这个方法用来准确判断是否为数组":["7.5"],"item":["8.1","8.2","8.6","64.0"],"index":["8.1"],"self":["8.1"],"定义空数组往里加没有的":["8.2"],"不能用push":["8.2"],"利用set数据自动去除重复元素的特性":["8.3"],"const":["8.3","22.6","102.0"],"from":["8.4","89.1"],"new":["8.4","26.1","32.0","72.3","79.10"],"懒加载分批处理":["8.7"],"二参不填":["9.2"],"截取到末尾":["9.2"],"数大于":["9.3"],"差集":["10.0"],"a":["10.0","13.5","29.2","71.0"],"b去除a里面b也有的":["10.0"],"e":["10.0"],"push":["11.1","46.2","64.0"],"return":["11.2","16.5","47.3","101.0","106.1"],"totree":["11.2"],"arr":["11.2","78.2"],"rootid":["11.2"],"let":["11.2","71.0"],"obj":["11.2","73.0","100.0"],"tree":["11.2","36.0","50.21","77.3"],"i":["11.2","63.6","63.9"],"preindex":["12.0"],"while":["12.0","32.0"],"apply":["13.2","17.3","24.2"],"比如":["13.3"],"math":["13.3"],"max":["13.3"],"call":["13.4","17.6","75.4"],"二参及后面是正常参数列表":["13.4"],"bind":["13.4"],"用于处理异步操作":["14.1"],"我们可以像处理同步代码一样处理异步代码":["14.2"],"包括使用条件语句":["14.2"],"循环等控制流语句":["14.2"],"这使得异步代码的控制流更加自然和直观":["14.2"],"易于理解和编写":["14.2"],"支持":["14.2","36.0"],"promise":["14.2"],"链的简化":["14.2"],"的":["14.3","35.6","35.8","94.1"],"需要":["14.3"],"兼容value的值为promise":["14.4"],"resolve":["14.4"],"then":["14.4","95.1"],"data":["14.4"],"递归执行":["14.4"],"实现自动":["14.4"],"开启执行":["14.4"],"promisecreater":["14.4","66.1"],"它是":["15.1"],"web":["15.1"],"加以标记":["15.2"],"无连接":["15.2"],"无连接的含义是限制每次连接只处理一个请求":["15.2"],"服务器处理完客户的请求":["15.2"],"并收到客户的应答后":["15.2"],"即断开连接":["15.2"],"不验证身份":["15.4"],"开始被":["15.5"],"ietf":["15.5"],"标准化并改名":["15.5"],"发展至今已经有":["15.5"],"数据传输被窃听":["15.7"],"证书":["15.8"],"颁发证书和公钥私钥":["15.8"],"连接的问题":["15.9"],"引入了帧和流两个概念":["15.9"],"流是由多个帧组成的":["15.9"],"一个":["15.9"],"连接里可以包含多个流":["15.9"],"既可以发送多个请求":["15.9"],"或更高版本的加密协议":["15.11"],"提供了更强的安全性保护":["15.11"],"有效防止了中间人攻击":["15.11"],"头部压缩":["15.11"],"潜在的兼容性问题":["15.12"],"由于":["15.12"],"链中的任何错误":["16.2"],"更好的可读性和可维护性":["16.2"],"提供了一种更直观的方式来表示异步操作的状态和结果":["16.2"],"使得代码更容易阅读和理解":["16.2"],"finally":["16.3"],"加上链式调用的":["16.4"],"onfulfilled":["16.4"],"方法和":["16.4"],"onrejected":["16.4"],"方法映射成一个对象":["16.4"],"然后用一个处理函数去执行这个对象的方法":["16.4"],"只要":["16.4"],"因为是":["16.5"],"所以不执行":["16.5"],"将这个对象加进回调列表里去":["16.5"],"等待调用":["16.5"],"最后将这个新的":["16.5"],"出去":["16.5","47.3"],"这时如果后续还有链式调用":["16.5"],"那么使用的就是新":["16.5"],"的方法了":["16.5"],"然后执行":["16.5"],"执行将回调函数的返回值缓存在这个新的":["16.6"],"里了":["16.6"],"如果后续还有链式调用":["16.6"],"拿的是这个回调函数的返回值":["16.6"],"但因为":["16.6"],"本身功能定义":["16.6"],"自身回调函数的返回值不参与链式调用":["16.6"],"所以又主动调用了下自身的":["16.6"],"方法":["16.6","27.12","27.16","40.2","44.3","66.2"],"将调用":["16.6"],"时传入的上一个的返回值":["16.6"],"在这返回":["16.6"],"相当于跳了一步返回":["16.6"],"让后续的链式调用":["16.6"],"能接着":["16.6"],"前的值":["16.6"],"继续执行":["16.6"],"在事件和方法调用里":["17.1"],"指向调用事件的元素和对象":["17.1"],"严格模式下指向":["17.1"],"获取事件触发的元素":["17.2"],"方法来实现":["17.3"],"创建库和框架":["17.3"],"当你创建库或框架时":["17.3"],"可以帮助你编写更通用的代码":["17.3"],"例如":["17.3"],"jquery":["17.3"],"的许多方法都使用":["17.3"],"来引用当前选择的":["17.3"],"元素":["17.3"],"因此":["17.4"],"在使用":["17.4"],"里直接定义的箭头函数":["17.5"],"也是指向执行":["17.5"],"的函数对象":["17.5"],"foo4":["17.6"],"person2":["17.6"],"所以根据这个判断":["18.1"],"可以帮助理解":["18.1"],"是一个没有地址指向的对象":["18.1"],"json":["18.2","50.3","50.26"],"node":["19.1","50.23","89.8","89.12"],"并在调用栈为空时将任务从队列中推送到调用栈以供执行":["19.2"],"异步任务分为宏任务":["19.2"],"包括":["19.2","50.10"],"script":["19.2"],"整体代码":["19.2"],"setinterval":["19.2"],"setimmediate":["19.2","39.1","63.6","63.8","63.10"],"http2":["20.1"],"协议":["20.1"],"this":["20.2","21.6","24.2"],"因为原型对象他本身也是一个对象":["21.1"],"所以他也有原型":["21.1"],"往前推直到":["21.1"],"null":["21.1","34.5","78.3","89.8"],"是隐式的直接打印式看不到的":["21.2"],"在实例对象的隐式原型":["21.3"],"proto":["21.3","75.3"],"就指向了新对象":["21.4"],"如果有以这个函数作为构造函数的实例对象":["21.5"],"那这个实例可以直接使用原型对象":["21.5"],"people":["21.6"],"name":["21.6","33.2","61.0","93.0","106.5"],"age":["21.6","88.1","88.4"],"函数":["22.1","22.3","89.7"],"不支持":["22.2"],"块级作用域":["22.2"],"预编译时会去统计哪些变量":["22.3"],"经典问题":["22.4"],"会被自动提升到全局做声明":["22.5"],"不处理":["22.7"],"css":["22.8","50.2","50.5","50.16","54.1"],"error":["22.8"],"cannot":["22.8"],"access":["22.8"],"console":["22.9","75.2","91.0","101.0"],"log":["22.9","75.2","79.8","91.0","101.0"],"inner":["22.9","59.2"],"全局变量的引用类型":["23.1"],"会一直存在应用的生命周期里":["23.1"],"等于":["23.2"],"如果标记有经历过一次的":["23.7"],"scavenge":["23.7"],"算法":["23.7","41.1"],"else":["24.2","64.0","78.3","86.10"],"执行":["25.0","47.3"],"加载完成":["25.0","77.3"],"停止解析":["25.0"],"立即执行":["25.0"],"遇到":["25.0"],"使用":["26.1"],"调用它们会引发":["26.1"],"因为许多简单的函数不需要":["26.2"],"没有":["26.2"],"由于箭头函数没有自己的":["26.2"],"绑定":["26.2"],"它们也没有":["26.2"],"关键字用于访问对象字面量或类的原型":["26.2"],"yield":["26.4"],"关键字":["26.4"],"显示绑定也无法改变":["26.5"],"创建类":["27.0"],"由特定类":["27.2"],"暴露获取实例方法":["27.2"],"缺点":["27.5","27.9","27.15","27.18","27.23","27.31"],"实现复杂":["27.6"],"但使用简单":["27.6"],"可能增加系统的复杂性":["27.9"],"如果过度使用工厂模式":["27.9"],"想使用已经存在的对象":["27.13"],"客户端代码可以通过适配器来调用被适配者的方法":["27.15"],"而无需知道被适配者的具体实现细节":["27.15"],"这有助于降低客户端代码与被适配者之间的耦合度":["27.15"],"可能增加代码的复杂性":["27.15"],"引入适配器模式可能会增加系统的类数量":["27.15"],"从而增加代码的复杂性":["27.15"],"可以考虑策略模式动态选择算法":["27.21"],"可扩展性好":["27.23"],"满足开闭原则":["27.23"],"observer":["27.24"],"不灵活":["27.27"],"被激活事件的对象":["27.28"],"setter":["27.30"],"事件通道":["27.30"],"互不持有":["27.31"],"都依赖于抽象":["27.31"],"延长局部变量的生命周期":["28.2"],"将接受返回的变量置为":["28.3"],"使用时参数数量相等":["29.1"],"if":["29.1","78.3"],"数字每3位逗号分隔":["30.3"],"substring":["30.4"],"返回的变量":["30.4"],"r":["30.4"],"reverse":["30.4"],"返回截取字符串":["31.2"],"内部会做参数大小比较":["31.3"],"将更小的置为":["31.3"],"reader":["32.0"],"pipethrough":["32.0"],"textdecoderstream":["32.0"],"getreader":["32.0"],"user2":["33.1"],"但不支持":["34.1"],"webpack":["34.1"],"工作流":["34.2"],"解析":["34.2"],"将代码转化成抽象语法树":["34.2"],"树上有很多的":["34.2"],"estree":["34.2"],"有哪些导入导出":["34.3"],"使用哪些变量":["34.3"],"哪些是自身声明哪些是导入的":["34.3"],"创建作用域链等":["34.3"],"这里就会体现":["34.3"],"treeshaking":["34.3"],"没记录未使用":["34.3"],"设计出了一套完整的插件机制":["34.4"],"将自身的核心逻辑与插件逻辑分离":["34.4"],"将依次运行":["34.5"],"直到返回一个非":["34.5"],"或非":["34.5"],"undefined":["34.5","79.6"],"transform":["34.7","35.14"],"augumentchunkhash":["34.8"],"resolvefileurl":["34.8"],"resolveimportmeta":["34.8"],"也就是异步串行钩子":["34.9"],"作用是对加载后的模块内容进行自定义的转换":["34.9"],"入参分别为模块代码":["34.9"],"模块":["34.9"],"返回一个包含":["34.9"],"code":["34.9"],"代码内容":["34.9"],"map":["34.9","46.4"],"内容":["34.9"],"属性的对象":["34.9"],"当然也可以返回":["34.9"],"来跳过当前插件的":["34.9"],"处理":["34.9"],"需要注意的是":["34.9"],"分块":["34.10"],"hmr":["34.10","35.1","35.6","35.8"],"这些功能":["34.10"],"在分析":["34.10"],"ast":["34.10"],"如速度快到惊人的":["35.1"],"模块热更新":["35.1"],"bundle":["35.3"],"的构建工具":["35.3"],"单只是针对业务源码":["35.3"],"第三方工具库还是需要打包的":["35.3"],"但是是使用":["35.3"],"来完成这一过程":["35.3"],"为什么需要预构建呢":["35.3"],"将其他格式例如":["35.3"],"commonjs":["35.3"],"转化为":["35.3"],"esm":["35.3","35.6"],"格式":["35.3"],"使其可以在浏览器上正常加载":["35.3"],"将第三方库的分散文件合并到一起":["35.3"],"减少引入时的":["35.3"],"http":["35.3","86.9","86.10","106.1"],"请求":["35.3"],"enum":["35.4"],"等语法":["35.4"],"并提供插件功能":["35.5"],"自定义产出":["35.5"],"然后将分散的":["35.8"],"整合成一个":["35.8"],"减少模块请求":["35.8"],"然后是实现热更新":["35.8"],"基于":["35.8"],"需要将相关依赖全部编译":["35.9"],"劣势":["35.9"],"是通用的":["35.11"],"resolved":["35.12"],"load":["35.12","35.14"],"实例":["35.13"],"添加中间件":["35.13"],"transformindexhtml":["35.13"],"和":["35.14","50.16"],"相信大家学过":["35.14"],"值的用户插件":["35.15"],"也叫普通插件":["35.15"],"开发阶段和生产阶段涉及引擎使用不统一":["35.16"],"监听到文件修改":["35.17"],"构建成新模块":["35.17"],"生成新的编译标识":["35.17"],"然后旧就模块对比":["35.17"],"确定更新部分":["35.17"],"使用工具将未使用的代码删除":["35.18"],"在将模块生成":["35.18"],"由于逻辑分布在不同的选项中":["36.0"],"类型推断和检查可能会变得复杂":["36.0"],"尤其是在使用":["36.0"],"typescript":["36.0"],"时":["36.0","111.0"],"对":["36.0"],"支持更好":["36.0"],"由于所有的逻辑都可以在一个函数内部定义":["36.0"],"因此类型推断和检查更加简单和准确":["36.0"],"树摇":["36.0"],"shaking":["36.0"],"js":["37.1","42.0","61.0","71.0","92.0","102.0"],"等前端框架中":["37.1"],"但页面结构复杂":["37.2"],"数据又多时":["37.2"],"则删除旧节点并重新创建新节点进行替换":["37.3"],"节点相同":["37.3"],"则进一步比较子节点":["37.3"],"算法进行良好的集成":["37.4"],"那么可能会出现性能问题或不可预期的行为":["37.4"],"不支持跨框架比较":["37.4"],"算法是专门为":["37.4"],"的虚拟":["37.4"],"则把子节点新增上去":["37.5"],"如果都有子节点":["37.5"],"则调用":["37.5"],"updatechildren":["37.5"],"方法进行新旧子节点的对比":["37.5"],"第五步":["37.5"],"使用双端比较法":["37.5","41.1"],"生成一个对应再旧节点数组的下标":["37.6"],"再遍历一遍旧节点":["37.6"],"将":["37.6"],"相同的做差异比对":["37.6"],"再最终移动替换节点时":["37.6"],"会使用贪心算法加二分查找法":["37.6"],"替换之后记录前驱索引":["37.7"],"记录每个人的前驱节点":["37.7"],"通过最后一项进行回溯":["37.7"],"last":["37.7"],"找到最后一项":["37.7"],"倒叙追溯":["37.7"],"最后一项是确定的":["37.7"],"实例并对其指定":["39.1"],"节点进行监视":["39.1"],"可以监听到节点的变化":["39.1"],"并在变化发生后异步执行回调":["39.1"],"在某些环境下":["39.1"],"如":["39.1"],"ie10":["39.1"],"可以用来替代":["39.1"],"textarea":["40.1"],"select":["40.1"],"但在组件内部可以使用":["40.2"],"model":["40.2"],"钩子":["40.2"],"prop":["40.2"],"自定义属性的名字":["40.2"],"event":["40.2"],"自定义方法名字":["40.2"],"对应这个":["40.2"],"里还有":["40.2"],"sync":["40.2"],"fallback":["41.1"],"loading":["41.1"],"在编译时使用了静态节点提前处理的方式":["41.1"],"静态节点提升":["41.1"],"做了静态标记":["41.1"],"更新不重新计算和比较":["41.1"],"最长子序列的索引":["41.1"],"子节点比较":["41.1"],"头和头":["41.1"],"尾和尾":["41.1"],"头和尾":["41.1"],"尾和头":["41.1"],"匹配到再位移起始结束节点下标":["41.1"],"然后再利用":["41.1"],"key":["41.1","46.4","100.0"],"执行转换函数去生成":["42.0"],"抽象语法树":["42.0"],"最后对":["42.0"],"不监听其内元素值改变":["44.2"],"true":["44.2","99.1","106.5"],"set":["44.3","46.4","79.1","79.2","100.2"],"内可以使用异步函数":["44.3"],"这使得你可以在回调函数中执行比较或复杂的逻辑":["45.0"],"支持延迟执行回调函数":["45.0"],"因为它是为了处理副作用而设计的":["45.1"],"通常用于执行一些异步操作或直接更新":["45.1"],"dom":["45.1"],"在实际应用中":["45.2"],"选择":["45.2"],"还是":["45.2"],"props":["46.1"],"computed":["46.1"],"的数据":["46.1"],"因为数组的长度是不定的":["46.2"],"过长去遍历劫持是很耗性能的":["46.2"],"所以针对数组":["46.2"],"observe":["46.2"],"并不是使用和对象一样的方式劫持":["46.2"],"内部如果判断属性值是数组":["46.2"],"会自定义":["46.2"],"pop":["46.2"],"shift":["46.2"],"unshift":["46.2"],"内部做数据劫持":["46.3"],"effect":["46.3"],"集合查找有没有以改对象为":["46.4"],"的属性":["46.4"],"没就创建一个":["46.4"],"集合":["46.4"],"然后在这个":["46.4"],"集合里查找有没有传入":["46.4"],"函数重载":["47.1"],"执行不同的方法处理":["47.1"],"options":["47.1"],"参数和":["47.1"],"id":["47.1","62.0","79.5","86.9"],"然后将":["47.1"],"state":["47.1","94.2"],"内部将":["47.3"],"当做参数":["47.3"],"传入":["47.3"],"里的每个方法":["47.3"],"这个操作":["47.3"],"让":["47.3"],"同时提供了":["47.4"],"reset":["47.4"],"精确度":["48.3"],"数值几位就是几位小数":["48.3"],"依赖图":["50.1"],"dependency":["50.1"],"代码":["50.2"],"use":["50.4"],"filename":["50.5"],"assets":["50.5"],"识别":["50.5"],"loader":["50.5"],"normal":["50.6"],"行内":["50.6"],"将禁用其他类型的":["50.8"],"只要内联":["50.8"],"同步处理必须返回":["50.9"],"buffer":["50.9"],"或者":["50.9"],"打包优化":["50.10"],"build":["50.11"],"after":["50.11"],"编译":["50.11"],"过程结束":["50.11"],"仅出现":["50.12"],"make":["50.12"],"asyncparallelbailhook":["50.12"],"异步并行熔断钩子":["50.12"],"callback":["50.14","86.11","95.1"],"必须调用":["50.14"],"sass":["50.16"],"在":["50.17","50.23","82.4"],"与旧模块做对比":["50.18"],"分析出要替换的模块":["50.18"],"技术":["50.20"],"它会在运行过程中静态分析模块之间的导入导出":["50.20"],"dce":["50.21"],"工具":["50.21"],"删除无效代码":["50.21"],"注意":["50.21"],"production":["50.22"],"serve":["50.22"],"corss":["50.23"],"env":["50.23"],"注入在":["50.23"],"path":["50.24","89.8"],"所创建的":["50.25"],"的集合":["50.29"],"根据代码的拓扑结构和配置将模块组织成不同的代码块":["50.29"],"每个代码块可以是一个独立的文件":["50.29"],"也可以与其他代码块组合成一个捆绑包":["50.29"],"使用代码分割":["50.29"],"完成模块编译":["50.30"],"在经过第":["50.30"],"步使用":["50.30"],"翻译完所有模块后":["50.30"],"得到了每个模块被翻译后的最终内容以及它们之间的依赖关系":["50.30"],"blog":["52.0"],"1190000016959011":["53.0"],"天然的":["54.1"],"隔离":["54.1"],"lastedittime":["55.0","56.0","57.0","75.0","78.0","80.0","81.0","82.0","87.0","89.0","94.0","99.0","103.0","104.0","106.0","107.0","108.0","112.0","113.0","114.0","115.0"],"panding":["55.1"],"box":["55.2"],"所以要紧挨着就不要触发这现象":["57.1"],"如果没有前面没有块级元素":["57.2"],"对齐父元素两边":["57.2"],"内":["57.3"],"absolute":["58.0"],"绝对定位":["58.0"],"相对最近的具有定位属性的上级盒子偏移":["58.0"],"如果上级没有就直到document":["58.0"],"影响块级和内联元素的特性":["58.0"],"脱离文本流":["58.0"],"不在文本流中占据位置":["58.0"],"08":["59.0"],"block":["59.1"],"table":["59.1"],"cell触发":["59.1"],"用个父盒子包裹其中一个元素":["59.3"],"重排":["60.0"],"回流":["60.0"],"和重绘的优化":["60.0"],"md":["60.0","68.0","72.0","88.0","96.0","97.0","98.0","110.0"],"结尾的域名都可以访问该cookie":["61.0"],"注意第一个字符必须为":["61.0"],"设置cookies":["61.0"],"document":["61.0"],"cookie":["61.0"],"escape":["61.0"],"value":["61.0","79.7","79.8"],"expires":["61.0"],"exp":["61.0"],"html":["62.0"],"body":["62.0"],"p":["62.0","77.1","101.0"],"我是复制的内容":["62.0"],"09":["63.0"],"filepath":["63.0","69.0","72.0","79.0","88.0","95.0","109.0"],"微任务":["63.2"],"process":["63.2","63.6","63.10"],"nexttick":["63.2","63.6","63.10"],"如果有微任务":["63.3"],"就会先执行微任务":["63.3"],"再次排到await才全部执行完成":["63.4"],"73版本之后":["63.4"],"imageview2":["63.5"],"w":["63.5","76.1"],"microtask":["63.6"],"网路i":["63.6"],"执行setimmediate":["63.8"],"是将事件插入到事件队列尾部":["63.8"],"主线程和事件队列的函数执行完成之后立即执行setimmediate指定的回调函数":["63.8"],"的callback":["63.8"],"idle":["63.9"],"prepare这俩关系不大":["63.9"],"不管先":["63.9"],"poll阶段":["63.9"],"检测有没有尚未到期的回调":["63.9"],"定时器":["63.9"],"o":["63.9","101.0"],"setimmediate1":["63.10"],"nexttick1":["63.10"],"循环调用等待任务":["64.0"],"根据类型用方法调用":["64.0"],"foreach":["64.0","79.1"],"res":["64.0"],"rej":["64.0"],"fina":["64.0"],"等待状态":["64.0"],"将链式调用加进等待任务":["64.0"],"待状态改变循环调用":["64.0"],"解决状态直接执行then":["64.0"],"并将返回值赋给resparam":["64.0"],"然后当作下一链式调用的参数":["64.0"],"07":["65.0"],"01":["65.0"],"yield表达式本身没有返回值":["65.1"],"或者说总是返回undefined":["65.1"],"end":["65.2"],"getdata":["65.2"],"app":["65.2"],"06":["66.0"],"settimeout":["66.1","89.2"],"增加":["66.2"],"catch":["66.2"],"fpsloop":["67.0"],"first":["67.0"],"diff":["67.0"],"进击的面试":["68.0","69.0","72.0","79.0","88.0","95.0","96.0","97.0","109.0","110.0"],"js变量提升":["68.0"],"所以为什么要注意":["69.1"],"局部变量打上结束标签":["69.3"],"当变量改变值之后":["69.4"],"创建arguments":["70.0"],"扫描函数声明":["70.0"],"扫描变量声明":["70.0"],"建立作用域链":["70.0"],"确定this的指向":["70.0"],"executioncontextobj":["70.0"],"js内的作用域是静态作用域":["71.0"],"并不会因为在其他作用域运行":["71.0"],"就调用其他作用域内的变量":["71.0"],"而是调用定义其作用域的变量":["71.0"],"中":["71.1"],"这个集合称之为作用域链":["71.1"],"闭包":["72.0"],"hi":["72.3"],"longstr":["72.3"],"open内this指向window":["73.0"],"open内this指向obj":["73.0"],"如果open是箭头函数":["73.0"],"则指向上一层调用者":["73.0"],"open内步执行的函数":["73.0"],"this指向window":["73.0"],"class":["73.0"],"只有一些细微的差别":["74.0"],"null表示":["74.0"],"没有对象":["74.0"],"即该处不应该有值":["74.0"],"典型用法是":["74.0"],"作为函数的参数":["74.0"],"date":["75.1"],"regexp":["75.1"],"object都返回":["75.1"],"object":["75.3"],"objdect":["75.4"],"prototype":["75.5","102.0"],"布尔值":["76.0"],"值就保存在变量指向的那个内存地址":["76.0"],"q":["76.1"],"sintel":["77.1"],"short":["77.1"],"mp4":["77.1"],"type":["77.1","78.3","86.1"],"controls":["77.1"],"source":["77.1"],"src":["77.1","86.9"],"webm":["77.1"],"your":["77.1"],"browser":["77.1"],"doesn":["77.1"],"t":["77.1"],"support":["77.1"],"html5":["77.1"],"here":["77.1"],"再继续渲染":["77.2"],"下载完就执行":["77.2"],"如果你的脚本依赖于dom构建完成是否完成":["77.2"],"则可以使用defer":["77.2"],"如果无需dom的构建":["77.2"],"那就可以放心的使用async了":["77.2"],"module":["77.2"],"script中添加此类型":["77.2"],"可在其内使用而生模块导入导出语法":["77.2"],"则构建css":["77.3"],"rule":["77.3"],"解析到body":["77.3"],"表示某个键是否在当前":["79.1"],"对象之中":["79.1"],"方法会根据集合中元素的插入顺序":["79.1"],"变量存了指针":["79.4"],"有效":["79.4"],"obj1":["79.4"],"bar":["79.6"],"next":["79.7","79.8"],"解构":["79.9"],"unique1":["79.9"],"去重转数组后":["79.9"],"unique":["79.10"],"intersect":["79.11"],"filter":["79.11"],"x":["79.11","86.1"],"浏览器service":["80.1"],"worker缓存":["80.1"],"只能在https环境下部署":["80.1"],"本地服务可以用来测试":["80.1"],"国内谷歌浏览器的支持并不完整":["80.1"],"浏览器indexdb数据库":["80.1"],"储存空间大":["80.1"],"indexeddb":["80.1"],"的储存空间比":["80.1"],"localstorage":["80.1"],"大得多":["80.1"],"一般来说不少于":["80.1"],"资源懒加载":["80.2"],"按需加载":["80.2"],"会多一次协商请求":["80.3"],"带上和协商缓存相关的请求头":["80.3"],"false":["81.1","89.8","100.0"],"string":["81.1"],"会显示在浏览器地址栏":["82.1"],"部分老旧浏览器不自动转义":["82.1"],"会直接执行js代码":["82.1"],"存储型":["82.1"],"让js无法获取":["82.2"],"校验身份":["82.3"],"在只有cookies鉴权时":["82.3"],"在高层找的次数比较多":["83.0"],"为了平衡高低层的次数":["83.0"],"那就得尽量平衡第一次和第二次的次数":["83.0"],"可以想象下99乘法表梯队":["83.0"],"把垂直看作第一个鸡蛋分块":["83.0"],"横向作为第二个鸡蛋的查找楼层":["83.0"],"得到以下类似":["83.0"],"n":["83.0"],"for循环最快":["84.0"],"fibonacci":["84.0"],"同时也有个callee属性":["85.1"],"返回一个数组":["85.2"],"相当于复制":["85.2"],"application":["86.1"],"www":["86.1","86.9","86.10"],"form":["86.1"],"urlencoded":["86.1"],"post请求头":["86.1"],"返回给浏览器":["86.2"],"它允许浏览器向跨源服务器":["86.3"],"发出xmlhttprequest请求":["86.3"],"实现跨域访问":["86.4"],"也可以通过设置cookiedomainrewrite参数修改响应头中cookie中域名":["86.5"],"和game":["86.8"],"domain2":["86.9"],"com":["86.9","86.10"],"b":["86.9","89.9"],"destoryframe":["86.10"],"第1次onload":["86.10"],"跨域页":["86.10"],"切换到同域代理页面":["86.10"],"location":["86.10"],"domain1":["86.10"],"并且用window":["86.11"],"addeventlistener":["86.11"],"message":["86.11"],"监听返回":["86.11"],"内嵌页利用":["86.11"],"window":["86.11"],"rest是代替功能代替":["87.1"],"变量rest是数组":["87.1"],"node中有":["87.1"],"原型":["88.0"],"如果还没有找到就会再在构造函数的prototype的":["88.2"],"fs":["89.1"],"上面代码的实质是从fs模块加载":["89.1"],"个方法":["89.1"],"c4":["89.2"],"c5":["89.2"],"c1":["89.2"],"as":["89.3"],"othor":["89.3"],"全部引入":["89.3"],"改成默认":["89.4"],"es6":["89.4"],"default":["89.4"],"somemodule":["89.4"],"等同于":["89.4"],"queryselector":["89.5"],"section":["89.5"],"modules":["89.5","89.8","89.12"],"有自己的作用域":["89.7"],"在一个文件里面定义的变量":["89.7"],"to":["89.8"],"emit":["89.9"],"ready":["89.9"],"如果修改了exports的指向":["89.10"],"则断开了和module":["89.10"],"exports的联系":["89.10"],"say":["89.11"],"node会依次搜索以下文件":["89.12"],"usr":["89.12"],"local":["89.12"],"lib":["89.12"],"如果想要多次执行某个模块":["89.13"],"可以让该模块输出一个函数":["89.13"],"然后每次require这个模块的时候":["89.13"],"重新执行一下输出的函数":["89.13"],"所有缓存的模块保存在require":["89.13"],"cache之中":["89.13"],"如果想删除模块的缓存":["89.13"],"上面代码是三个javascript文件":["89.14"],"其中":["89.14"],"main属性指向模块本身":["89.15"],"地址只读":["89.16"],"可以修改属性":["89.16"],"模块是运行时加载":["89.16"],"不能使用前缀":["90.0"],"表示八进制数":["90.0"],"不能删除不可删除的属性":["90.0"],"不能删除变量delete":["90.0"],"isarray":["91.0"],"tostring":["91.0"],"但实际dom已经被销毁了":["92.0"],"在组件销毁时把组件外的变量赋值为null":["92.0"],"组件内使用了组件外的方法":["92.0"],"并且引用了组件内的函数或者变量":["92.0"],"这些变量和函数还存在内存中":["92.0"],"在组件销毁时把方法解除引用":["92.0"],"def":["93.0"],"br":["93.0"],"header":["93.0"],"slotinnerprop":["93.0"],"list":["93.0"],"footer":["93.0"],"info":["93.0"],"oldslot":["93.0"],"h1":["93.0"],"当用户点击这个标签后":["94.1"],"值会发生改变":["94.1"],"或者使用":["94.1"],"javascript":["94.1"],"pushstate":["94.2"],"title":["94.2"],"url":["94.2"],"replacestate":["94.3"],"不会触发此事件":["94.3"],"vue的scope原理":["96.0"],"添加scope后":["96.0"],"vue中key的作用":["97.0"],"在diff比较过程中":["97.0"],"vue中diff算法":["98.0"],"vue双端diff算法":["98.0"],"因为vue用的是mvvm的设计模式":["98.0"],"当model更新后":["98.0"],"会通过observer更新虚拟node":["98.0"],"如果有子节点":["98.1"],"就会调用updatechildren方法":["98.1"],"就行双端diff算法比较":["98.1"],"不监听其内元素值改变0":["99.1"],"会从缓存中拿":["99.2"],"内部不能操作异步函数":["99.2"],"这里的键名":["100.0"],"都是属性描述符":["100.0"],"configurable":["100.0"],"当为true时":["100.0"],"只监听其在栈区是否改变":["100.1"],"内部引用也会出发get":["100.2"],"get":["101.0"],"但":["101.1"],"get可用参数做return返回":["101.2"],"不像define会进入调用死循环":["101.2"],"不再使用new":["102.0"],"vue去共享一个全局配置":["102.0"],"开始使用application概念":["102.0"],"全局方法实现在app实例上":["102.0"],"不再使用vue":["102.0"],"该用":["102.0"],"拿到参数创建compiler实例":["105.0"],"包含整个webpack信息":["105.0"],"负责文件的启动和编译":["105.0"],"全局只有一个":["105.0"],"读取entry入口信息":["105.0"],"遍历出所有入口文件":["105.0"],"configurefunction":["106.1"],"function":["106.1"],"proxy":["106.1"],"allowedhsot":["106.1"],"vuehash2":["106.4"],"activerule":["106.4"],"child":["106.4"],"vueapp":["106.4","106.5"],"about":["106.4"],"修改数据":["106.5"],"change":["106.5"],"子应用data":["106.5"],"vuex方式":["106.5"],"主应用传入store":["106.5"],"entry":["106.5"],"in":["107.2"],"服务器已收到了请求的第一部分":["108.1"],"现正在等待接收其余部分":["108.1"],"非授权信息":["108.2"],"但返回的信息可能来自另一来源":["108.2"],"无内容":["108.2"],"临时移动":["108.3"],"服务器目前从不同位置的网页响应请求":["108.3"],"但请求者应继续使用原有位置来进行以后的请求":["108.3"],"查看其他位置":["108.3"],"请求者应当对不同的位置使用单独的":["108.3"],"服务器在完成请求时发生冲突":["108.4"],"服务器必须在响应中包含有关冲突的信息":["108.4"],"已删除":["108.4"],"如果请求的资源已永久删除":["108.4"],"服务器就会返回此响应":["108.4"],"需要有效长度":["108.4"],"服务器不接受不含有效内容长度标头字段的请求":["108.4"],"从上游服务器收到无效响应":["108.5"],"服务不可用":["108.5"],"服务器目前无法使用":["108.5"],"vue":["109.0"],"v":["110.0"],"if和v":["110.0"],"show":["110.0"],"for":["111.0"],"会优先作用":["111.0"],"vue优化":["116.0"],"vue3远离":["116.0"],"vue2和3差异":["116.0"],"webpack3":["116.0"]},{"0":["23.2","63.10","81.1","84.0"],"1":["60.0","61.0","67.0","97.0"],"2":["13.2","61.0","71.1","73.0","74.0","76.1","94.3"],"3":["13.2","13.3","15.8","15.9","26.5","34.10","35.4","35.6","50.7","50.8","61.0","65.1","69.1","75.1","87.1","94.2","101.2"],"4":["9.2","21.2","34.3","34.9","39.1","47.3","50.9","50.18","57.2","75.4","80.3","82.4","83.0","99.2"],"5":["9.3","15.11","20.1","25.0","36.0","44.3","47.1","83.0","105.0"],"6":["1.4","25.0","26.2","37.3","44.3","46.4","63.8","102.0","105.0"],"7":["20.2","26.2","37.4","46.2","50.12","50.30"],"8":["63.0","90.0"],"9":["90.0"],"10":["55.0","57.0","77.3","82.0"],"11":["65.0","80.2"],"12":["104.0"],"13":["80.0"],"16":["50.12","75.0","106.0"],"17":["57.0","65.0","99.0"],"18":["33.1"],"19":["107.0"],"20":["81.0"],"22":["55.0","104.0"],"23":["89.0"],"24":["75.0"],"25":["79.0"],"27":["57.0"],"31":["85.0","103.0"],"32":["89.0"],"33":["89.0"],"35":["103.0"],"37":["56.0"],"44":["86.0"],"47":["112.0"],"54":["81.0"],"58":["107.0"],"59":["82.0"],"97":["86.1"],"101":["108.1"],"102":["37.7"],"105":["37.7"],"108":["37.7"],"180":["4.0"],"205":["108.2"],"238":["2.2"],"304":["108.3"],"413":["108.4"],"414":["108.4"],"504":["108.5"],"960":["63.5"],"999":["13.5"],"1000":["14.4","66.1"],"1280":["63.5"],"8888":["89.2"],"10000":["106.5"],"100000":["48.1","48.2"],"1000000":["72.3"],"这里使用的是其中的一种":["0.0"],"scroll":["0.0"],"关联起来":["0.1"],"实现滚动修改banner图":["0.3"],"demowrap2":["0.3"],"流式布局":["1.1"],"align":["1.3","1.4"],"items":["1.3"],"定义所有直接子元素的":["1.3"],"self":["1.3","1.4"],"值作为一个组":["1.3"],"在":["1.3","40.2"],"定义对齐当前":["1.4"],"grid":["1.4"],"或":["1.4"],"行中的元素":["1.4"],"并覆盖已有的":["1.4"],"单数字单位或者":["1.5"],"basis":["1.5"],"的值相当于":["1.5"],"双值数字加数字单位对应":["1.5"],"color":["2.2"],"rgb":["2.2"],"vmin":["3.1"],"px2rem":["3.2"],"src":["4.0"],"star":["4.0"],"png":["4.0"],"alt":["4.0"],"jstar":["4.0"],"samevaluezero":["6.2"],"算法比较":["6.2"],"是无法判断的":["7.2"],"true":["7.3","32.0"],"子应用页面的":["7.4"],"和父页面的":["7.4"],"根据第一次返回的下标和当前下标对比":["8.1"],"只保留第一次匹配到的":["8.1"],"return":["8.1","8.2","29.1","37.7","50.14"],"因为是执行方法返回的是添加项":["8.2"],"uniquearray":["8.3"],"new":["8.3","79.0"],"if":["8.6","16.6","67.0","106.1"],"使用":["8.7","15.11"],"一参填负数":["9.2"],"数":["9.3"],"在其中部分替换":["9.3"],"多出部分删除":["9.3"],"补集":["10.0"],"去除都有的":["10.0"],"id":["11.1"],"转换方法":["11.1"],"arraytotree":["11.1"],"call":["13.2","73.0"],"因为":["13.3","89.16"],"和":["13.4","15.5","16.2","19.2","21.2","25.0","40.1"],"test":["13.5"],"name":["13.5","86.1"],"age":["13.5","33.1","86.1"],"generator":["14.1"],"promise":["14.1","50.14","63.2"],"是基于":["14.2"],"实现的":["14.2"],"但它提供了更加简洁和易用的语法":["14.2"],"通过":["14.2"],"关键字":["14.2"],"我们可以直接等待一个":["14.2"],"的解析结果":["14.2"],"而无需使用":["14.2"],"then":["14.2","16.2","89.5"],"处理":["14.3"],"后返回":["14.3"],"settimeout":["14.4","39.1"],"数据通信的基础":["15.1"],"现代浏览器中":["15.1"],"采用这种方式可以节省传输时间":["15.2"],"早期这么做的原因是请求资源少":["15.2"],"追求快":["15.2"],"后来通过":["15.2"],"connection":["15.2"],"keep":["15.2"],"一直在拓展":["15.3"],"三个版本":["15.5"],"ssl3":["15.5"],"tls1":["15.5"],"由于存在安全漏洞":["15.5"],"已经很少被使用到":["15.5"],"改动会比较大":["15.5"],"并不是百分百安全的":["15.8"],"对端可以知道每个帧属于哪个各流":["15.9"],"这些帧是乱序发送的":["15.9"],"并且流控制会帮我们根据资源情况":["15.9"],"停止":["15.9"],"减少帧的发送":["15.9"],"最后到对端根据流标识重新组成完整的信息":["15.9"],"头部压缩":["15.9"],"hpack":["15.11"],"算法对头部进行压缩":["15.11"],"显著减少了传输的数据量":["15.11"],"提高了传输效率":["15.11"],"多路复用":["15.11"],"的复杂性和新的特性":["15.12"],"它可能与某些旧的浏览器":["15.12"],"代理服务器或网络设备存在兼容性问题":["15.12"],"这可能导致一些用户无法正常使用基于":["15.12"],"此外":["16.2"],"还支持使用":["16.2"],"方法进行链式调用":["16.2"],"peddind":["16.3"],"fullfild":["16.3"],"rejected":["16.3"],"其中一个执行成功":["16.4"],"返回解决值或者拒绝原因":["16.4"],"就会走新":["16.4"],"resovle":["16.4"],"如果执行失败":["16.4"],"的回调函数参数":["16.5"],"走到":["16.5"],"或者":["16.5"],"如果回调列表没有值":["16.5"],"则结束执行":["16.5"],"如果有":["16.5"],"则根据":["16.5"],"fulfild":["16.5"],"rejectd":["16.5"],"状态":["16.5"],"遍历调用回调列表对应的方法":["16.5"],"js":["16.6","18.1","19.2","68.0","83.0","88.0","107.2"],"ondone":["16.6"],"typeof":["16.6"],"function":["16.6","22.1","30.4","71.0","83.0"],"this":["16.6","29.1","70.0","92.0","102.0"],"let":["16.6","106.1"],"constructor":["16.6"],"主动调用了下自身的then方法":["16.6"],"将调用finally时传入的上一个的返回值":["16.6"],"全局":["17.1"],"单独使用都指向":["17.1"],"undefined":["17.1","18.2","88.1"],"像":["17.2"],"避免全局变量":["17.3"],"通过使用":["17.3"],"你可以避免使用全局变量来存储数据":["17.3"],"相反":["17.3"],"你可以将数据存储在对象或类的属性中":["17.3"],"并通过":["17.3"],"来访问它们":["17.3"],"实现继承":["17.3"],"函数在其他作用域里单独执行指向":["17.5"],"window":["17.5","92.0"],"但在":["17.5"],"class":["17.5"],"p1":["17.6"],"p2":["17.6"],"w":["17.6"],"尚未创建的对象":["18.1"],"未去定义这个变量":["18.1"],"stringify":["18.2"],"时如果对象属性值是":["18.2"],"或浏览器环境":["19.1"],"node":["19.2","35.3"],"环境":["19.2"],"i":["19.2","30.4","78.3"],"o":["19.2"],"操作等":["19.2"],"这些任务会被添加到任务队列中":["19.2"],"每次任务执行完":["19.3"],"都会去检查微任务队列里面有没有事件":["19.3"],"资源合并":["20.1"],"show":["20.2"],"这样就形成了一个链条":["21.1"],"称为原型链":["21.1"],"它是":["21.1"],"的":["21.3","34.1","35.3","46.4","50.17"],"执行构造函数中的代码":["21.4"],"为新对象添加实例属性和实例方法":["21.4"],"peo":["21.6"],"add":["22.1"],"变量提升":["22.1"],"这种情况下":["22.2"],"变量统一提升时最简单有效的设计":["22.2"],"压缩代码":["22.3"],"去除注释":["22.3"],"for":["22.4","93.0"],"循环的变量外部获取它时等于":["22.4"],"两个关键字":["22.6"],"执行上下文时":["22.7"],"遇到内部的函数作用域":["22.7"],"再在词法环境内单独创建一个作用域收集":["22.7"],"before":["22.8"],"initialization":["22.8"],"out":["22.9"],"不会被垃圾回收清除":["23.1"],"但可以把该变量置为":["23.1"],"时":["23.2"],"垃圾回收":["23.7"],"的则晋升到老生代的存储区里":["23.7"],"逻辑复用":["24.1"],"bind":["24.2","40.2"],"直接用":["25.0"],"解析器解析":["25.0"],"等":["25.0","40.1"],"解析完成":["25.0"],"会去执行":["25.0"],"属性的":["25.0"],"合并":["25.0"],"typeerror":["26.1"],"它们也无法访问":["26.1"],"上的属性":["26.2"],"或调用父类的构造函数":["26.2"],"更少的错误":["26.2"],"由于箭头函数不绑定自己的":["26.2"],"它们减少了因错误地引用":["26.2"],"而导致的错误":["26.2"],"这使得它们在处理回调函数和事件监听器时特别有用":["26.2"],"更适合回调和高阶函数":["26.2"],"没有自己的":["26.4"],"arguments":["26.4"],"对象":["26.4"],"不能作为构造函数":["26.5"],"结构类":["27.0"],"有这个实例则直接返回单例":["27.2"],"不好拓展":["27.5"],"工厂会给我们提供一个工厂方法":["27.6"],"可能会导致系统中存在大量的工厂类":["27.9"],"使得系统结构变得复杂":["27.9"],"增加维护难度":["27.9"],"数据不兼容":["27.12"],"但是不能对每一个都进行原型继承以匹配它的接口":["27.13"],"对象适配器可以适配它的父对象接口方法或属性":["27.13"],"特别是在一个系统中存在多个需要适配的接口时":["27.15"],"可能需要编写多个适配器类":["27.15"],"这可能会使代码变得难以理解和维护":["27.15"],"可能降低系统的性能":["27.15"],"适配器模式在运行时需要额外的对象和方法调用来完成适配工作":["27.15"],"这可能会降低系统的性能":["27.15"],"特别是在处理大量数据时":["27.15"],"功能":["27.16"],"性能":["27.18"],"需要多重判断":["27.21"],"一些复杂的算法逻辑无法共享":["27.23"],"造成资源浪费":["27.23"],"将有关状态的任何变更自动通知给它们":["27.24"],"观察者":["27.24"],"目标和观察者是耦合在一起的":["27.27"],"publisher":["27.28"],"通过发布主题事件的方式被通知":["27.28"],"有三方":["27.28"],"watcher":["27.30"],"资源消耗":["27.31"],"创建订阅者需要一定的时间和内存":["27.31"],"null":["28.3","106.1"],"apply":["29.1","73.0"],"两个参数":["29.2"],"num":["30.3"],"number":["30.3"],"foreach":["30.4"],"v":["30.4","96.0"],"非第一位并且是位值是3的倍数":["30.4"],"添加":["30.4","37.6","41.1"],"为负数":["31.2"],"相当于":["31.2"],"大的":["31.3"],"var":["32.0","76.0","84.0"],"done":["32.0","50.12"],"read":["32.0"],"const":["33.1"],"person":["33.1"],"andi":["33.1"],"user2extends":["33.2"],"code":["34.1","50.29","63.0"],"节点":["34.2"],"transform":["34.2","35.12"],"转换":["34.2"],"对抽象语法树进行转换":["34.2"],"generate":["34.2"],"代码生成":["34.2"],"打包时就不会参与":["34.3"],"开始生成代码":["34.3"],"移除额外的代码":["34.3"],"比如":["34.3"],"export":["34.3"],"让你能按需引入插件功能":["34.4"],"提高了":["34.4"],"的值为止":["34.5"],"比较典型的":["34.5"],"是":["34.5"],"moduleparsed":["34.7"],"resolvedynamicimport":["34.7"],"renderchunk":["34.8","34.9"],"generatebundle":["34.8"],"当前插件返回的代码会作为下一个插件":["34.9"],"钩子的第一个入参":["34.9"],"实现类似于瀑布流的处理":["34.9"],"chunk":["34.9","50.30"],"级代码修改":["34.9"],"级的代码修改":["34.9"],"后续的插件仍然可能在":["34.9"],"中进行模块内容转换":["34.9"],"进而可能出现符合替换规则的字符串":["34.9"],"在此可以再次替换下":["34.9"],"有两个入参":["34.9"],"分别为":["34.9"],"时自带了":["34.10"],"treeshaking":["34.10"],"机制":["34.10"],"插件机制不同":["34.10"],"一套构建指令":["35.1"],"它使用":["35.1"],"依赖预构建是自动开启的":["35.3"],"可以在":["35.3"],"modules":["35.3"],"目录里看到":["35.3"],"并且":["35.3"],"dev":["35.3"],"serve":["35.3"],"会对依赖设置强缓存":["35.3"],"过期时间":["35.3"],"年":["35.3"],"如果以下三个地方没有改变":["35.3"],"则一直使用缓存文件":["35.3"],"package":["35.3"],"没提供操作打包产物的接口":["35.4"],"vite":["35.5"],"插件完全兼容":["35.5"],"和浏览器的缓存策略":["35.6"],"真正的按需加载":["35.6"],"ems":["35.8"],"规范实现了自己的一套":["35.8"],"api":["35.8","47.1"],"用来做模块更新":["35.8"],"旧模块失效":["35.8"],"删除这些操作":["35.8"],"首屏很慢":["35.9"],"预构建":["35.9"],"需要转化为":["35.9"],"模块":["35.9"],"并且附带着大量的请求":["35.9"],"再加上自己的独有":["35.11"],"服务器关闭阶段":["35.12"],"用来转换":["35.13"],"html":["35.13","77.2","86.11"],"rollup":["35.14"],"的插件机制":["35.14"],"已经对这三个钩子比较熟悉了":["35.14"],"热更新阶段":["35.14"],"执行":["35.14"],"生产环境构建用的插件":["35.15"],"所以要分开做对比":["35.16"],"再通知浏览器根据标识获取到更新文件":["35.17"],"浏览器执行文件":["35.17"],"对模块进行替换更新删除":["35.17"],"基于":["35.17"],"ast":["35.18"],"后":["35.18"],"分析当前模块时":["35.18"],"通常会导致一些不必要的代码被包含在最终的打包文件中":["36.0"],"因为组件选项对象中的所有属性都会被包含进去":["36.0"],"即使某些属性没有用到":["36.0"],"由于":["36.0"],"是基于导入的函数和响应式":["36.0"],"因此它天然支持树摇":["36.0"],"这意味着在最终打包时":["36.0"],"未被使用的代码会被移除":["36.0"],"从而减少打包体积":["36.0"],"逻辑复用和封装":["36.0"],"算法主要用于比较新旧虚拟":["37.1"],"dom":["37.1"],"virtual":["37.1"],"这样就要写更多的代码":["37.2"],"首先会判断新旧树有没有子节点":["37.3"],"没得的就做新增或者删除":["37.3"],"都有子节点":["37.3"],"则进入":["37.3"],"设计的":["37.4"],"因此它无法与其他框架":["37.4"],"如":["37.4"],"react":["37.4"],"angular":["37.4"],"进行比较":["37.4"],"这意味着如果你正在尝试将":["37.4"],"与其他框架混合使用或进行迁移":["37.4"],"可能会遇到一些困难":["37.4"],"依次头和头":["37.5"],"头和尾":["37.5"],"尾和头":["37.5"],"尾和尾对比":["37.5"],"oldstartidx":["37.5"],"oldendidx":["37.5"],"newstartidx":["37.5"],"得到最长子序列的索引":["37.6","41.1"],"替换期间会记录前一个索引是谁":["37.6","41.1"],"然后在使用前置朔源法":["37.6","41.1"],"归正乱序":["37.6","41.1"],"然后遍历新节点数组":["37.6","41.1"],"l2":["37.7"],"result2":["37.7"],"endres":["37.7"],"getsequence2":["37.7"],"resultindex":["37.7"],"因为它可以在事件循环的下一个阶段立即执行回调":["39.1"],"而不需要等待":["39.1"],"如果上述所有方法都不可用":["39.1"],"会降级使用":["39.1"],"将回调函数延迟到下一个事件循环的迭代中执行":["39.1"],"这是最不理想的兼容方式":["39.1"],"因为它会有最小的延迟":["39.1"],"修饰符":["40.2"],"后面修饰":["40.2"],"相当于给组件传递了一个属性和":["40.2"],"update":["40.2"],"属性名的方法":["40.2"],"相比":["40.2"],"同一组件它可以定义多个":["40.2"],"循环比较看有没有可以复用的节点":["41.1"],"然后移动":["41.1"],"vue3":["41.1"],"使用双端比较头和头":["41.1"],"匹配到再位移起始结束下标":["41.1"],"剩余新节点的会生成":["41.1"],"keymap":["41.1"],"然后根据":["41.1"],"生成一个对应再旧节点数组的下标":["41.1"],"再遍历一遍旧节点":["41.1"],"将":["41.1"],"相同的做差异比对":["41.1"],"再最终移动替换节点时":["41.1"],"会使用贪心算法加二分查找法":["41.1"],"参照节点下标数组做位置替换":["41.1"],"如果遍历下标匹配待最长子序列的索引":["41.1"],"则不替换":["41.1"],"然后再新增删除对应的节点":["41.1"],"编译时会记录不包含数据劫持的标签节点":["41.1"],"在更新直接使用这些节点":["41.1"],"同时再":["41.1"],"对比时直接跳过这些节点":["41.1"],"像语法树解析":["42.0"],"拼接":["42.0"],"字符串":["42.0"],"监听子属性变化":["44.2","99.1"],"但还是受制于":["44.2"],"object":["44.2","48.3","81.1"],"defineproperty":["44.2"],"只监听对象自身":["44.3"],"不监听其内元素值改变":["44.3"],"通过设置":["45.0"],"flush":["45.0"],"post":["45.0"],"默认会在组件更新之前执行":["45.1"],"取决于你的具体需求":["45.2"],"如果你需要更细粒度的控制":["45.2"],"或者需要访问旧值和新值":["45.2"],"那么使用":["45.2"],"deps":["46.1"],"依赖对象":["46.1"],"每个对象属性都会有一个依赖对象":["46.1"],"slice":["46.2","78.2"],"sort":["46.2"],"reverse":["46.2"],"方法内部会调用数组原型方法和触发依赖通知":["46.2"],"然后使用":["46.2"],"defineproty":["46.2"],"将其劫持":["46.2"],"再将这个数组原型上的方法替换为自定义方法":["46.2"],"副作用函数":["46.3"],"没就将当前活动的":["46.4"],"加入到该":["46.4"],"里":["46.4"],"当修改数据值":["46.4"],"composition":["47.1"],"做响应式处理和转换":["47.1"],"然后挂载到":["47.1"],"上面":["47.1"],"再把":["47.1"],"方法不用执行就可以拿到结果":["47.3"],"mutation":["47.3"],"遍历所有方法对象":["47.3"],"然后重新赋值为一个新的单参数函数":["47.3"],"函数在内部将":["47.3"],"和外部的参数":["47.3"],"代入到":["47.3"],"的每个方法":["47.3"],"onactions":["47.4"],"duration":["48.1","48.2"],"滚动数字样式":["48.3"],"unit":["48.3"],"graph":["50.1"],"然后将你项目中所需的每一个模块组合成一个或多个":["50.1"],"es6":["50.2"],"降级成":["50.2"],"要想识别更多内容":["50.3"],"就需要使用加载器器":["50.3"],"定义用哪个":["50.4"],"解析":["50.5"],"代码":["50.5"],"style":["50.5","86.9"],"将解析的":["50.5"],"代码插入到":["50.5"],"inline":["50.6"],"模块源码的转换":["50.7"],"发生在这个阶段":["50.7"],"同等类型下的":["50.7"],"preloader":["50.8"],"string":["50.9"],"异步需要调用特定函数":["50.9"],"资源管理":["50.10"],"emit":["50.11","50.14"],"在将内存中":["50.11"],"assets":["50.11"],"内容写到磁盘文件夹之前":["50.11"],"asyncserieshook":["50.12","50.14"],"异步串行钩子":["50.12"],"必须返回promise":["50.14"],"resolve":["50.14","63.10"],"也就是异步串行钩子":["50.14"],"特点就是异步任务顺序执行":["50.14"],"less":["50.16"],"文件中的":["50.16"],"生成热更新文件":["50.18"],"确定":["50.20"],"esm":["50.20","50.21"],"shaking":["50.21"],"强依赖于":["50.21"],"模块化方案的静态分析能力":["50.21"],"所以应尽量坚持使用":["50.21"],"注意":["50.22"],"命令行设置的优先级高于配置文件中的":["50.22"],"中的环境变量字符串":["50.23"],"process":["50.23"],"dirname":["50.24"],"依赖于那些存在于用户环境":["50.25"],"consumer":["50.25"],"中安装的包名":["50.26"],"splitting":["50.29"],"技术将应用程序代码拆分成更小的代码块":["50.29"],"以便在需要时进行按需加载":["50.29"],"这有助于减小初始加载的文件大小":["50.29"],"提高应用程序的性能":["50.29"],"输出资源":["50.30"],"根据入口和模块之间的依赖关系":["50.30"],"组装成一个个包含多个模块的":["50.30"],"再把每个":["50.30"],"转换成一个单独的文件加入到输出列表":["50.30"],"这步是可以修改输出内容的最后机会":["50.30"],"devops":["52.0"],"performance":["52.0"],"attachshadow":["54.1"],"包裹子应用":["54.1"],"border":["55.1","55.2"],"但她又分为两者类型":["55.1"],"ie":["55.2"],"真实宽高等于content":["55.2"],"高矮不齐":["57.1"],"底部对齐":["57.1"],"提升层级":["57.2"],"浮动元素后":["57.3"],"外":["57.3"],"未有偏移属性时":["58.0"],"位置处于正常文本流的中位置":["58.0"],"fixed":["58.0"],"固定定位":["58.0"],"相对浏览器窗口定位":["58.0"],"页面滚动不会在视口的位置":["58.0"],"filepath":["59.0","65.0","81.0","85.0","103.0"],"进击的面试":["59.0","63.0","65.0","85.0"],"bfc":["59.0"],"md":["59.0","69.0","79.0","85.0","95.0","109.0"],"元素跟随浮动文档流":["59.1"],"position脱离文档流":["59.1"],"margin":["59.2"],"bottom":["59.2"],"然后给父盒子设置overflow":["59.3"],"中间自适应":["59.4"],"重绘的优化":["60.0"],"减少触发他们":["60.0"],"reflow":["60.0"],"repaint":["60.0"],"togmtstring":["61.0"],"姓名":["61.0"],"今天来面试啥":["61.0"],"在过往的6年中":["61.0"],"vue25年":["61.0"],"vue31年":["61.0"],"上一家主要做信息系统和综合性工作台":["61.0"],"还有流程低代码":["61.0"],"button":["62.0"],"btn":["62.0"],"onclick":["62.0"],"copy":["62.0"],"复制按钮":["62.0"],"面试经验":["63.0"],"node独有":["63.2"],"再去执行宏任务":["63.3"],"v11":["63.4"],"h":["63.5"],"文件i":["63.6"],"oss":["63.6"],"libuv内部还维护着一个默认4个线程的线程池":["63.6"],"这些线程负责执行文件i":["63.6"],"o操作":["63.6"],"dns操作":["63.6"],"用户异步代码":["63.6"],"当js层传递给":["63.6"],"close":["63.8"],"callbacks":["63.8"],"执行close事件的callback":["63.8"],"例如socket":["63.8"],"有到期的就执行":["63.9"],"然后通用阶段":["63.9"],"没到期":["63.9"],"检测有没有immediate回调":["63.9"],"有就退出该阶段":["63.9"],"没就等待到期的回调":["63.9"],"如果没有定时器或者i":["63.9"],"o的回调任务":["63.9"],"有第二参就执行":["64.0"],"并改状态":["64.0"],"以便后面的链式":["64.0"],"没就直接返回that":["64.0"],"调用下一个链式":["64.0"],"返回that":["64.0"],"才有链式的指向":["64.0"],"只有rejected状态才能触发":["64.0"],"将返回值指向resparam":["64.0"],"然后修改状态":["64.0"],"以便下一链式调用":["64.0"],"i1":["65.2"],"next":["65.2"],"i2":["65.2"],"data1":["66.1"],"yield":["66.1"],"console":["66.1","68.0","71.0"],"log":["66.1","68.0","71.0"],"也可以将":["66.2"],"的代码放在":["66.2"],"try":["66.2"],"fps":["67.0"],"math":["67.0"],"round":["67.0"],"函数优先原则":["68.0"],"然后形参":["68.0"],"f1":["68.0"],"垃圾回收机制":["69.0"],"js垃圾回收机制":["69.0"],"栈内存中的基本类型":["69.0"],"可以通过操作系统直接处理":["69.0"],"下一次垃圾回收时":["69.3"],"引用标记":["69.4"],"对的就是你关注的那个this":["70.0"],"vo":["70.0"],"变量对象":["70.0"],"scopechain":["70.0"],"作用域链":["70.0"],"跟闭包相关":["70.0"],"b":["71.0"],"c":["71.0"],"然后在运行激活阶段":["71.1"],"js在执行上下文时":["72.0"],"遇到函数执行":["72.0"],"进入这个函数后":["72.0"],"创建变量对象时":["72.0"],"扫到内函数":["72.0"],"闭包不会随着父级作用域的结束而结束":["72.1"],"array":["72.3","78.3","79.9"],"join":["72.3"],"somemethod":["72.3"],"open内this指向class":["73.0"],"调用this的函数还是指向this":["73.0"],"普通函数指向window":["73.0"],"bing可修改指向":["73.0"],"表示该函数的参数不是对象":["74.0"],"作为对象原型链的终点":["74.0"],"undefined表示":["74.0"],"缺少值":["74.0"],"就是此处应该有一个值":["74.0"],"但是还没有定义":["74.0"],"04":["75.0"],"function虽然也是对象的一种":["75.1"],"isarray":["75.4"],"tostring":["75.5"],"因此等同于常量":["76.0"],"is":["77.1"],"a":["77.1","93.0"],"to":["77.1"],"the":["77.1","93.0"],"instead":["77.1"],"跨域获取":["77.1"],"fonts":["77.1"],"cicle":["77.1"],"fina":["77.1"],"webfont":["77.1"],"eot":["77.1"],"application":["77.1"],"vnd":["77.1"],"ms":["77.1"],"fontobject":["77.1"],"anonymous":["77.1"],"结合媒体media属性":["77.1"],"注意事项":["77.2"],"module默认使用了":["77.2"],"use":["77.2"],"strict":["77.2"],"模式":["77.2"],"这也意味着不能使用诸如arguments":["77.2"],"callee这一类的语法":["77.2"],"将之前解析的domtree和csstree生成rendertree渲染到页面":["77.3"],"将之前解析的domtree和csstree渲染到页面":["77.3"],"但阻碍后面的dom渲染":["77.3"],"数组截取":["78.2"],"es6newset":["79.0"],"set":["79.0","79.10","101.0"],"依次执行提供的回调函数":["79.1"],"keys":["79.1"],"返回键名的遍历器":["79.1"],"相等于返回键值遍历器values":["79.1"],"obj2":["79.4"],"list3":["79.5"],"logs":["79.6"],"方法二":["79.9"],"from":["79.9","85.2","89.2"],"has":["79.11"],"相对于":["79.11"],"250mb":["80.1"],"甚至没有上限":["80.1"],"源限制":["80.1"],"受到同源限制":["80.1"],"每一个数据库对应创建它的域名":["80.1"],"网页只能访问自身域名下的数据库":["80.1"],"而不能访问跨域的数据库":["80.1"],"支持二进制储存":["80.1"],"不仅可以储存字符串":["80.1"],"还可以储存二进制数据":["80.1"],"arraybuffer":["80.1"],"合理搭配js":["80.2"],"css加载的位置":["80.2"],"浏览器service":["80.3"],"worker缓存":["80.3"],"只能在https环境下部署":["80.3"],"本地服务可以用来测试":["80.3"],"国内谷歌浏览器的支持并不完整":["80.3"],"浏览器indexdb数据库":["80.3"],"储存空间大":["80.3"],"indexeddb":["80.3"],"的储存空间比":["80.3"],"05":["81.0"],"评论区":["82.1"],"文章类":["82.1"],"表单或者其他带参数提交":["82.1"],"输入js或者有执行js能力的标签代码块":["82.1"],"csp":["82.2"],"content":["82.2","93.0"],"security":["82.2"],"用户a登入网站a":["82.3"],"拿到鉴权信息后":["82.3"],"头中自定义属性并验证":["82.4"],"cookie设置samesite":["82.4"],"不直接返回显示错误原因":["82.6"],"x":["83.0"],"所以问题就转为怎么把全部楼层这样划分":["83.0"],"分了几块":["83.0"],"转为js":["83.0"],"n1":["84.0"],"n2":["84.0"],"函数arguments":["85.0"],"指向这个函数本身":["85.1"],"02":["86.0"],"description":["86.0"],"send":["86.1"],"post传参":["86.1"],"laoa":["86.1"],"浏览器解析执行":["86.2"],"从而克服了ajax只能同源使用的限制":["86.3"],"cors需要浏览器和服务器同时支持":["86.3"],"实现当前域的cookie写入":["86.5"],"news页面iframe了game页面":["86.8"],"因为跨域所以news和game无法相互访问起window对象":["86.8"],"display":["86.9"],"none":["86.9"],"body":["86.10"],"appendchild":["86.10"],"获取数据以后销毁这个iframe":["86.10"],"释放内存":["86.10"],"这也保证了安全":["86.10"],"不被其他域frame":["86.10"],"js访问":["86.10"],"监听信息":["86.11"],"然后用window":["86.11"],"parent":["86.11"],"传递":["86.11"],"箭头不能作为构造函数":["87.1"],"设计两个概念":["88.0"],"构造函数和原型对象":["88.0"],"enum就是个构造函数":["88.0"],"创建构造函数时":["88.0"],"中查找":["88.2"],"这样一层一层向上查找就会形成一个链式结构":["88.2"],"proto":["88.3"],"其他方法不加载":["89.1"],"这种加载称为":["89.1"],"编译时加载":["89.1"],"或者静态加载":["89.1"],"即":["89.1"],"c2":["89.2"],"changename":["89.2"],"全部引入":["89.2"],"import":["89.2"],"all":["89.3"],"混合引入":["89.3"],"默认改具名":["89.4"],"somevariable":["89.5"],"module":["89.5"],"类":["89.7"],"都是私有的":["89.7"],"dist":["89.8"],"circular":["89.8"],"无法导出":["89.10"],"这意味着":["89.10"],"如果一个模块的对外接口":["89.10"],"other":["89.11"],"这样设计的目的是":["89.12"],"使得不同的模块可以将所依赖的模块本地化":["89.12"],"可以像下面这样写":["89.13"],"删除指定模块的缓存":["89.13"],"delete":["89.13"],"cache":["89.13"],"modulename":["89.13"],"js加载了b":["89.14"],"而b":["89.14"],"js又加载a":["89.14"],"这时":["89.14"],"node返回a":["89.14"],"js的不完整版本":["89.14"],"所以执行结果如下":["89.14"],"第二次加载a":["89.14"],"模块是编译时输出接口":["89.16"],"加载的是一个对象":["89.16"],"prop":["90.0"],"会报错":["90.0"],"只能删除属性delete":["90.0"],"global":["90.0"],"eval不会在它的外层作用域引入变量":["90.0"],"eval和arguments不能被重新赋值":["90.0"],"split":["91.0"],"maparr":["91.0"],"map":["91.0"],"mounted":["92.0"],"addeventlistener":["92.0"],"resize":["92.0"],"func":["92.0"],"beforedestroy":["92.0"],"removeeventlistener":["92.0"],"data":["93.0","96.0","109.0"],"here":["93.0"],"might":["93.0"],"be":["93.0"],"page":["93.0"],"title":["93.0"],"p":["93.0"],"paragraph":["93.0"],"main":["93.0"],"and":["93.0"],"来对":["94.1"],"loaction":["94.1"],"进行赋值":["94.1"],"改变":["94.1"],"不刷新页面并添加一条历史记录":["94.2"],"vue的":["95.0"],"nexttick":["95.0","102.0"],"then是微任务":["95.1"],"加进微任务队列":["95.1"],"编译时会在类名后面加上":["96.0"],"box":["96.0"],"xxx":["96.0"],"hash内容的标示的属性":["96.0"],"双端比较和有无判断":["97.0"],"都为false时":["97.0"],"会进入key查询":["97.0"],"来寻找节点":["97.0"],"生成的新vnode与老vnode进行diff比较":["98.0"],"再更新真实node":["98.0"],"有些人会有疑问":["98.0"],"为啥不直接更新node":["98.0"],"要先更新vnode":["98.0"],"比较简单的dom结构直接更新node效率是比较高":["98.0"],"先新旧左边开始两两比较":["98.1"],"如果不值得比较":["98.1"],"两端右边开始比较":["98.1"],"还不值":["98.1"],"旧起始节点与新尾部节点比较":["98.1"],"00":["99.0","106.0"],"06":["99.0"],"但还是受制于object":["99.1"],"会提示错误":["99.2"],"该属性的描述符能够被改变":["100.0"],"同时该属性也可以从对应的对象上删除":["100.0"],"enumerable":["100.0"],"该属性为true时":["100.0"],"该属性才会出现在对象的枚举属性中":["100.0"],"value":["100.0"],"默认为false":["100.0"],"如果属性值包含对象或者包含数组":["100.1"],"修改对象属性或者数组元素":["100.1"],"使用vm":["100.2"],"vm":["100.2"],"val":["101.0"],"这个传入对象的属性新增一个属性时会触发set":["101.1"],"删除不会":["101.1"],"app":["102.0"],"vue":["102.0"],"createapp":["102.0"],"config":["102.0"],"globalproperties":["102.0"],"http":["102.0"],"不能再使用vue":["102.0"],"开始编译":["105.0"],"创建compilation对象":["105.0"],"和其相关回调钩子":["105.0"],"依次进入每个入口用loader对文件进行编译":["105.0"],"将编译好的内容生成ast抽象语法树":["105.0"],"然后继续递归":["105.0"],"子应用js更改":["106.1"],"instance":["106.1"],"render":["106.1"],"store":["106.1"],"方式一":["106.1"],"prototype":["106.1"],"actions":["106.1"],"将主应用的actions方法拿到":["106.1"],"在onglobalstatechange":["106.1"],"可以拿到state的值":["106.1"],"等于父传子通讯":["106.1"],"方式二":["106.1"],"hashhome2":["106.4"],"注册应用":["106.4"],"localhost":["106.5"],"child":["106.5"],"子应用需要支持跨域":["106.5"],"container":["106.5"],"activerule":["106.5"],"子应用mian":["106.5"],"js拿到":["106.5"],"切换协议":["108.1"],"服务器成功处理了请求":["108.2"],"但没有返回任何内容":["108.2"],"重置内容":["108.2"],"请求来检索响应时":["108.3"],"服务器返回此代码":["108.3"],"未修改":["108.3"],"自从上次请求后":["108.3"],"请求的网页未修改过":["108.3"],"未满足前提条件":["108.4"],"服务器未满足请求者在请求中设置的其中一个前提条件":["108.4"],"请求实体过大":["108.4"],"服务器无法处理请求":["108.4"],"因为请求实体过大":["108.4"],"超出服务器的处理能力":["108.4"],"请求的":["108.4"],"uri":["108.4"],"由于超载或停机维护":["108.5"],"通常":["108.5"],"这只是暂时状态":["108.5"],"网关超时":["108.5"],"5vue":["109.0"],"vue中data必须是函数是为了保证组件的独立性和可复用性":["109.0"],"if是控制dom节点是否存在做显隐":["110.0"],"总是优先于":["111.0"],"生效":["111.0"],"当":["111.0"],"与":["111.0"],"5原理":["116.0"],"异同":["116.0"],"webpack打包过程":["116.0"],"编写自定义webpack插件":["116.0"]},{"0":["0.0","83.0"],"1":["29.2","68.0","72.3","98.0"],"2":["22.3","37.6","60.0","66.2"],"3":["23.7","30.4","31.3","44.2","57.1","59.1","85.2","89.7","99.1","101.1"],"4":["15.12","17.5","21.4","27.13","34.2","35.4","54.1","57.3","61.0","77.2","82.6","86.1","87.1","89.12","94.1","107.2"],"5":["15.2","17.1","21.2","22.7","34.3","34.9","47.3","57.2","58.0","61.0","75.4","80.1","82.4","89.12","99.2","116.0"],"6":["14.2","15.11","20.1","42.0","47.1","80.1","98.1","116.0"],"7":["16.3","25.0","37.3","41.1","80.1","102.0","105.0","116.0"],"8":["20.2","25.0","26.2","37.3","41.1","46.2","50.12","80.1","102.0","105.0"],"9":["1.5","16.6","25.0","50.12","63.9","102.0"],"10":["50.12","63.9","65.0","90.0","102.0"],"11":["77.3","80.0","102.0"],"12":["66.0","77.3","80.2","90.0"],"13":["90.0"],"16":["66.0","94.0"],"21":["107.0"],"22":["21.6"],"24":["78.0"],"26":["66.0","80.0"],"27":["81.0"],"28":["82.0"],"32":["113.0"],"35":["89.0"],"38":["78.0","87.0"],"40":["94.0"],"42":["82.0","112.0"],"45":["99.0"],"47":["87.0"],"48":["99.0"],"49":["103.0"],"50":["104.0","108.0"],"52":["55.0"],"53":["56.0","106.0"],"54":["107.0"],"55":["108.0"],"58":["106.0"],"59":["112.0"],"60":["113.0"],"61":["114.0"],"62":["115.0"],"88":["22.8","65.2","71.0"],"99":["79.2"],"206":["108.2"],"305":["108.3"],"415":["108.4"],"416":["108.4"],"505":["108.5"],"1000":["13.5"],"3000":["50.14"],"表示滚动的距离":["0.0"],"name":["0.1","62.0"],"变量名需要按":["0.1"],"开头命名":["0.1"],"contentwrap3":["0.3"],"imgwrap":["0.3"],"xp经典":["0.3"],"响应式布局":["1.1"],"对于目前的浏览器都有很好的支持":["1.1"],"flexbox":["1.3","1.4"],"中":["1.3","1.4","50.29","66.2"],"它控制子元素在交叉轴上的对齐":["1.3"],"grid":["1.3"],"布局中":["1.3"],"items":["1.4"],"在":["1.4","37.5","50.29"],"会按照当前":["1.4"],"元素排列方向的垂直方向进行排列":["1.4"],"属性定义":["1.4"],"https":["1.4","70.0"],"双值数字":["1.5"],"从确定高度盒子里做响应式高度布局时":["1.5"],"设置了属性为":["1.5"],"较大的值":["2.0"],"width":["2.2","77.1"],"10vmin":["2.2"],"height":["2.2","59.2"],"logo":["4.0"],"在日常开发中":["4.0"],"零碎学习中":["4.0"],"收集的":["4.0"],"它认为":["6.2"],"只关心元素存不存在":["6.3"],"不关心位置":["6.3"],"includes":["6.3"],"array":["7.1","8.3"],"则为数组":["7.1","7.3"],"是不相等的":["7.4"],"item":["8.4"],"push":["8.6","67.0"],"web":["8.7"],"worker":["8.7"],"相当于":["9.2"],"长度":["9.2"],"负数":["9.2"],"数小于":["9.3"],"然后合并":["10.0"],"r":["10.0"],"bind":["13.3","17.1"],"会返回一个函数":["13.3"],"所以可以在绑定线传入一些参数":["13.3"],"参数传递一样":["13.4"],"但会返会一个函数":["13.4"],"b":["13.5","86.10"],"的语法糖":["14.1"],"和":["14.2","31.3","34.10","35.3","50.8","81.0"],"链式调用":["14.2"],"这使得代码更加简洁和易于阅读":["14.2"],"更好的调试体验":["14.2"],"由于":["14.2"],"使异步代码看起来像同步代码一样":["14.2"],"因此调试起来也更加方便":["14.2"],"开发者可以使用调试工具逐步执行代码":["14.2"],"或者使用":["14.3"],"try":["14.3","16.5"],"catch":["14.3","63.2","89.5"],"包裹":["14.3"],"data1":["14.4"],"console":["14.4","21.6","24.2","32.0","67.0","72.0","89.2","89.9","100.0"],"log":["14.4","21.6","24.2","32.0","67.0","89.2","89.9","100.0"],"data2":["14.4","66.1"],"fetch":["15.1"],"alive":["15.2","20.2"],"实现长连接":["15.2"],"无状态":["15.2"],"协议是无状态协议":["15.2"],"无状态是指协议对于事务处理没有记忆能力":["15.2"],"传输可靠":["15.3"],"tcp":["15.3"],"请求头验证":["15.4"],"目前还在草案阶段":["15.5"],"目前使用最广泛的是":["15.5"],"img":["15.5","70.0"],"src":["15.5","50.24","70.0","86.11"],"image":["15.5"],"png":["15.5","77.1"],"黑客攻击和服务器被劫持一样没用":["15.8"],"https2":["15.8"],"每次都会重复发一些信息":["15.9"],"比如请求头里的":["15.9"],"做了头部压缩处理和索引表的简历":["15.9"],"重复的信息使用索引传输":["15.9"],"到对端在索引表里取值":["15.9"],"通过单个连接实现多个请求的并行处理":["15.11"],"减少了连接建立和释放的开销":["15.11"],"提高了整体性能":["15.11"],"的服务":["15.12"],"更高的带宽需求":["15.12"],"虽然":["15.12"],"这使得代码更加简洁和易于维护":["16.2"],"总之":["16.2"],"是":["16.2"],"异步编程中的一个重要概念":["16.2"],"它极大地改善了异步编程的可读性":["16.2"],"原型方法":["16.3"],"race":["16.3"],"如果返回值个":["16.4"],"新":["16.4"],"会根据这个":["16.4"],"的状态执行对应的":["16.4"],"先使用":["16.5"],"的方式执行":["16.5"],"两个方法":["16.5"],"如果报错走":["16.5"],"了":["16.5"],"那回去找链式调用的":["16.5"],"方法执行":["16.5"],"找不到则终止执行":["16.5"],"如果正常执行成功":["16.5"],"reason":["16.6"],"throw":["16.6"],"有链式调用":["16.6"],"执行完":["16.6"],"发现有回调列表在等执行":["16.6"],"则直接遍历执行回调列表":["16.6"],"去触发":["16.6"],"handler":["16.6"],"此时状态不再是":["16.6"],"则开始执行缓存对象":["16.6"],"然后执行缓存对象的":["16.6"],"call":["17.1","75.5"],"apply":["17.1"],"button":["17.2"],"虽然没有类式的继承":["17.3"],"但你可以通过原型链和构造函数来模拟类继承":["17.3"],"在这些情况下":["17.3"],"可以帮助你访问和修改继承的属性和方法":["17.3"],"简化代码":["17.3"],"通过减少对全局变量的依赖和避免传递大量参数":["17.3"],"可以帮助你简化代码并提高可读性":["17.3"],"动态上下文":["17.3"],"的值在函数被调用时确定":["17.3"],"时要小心":["17.4"],"并确保你理解它在当前上下文中的含义":["17.4"],"里的作用域指向":["17.5"],"undefine":["17.5"],"显示绑定":["17.5"],"null":["17.5","23.1","81.1"],"obj":["17.6"],"const":["18.1","24.2","64.0","77.2"],"a":["18.1","77.2"],"会删除该属性":["18.2"],"因为删掉后表现形式也没不同":["18.2"],"在需要保留时就得注意了":["18.2"],"中处理异步操作的核心机制":["19.1"],"微任务":["19.2"],"的":["19.2","54.1","79.11"],"then":["19.2","63.2","63.10"],"process":["19.2"],"nexttick":["19.2"],"有就取出执行":["19.3"],"直到队列都空":["19.3"],"程序结束":["19.3"],"cdn":["20.1"],"keep":["20.2"],"避免页面重定向":["20.2"],"中继承属性和方法的主要方式":["21.1"],"当我们试图访问一个对象的某个属性时":["21.1"],"如果该对象自身没有这个属性":["21.1"],"指向式一样的":["21.2"],"但他无法访问":["21.2"],"constructor":["21.3","75.4","88.1"],"中可以找到":["21.3"],"返回新对象":["21.4"],"上的方法或属性":["21.5"],"bob":["21.6"],"作用域":["22.2"],"控制着变量和函数的可访问范围":["22.2"],"空格等操作":["22.3"],"的最终结果":["22.4"],"来创建块级作用域":["22.6"],"的变量":["22.7"],"加入到栈顶":["22.7"],"函数作用域内部查找时":["22.7"],"先从栈顶到栈低":["22.7"],"上方":["22.8"],"行以上就是暂时性死区":["22.8"],"那么它将被垃圾回收器回收":["23.1"],"被执行":["23.2"],"然后清空使用区":["23.7"],"t":["24.2"],"hmtml":["25.0"],"解析的":["25.0"],"dom":["25.0","50.5","95.0"],"形成渲染树":["25.0"],"解析渲染树":["25.0"],"进行布局和计算每个节点的几何信息":["25.0"],"将节点渲染到页面上":["25.0"],"初始渲染完成":["25.0"],"如果后续有做窗口大小修改":["25.0"],"元素尺寸位置修改":["25.0"],"target":["26.1"],"关键字":["26.1","34.3"],"箭头函数不能在其主体中使用":["26.1"],"由于箭头函数的简洁性和不绑定":["26.2"],"的特性":["26.2"],"它们非常适合作为回调函数和传递给其他函数":["26.2"],"如":["26.2"],"map":["26.2"],"filter":["26.2"],"reduce":["26.2"],"等":["26.2","50.2"],"的参数":["26.2"],"支持尾调用优化":["26.2"],"大多数现代":["26.2"],"但是":["26.4"],"你可以使用剩余参数":["26.4"],"args":["26.4"],"没有":["26.5"],"arguments":["26.5"],"行为类":["27.0"],"没就先实例化":["27.2"],"因为时自身内部实例化":["27.5"],"我们直接去调用即可":["27.6"],"不利于继承":["27.9"],"由于工厂模式创建的对象通常是匿名对象":["27.9"],"即没有显式地使用类名来创建对象":["27.9"],"因此这些对象通常无法直接参与继承关系":["27.9"],"将其转换成访问者期望的格式进行使用":["27.12"],"需要一个统一的输出接口":["27.13"],"这种性能下降可能会更加明显":["27.15"],"可能增加系统的出错概率":["27.15"],"由于适配器模式需要处理接口不匹配的问题":["27.15"],"因此在编写适配器类时需要特别小心":["27.15"],"以避免出现错误":["27.15"],"如果适配器类编写不正确":["27.15"],"可能会导致系统出现错误或异常":["27.15"],"需要操作数据对象":["27.18"],"可以考虑策略模式规避多重条件判断":["27.21"],"用户在使用策略时":["27.23"],"需要了解具体的策略实现":["27.23"],"观察者必须订阅内容改变的事件":["27.24"],"定义一对多的依赖关系":["27.24"],"要实现观察者模式":["27.27"],"必须同时引入被观察者和观察者才能达到响应式的效果":["27.27"],"订阅者":["27.28","27.30"],"增加复杂度":["27.31"],"弱化了联系":["27.31"],"else":["29.1","30.4"],"typeof":["29.1"],"js":["30.2","75.1"],"string":["30.3","48.3"],"正常添加字符":["30.4"],"这是好写法":["30.4"],"break":["32.0"],"replace":["32.0"],"undefined":["32.0"],"received":["32.0"],"person2":["33.1"],"let":["33.1","76.0","83.0","84.0"],"person3":["33.1"],"user2":["33.2"],"splitting":["34.1"],"模块热更新等":["34.1"],"将上一步经过转换过的抽象语法树生成新的代码":["34.2"],"acorn":["34.2"],"是一个":["34.2"],"将":["34.3","35.3"],"的节点源码使用":["34.3"],"magic":["34.3"],"自身的可扩展性":["34.4"],"resolveid":["34.5"],"一旦有插件的":["34.5"],"返回了一个路径":["34.5"],"buildend":["34.7","35.12","35.14"],"writebundle":["34.8"],"rendererror":["34.8"],"元信息":["34.9"],"返回值跟":["34.9"],"钩子类似":["34.9"],"既可以返回包含":["34.9"],"也可以通过返回":["34.9"],"来跳过当前钩子的处理":["34.9"],"产物生成最后一步":["34.9"],"generatebundle":["34.9"],"是异步串行的钩子":["34.9"],"plugin":["34.10","50.5"],"是分开的":["34.10"],"可以直接在集中在一个插件":["34.10"],"rollup":["35.1"],"打包你的代码":["35.1"],"并且它是预配置的":["35.1"],"json":["35.3","50.23"],"里的依赖":["35.3"],"lockfile":["35.3"],"optimizedeps":["35.3"],"里的内容":["35.3"],"单文件编译":["35.3"],"jsx":["35.3"],"编译工具":["35.3"],"插件":["35.3"],"x":["35.3"],"钩子":["35.4"],"反之不一定":["35.5"],"利用浏览器的":["35.6"],"支持":["35.6"],"同时在服务中会创建依赖某块图":["35.8"],"使用":["35.8"],"chokidar":["35.8"],"监听文件变化":["35.8"],"监听到变化还是根据依赖图生产":["35.8"],"边界模块":["35.8"],"后续的更新操作只在":["35.8"],"懒加载慢":["35.9"],"生产阶段则是和":["35.11"],"closebundle":["35.12"],"的内容":["35.13"],"handlehotupdate":["35.13","35.14"],"用来进行热更新模块的过滤":["35.13"],"服务关闭阶段":["35.14"],"依次执行":["35.14"],"post":["35.15","45.1","50.6"],"hdr":["35.17"],"规范":["35.17"],"对依赖分析出边界":["35.17"],"生成":["35.17","42.0"],"会定义出哪些是使用":["35.18"],"哪些是未使用的变量":["35.18"],"生成代码写时也只会":["35.18"],"逻辑复用通常通过":["36.0"],"mixins":["36.0"],"实现":["36.0"],"但":["36.0"],"存在一些问题":["36.0"],"如命名空间冲突":["36.0"],"不透明的数据来源等":["36.0"],"通过自定义函数和":["36.0"],"hooks":["36.0"],"的方式来实现逻辑的复用和封装":["36.0"],"这提供了更好的组织和维护大型应用的能力":["36.0"],"总的来说":["36.0"],"提供了一种更现代化":["36.0"],"之间的差异":["37.1"],"以便决定如何最有效地更新真实的":["37.1"],"花费的时间也多":["37.2","98.0"],"并且维护性也不高":["37.2","98.0"],"updatechildren":["37.3"],"使用双端比较算法比较":["37.3"],"根据比较结果生成描述补丁或者指令":["37.3"],"静态内容的处理":["37.4"],"引入了一种静态标记机制来优化静态内容的处理":["37.4"],"然而":["37.4"],"如果开发者不当地使用这种机制":["37.4"],"例如":["37.4"],"错误地标记了应该动态更新的内容":["37.4"],"那么可能会导致性能问题或不可预期的行为":["37.4"],"请注意":["37.4"],"这些缺陷并不是":["37.4"],"newendidx":["37.5"],"第六步":["37.5"],"上面都没命中":["37.5"],"keymap":["37.5"],"中寻找对应的":["37.5"],"index":["37.5","37.7","64.0"],"参照节点下标数组做位置替换":["37.6"],"如果遍历下标匹配待最长子序列的索引":["37.6"],"则不替换":["37.6"],"然后再新增删除对应的节点":["37.6"],"静态节点提升":["37.6"],"n":["37.7"],"updata":["37.7"],"line":["37.7"],"lineindex":["37.7"],"tail":["37.7"],"通常是":["39.1"],"毫秒":["39.1"],"而且在一些情况下可能会导致性能问题":["39.1"],"在实际应用中":["39.1"],"会根据当前环境自动选择最适合的兼容方式":["39.1"],"开发者通常不需要手动处理这些兼容性问题":["39.1"],"因为":["39.1","46.2"],"已经在内部处理好了":["39.1"],"实例的数据之间创建双向数据绑定":["40.1"],"子组件内部不能属性名和方法名":["40.2"],"vue3":["40.2"],"是将":["40.2"],"两者结合了起来":["40.2"],"只有":["40.2"],"生命周期":["41.1"],"的生命周期钩子":["41.1"],"onbeforemount":["41.1"],"在组件被挂载之前被调用":["41.1"],"onmounted":["41.1"],"在组件挂载完成后执行":["41.1"],"onbeforeupdate":["41.1"],"在组件即将因为响应式状态变更而更新其":["41.1"],"树之前调用":["41.1"],"onupdated":["41.1"],"在组件因为响应式状态变更而更新其":["41.1"],"树之后调用":["41.1"],"onbeforeunmount":["41.1"],"在组件实例被卸载之前调用":["41.1"],"onunmounted":["41.1"],"在组件实例被卸载之后调用":["41.1"],"onerrorcaptured":["41.1"],"在捕获了后代组件传递的错误时调用":["41.1"],"onrendertracked":["41.1"],"当组件渲染过程中追踪到响应式依赖时调用":["41.1"],"render":["42.0"],"函数":["42.0"],"执行":["42.0"],"的不监听属性的增加":["44.2"],"不监听未被":["44.2"],"依赖收集的发生点不同":["44.3"],"c":["44.3","86.9"],"或":["45.0"],"pre":["45.0"],"但你可以通过设置":["45.1"],"flush":["45.1"],"更合适":["45.2"],"如果你需要自动追踪依赖":["45.2"],"并且不关心旧值和新值":["45.2"],"用来收集该属性的观察者":["46.1"],"观察者":["46.1"],"如果访问的时":["46.2"],"里的数组时":["46.2"],"会检查当前的观察者对象":["46.2"],"然后将其加入到数组的":["46.2"],"对象的列表里":["46.2"],"当触发了自定义的数组方法":["46.2"],"则会观察者会去执行更新":["46.2"],"内部包含渲染方法":["46.3"],"trigger":["46.4"],"方法做更新":["46.4"],"内部首先会查找当前对象里有没有这个属性":["46.4"],"有就查找":["46.4"],"集合里的":["46.4"],"挂载到":["47.1"],"挂载完在执行":["47.1"],"commit":["47.3"],"接受":["47.3"],"的方法名和修改的数据值参数":["47.3"],"内部通过获取":["47.3"],"代入数据值参数":["47.3"],"这类":["47.4"],"color":["48.3"],"单独组件颜色设置":["48.3"],"滚动数字颜色":["48.3"],"bundles":["50.1"],"它们均为静态资源":["50.1"],"es5":["50.2"],"支持多种模块文件类型":["50.2"],"loader":["50.4"],"进行转换":["50.4"],"里":["50.5"],"mini":["50.5"],"extract":["50.5"],"提取":["50.5"],"后置":["50.6"],"执行顺序才是由右向左":["50.7"],"或者由下到上执行":["50.7"],"picth":["50.7"],"从左往右":["50.7"],"这里的":["50.7"],"但是不禁用":["50.8"],"postloaders":["50.8"],"也就是不要":["50.8"],"如果":["50.9"],"pitch":["50.9"],"有返回值":["50.9"],"则会中断后面的":["50.9"],"注入环境变量":["50.10"],"内容写到磁盘文件夹之后":["50.11"],"done":["50.11"],"asyncseriesbailhook":["50.12"],"异步串行熔断钩子":["50.12"],"asyncseriesloophook":["50.12"],"异步串行循环钩子":["50.12"],"stylesheet":["50.16"],"url":["50.16"],"或者":["50.16"],"html":["50.16"],"里实例化":["50.17"],"ws":["50.18"],"通知浏览器更新":["50.18"],"浏览器根据编译标识获取到更新文件":["50.18"],"模块中哪些导出值未曾其他模块使用":["50.20"],"并将其删除":["50.20"],"编写模块代码":["50.21"],"禁止":["50.21"],"babel":["50.21"],"转译模块导入导出语句":["50.21"],"推荐用命令行设置":["50.22"],"开发模式注重代码热替换更快":["50.22"],"让开发调试代码更便捷":["50.22"],"生产模式注重项目体积更小":["50.22"],"stringify":["50.23"],"s":["50.25","93.0"],"environment":["50.25"],"导出时的全局变量":["50.26"],"捆绑包和代码块之间存在一对多的关系":["50.29"],"一个捆绑包可以包含多个代码块":["50.29"],"而一个代码块也可以属于多个不同的捆绑包":["50.29"],"这取决于":["50.29"],"输出完成":["50.30"],"在确定好输出内容后":["50.30"],"根据配置确定输出的路径和文件名":["50.30"],"把文件内容写入到文件系统":["50.30"],"在以上过程中":["50.30"],"webpack":["50.30"],"会在特定的时间点广播出特定的事件":["50.30"],"插件在监听到感兴趣的事件后会执行特定的逻辑":["50.30"],"indicator":["52.0"],"然后通过代理渲染到":["54.1"],"filepath":["55.0","56.0","57.0","75.0","78.0","80.0","82.0","89.0","94.0","99.0","104.0","106.0","107.0","108.0","112.0","113.0","114.0","115.0"],"进击的面试":["55.0","56.0","57.0","75.0","78.0","80.0","81.0","82.0","89.0","94.0","99.0","103.0","104.0","106.0","107.0","108.0","112.0","113.0","114.0","115.0"],"盒模型":["55.0"],"标准和ie盒模型":["55.1"],"margin和padding":["56.0"],"自动换行":["57.1"],"视图不够":["57.2"],"跟随前一相同float的文本流":["57.2"],"不想受影响元素前":["57.3"],"sticky":["58.0"],"粘性定位":["58.0"],"block":["59.0"],"formatting":["59.0"],"context":["59.0"],"提高层级":["59.1"],"触发bfc的元素":["59.1"],"10px":["59.2"],"top":["59.2"],"100px":["59.2"],"border":["59.2"],"左右浮动":["59.4"],"合并多次对dom的样式修改":["60.0"],"原生的csstext":["60.0"],"class更改元素":["60.0"],"片段修改dom":["60.0"],"获取要修改的dom":["60.0"],"表单低代码平台":["61.0"],"用来做事务的自动流转":["61.0"],"在上一家公司从开发人员晋升到了前端组长":["61.0"],"同时职责也多了":["61.0"],"比如搭建通用脚手架":["61.0"],"前端公共组件库":["61.0"],"指定前端规范":["61.0"],"代码质量把控":["61.0"],"疑难问题帮助解决这些":["61.0"],"会使用同nestjs":["61.0"],"textarea":["62.0"],"text":["62.0"],"cols":["62.0"],"eventloop":["63.0"],"md":["63.0","65.0","103.0"],"event":["63.0"],"finally":["63.2"],"await":["63.3","66.0"],"返回的promise会被放到微任务队列":["63.3"],"await后的值包裹在一个promise":["63.4"],"resolve中":["63.4"],"await直接加进微任务":["63.4"],"format":["63.5"],"webp":["63.5"],"ignore":["63.5"],"一个操作任务时":["63.6"],"会把这个任务加到队列中":["63.6"],"之后分两种情况":["63.6"],"线程池中的线程都被占用的时候":["63.6"],"队列中任务就要进行排队等待空闲线程":["63.6"],"线程池中有可用线程时":["63.6"],"on":["63.8","89.9","92.0"],"fn":["63.8"],"或者http":["63.8"],"server":["63.8"],"退出该阶段":["63.9"],"check阶段":["63.9"],"closing阶段":["63.9"],"检测有没有监听的close回调":["63.9"],"setimmediate2":["63.10"],"nexttick2":["63.10"],"finally直接触发":["64.0"],"没参数没返回":["64.0"],"promiselist":["64.0"],"count":["64.0"],"用来判断有没有全部执行完毕":["64.0"],"resdata":["64.0"],"存储返回值":["64.0"],"赋值empty空值":["64.0"],"向返回值添加值":["64.0"],"并":["64.0"],"相当于完毕一个执行":["64.0"],"等于0时res返回值":["64.0"],"all结束":["64.0"],"judge":["64.0"],"result":["64.0"],"generator":["65.0"],"next方法可以带一个参数":["65.1"],"该参数就会被当作上一个yield表达式的返回值":["65.1"],"value":["65.2","78.3"],"i3":["65.2"],"description":["66.0"],"async":["66.0"],"基于generator":["66.0"],"data3":["66.1"],"不需要同步得瑟尽量不要使用它":["66.2"],"time":["67.0"],"打印函数":["68.0"],"var":["68.0"],"function":["68.0","86.1","88.0","88.1","89.13"],"而堆内存中的引用类型":["69.0"],"正是由于可以经常变化":["69.0"],"大小不固定":["69.0"],"因此需要":["69.0"],"javascript":["69.0"],"内部的":["69.1"],"就会被干掉":["69.3"],"当0时":["69.4"],"执行阶段":["70.0"],"变量赋值":["70.0"],"函数的引用":["70.0"],"执行其他代码":["70.0"],"pic4":["70.0"],"打印":["71.0"],"会复制":["71.1"],"如果这个内函数引用到了外层级的变量":["72.0"],"非全局变量":["72.0"],"浏览器会为这个内函数的作用域链上添加一个含这个变量的closure作用域":["72.0"],"这个作用域称之为闭包":["72.0"],"dir":["72.0"],"setinterval":["72.3"],"this":["73.0","85.0","100.2"],"arg1":["73.0"],"arg2":["73.0"],"变量被声明了":["74.0"],"但没有赋值时":["74.0"],"就等于undefined":["74.0"],"调用函数时":["74.0"],"应该提供的参数没有提供":["74.0"],"但是函数具有某些特殊属性":["75.1"],"因此通过typeof来区分函数和其他对象是有必要的":["75.1"],"proto":["75.2"],"str4":["75.3"],"都是声明变量":["76.0"],"没有变量提升":["76.1"],"声明前使用报not":["76.1"],"作响应式加载":["77.1"],"bg":["77.1"],"narrow":["77.1"],"media":["77.1"],"max":["77.1"],"600px":["77.1"],"wide":["77.1"],"min":["77.1"],"601px":["77.1"],"demo":["77.1"],"模块只会加载一次":["77.2"],"无论前后你写了多少次":["77.2"],"不支持":["77.2"],"注释":["77.2"],"module有自己的词法作用域":["77.2"],"文档解析完毕":["77.3"],"页面重新渲染":["77.3"],"页面内引用的所有同步代码执行完毕":["77.3"],"触发domcontentloaded事件":["77.3"],"html文档中的图片资源":["77.3"],"es6新增的数据结构":["79.0"],"类似数组":["79.0"],"但它的一大特性就是所有元素都是唯一的":["79.0"],"没有重复的值":["79.0"],"一般称为集合":["79.0"],"values":["79.1"],"返回键值的遍历器":["79.1"],"entries":["79.1"],"返回键值对的遍历器":["79.1"],"list3":["79.4"],"obj2":["79.5"],"f":["79.5"],"解析类数组为数组":["79.9"],"unique2":["79.9"],"join":["79.10"],"差集":["79.11"],"difference":["79.11"],"对象和":["80.1"],"blob":["80.1"],"对象":["80.1"],"gzip压缩":["80.1"],"静态资源最好本地打包时压好":["80.1"],"不要让服务器响应时去压":["80.1"],"静态资源压缩":["80.1"],"合并":["80.1"],"sprites图片":["80.1"],"资源懒加载":["80.1"],"起本地服务":["80.2"],"资源放本地":["80.2"],"localstorage":["80.3"],"大得多":["80.3"],"一般来说不少于":["80.3"],"250mb":["80.3"],"甚至没有上限":["80.3"],"源限制":["80.3"],"受到同源限制":["80.3"],"每一个数据库对应创建它的域名":["80.3"],"网页只能访问自身域名下的数据库":["80.3"],"的区别":["81.0"],"提交没做过滤转义":["82.1"],"服务端接收和返回都没做处理":["82.1"],"返回给页面":["82.1"],"页面做读取渲染":["82.1"],"policy":["82.2"],"设置http头部":["82.2"],"点进了用户b引诱的网页b":["82.3"],"b内向网站a的服务发送了恶意请求":["82.3"],"只能url和请求url同样时才带上cookies":["82.4"],"drop":["83.0"],"num":["83.0"],"第一个鸡蛋的分块层":["83.0"],"flag":["83.0"],"循环次数":["83.0"],"看作扔鸡蛋次数":["83.0"],"for":["83.0","84.0"],"sum":["84.0"],"i":["84.0"],"函数的argumnets":["85.0"],"非箭头函数":["85.0"],"其包含两个自动生成的变量对象":["85.0"],"展开运算符":["85.2"],"跨域请求":["86.0"],"跨域问题":["86.0"],"同源策略仅是针对浏览器的安全策略":["86.0"],"服务器端调用http接口只是使用http协议":["86.0"],"onreadystatechange":["86.1"],"readystate":["86.1"],"从而前端拿到callback函数返回的数据":["86.2"],"目前":["86.3"],"所有浏览器都支持该功能":["86.3"],"方便接口登录认证":["86.5"],"把两个的document":["86.8"],"domain设置为maps131":["86.8"],"com就ok了":["86.8"],"domain1":["86.9"],"write":["86.10"],"close":["86.10"],"removechild":["86.10"],"请求跨域b页面数据":["86.10"],"domain2":["86.10","86.11"],"iframe":["86.11"],"id":["86.11"],"http":["86.11","108.5"],"www":["86.11"],"com":["86.11"],"箭头函数没有原型":["87.1"],"浏览器会自动创建了其原型对象":["88.0"],"原型对象中的constructor指向enum":["88.0"],"enum的prototype指向原型对象":["88.0"],"enum":["88.0"],"我们称为":["88.2"],"prototype":["88.3"],"commonjs和es6module的区别":["89.0"],"可以在编译时就完成模块加载":["89.1"],"效率要比":["89.1"],"模块的加载方式高":["89.1"],"当然":["89.1"],"上面的文件地址":["89.2"],"上面打印":["89.2"],"module":["89.2","89.12"],"引用类型之后变成100":["89.2"],"ƒ":["89.2"],"object":["89.2","89.8","89.13"],"引入了全部":["89.3"],"又单独引入了其他模块":["89.3"],"重复了":["89.3"],"但可以这样做":["89.3"],"ns":["89.4"],"mod":["89.4"],"loadpageinto":["89.5"],"err":["89.5"],"对其他文件不可见":["89.7"],"true":["89.8","89.15"],"paths":["89.8"],"home":["89.8"],"user":["89.8"],"deleted":["89.8"],"就是一个单一的值":["89.10"],"不能使用exports输出":["89.10"],"只能使用module":["89.10"],"而且是一个路径":["89.12"],"比如require":["89.12"],"example":["89.12"],"path":["89.12","106.1"],"to":["89.12"],"file":["89.12"],"则将先找到example":["89.12"],"module的位置":["89.12"],"然后再以它为参数":["89.12"],"找到后续路径":["89.12"],"删除所有模块的缓存":["89.13"],"keys":["89.13"],"foreach":["89.13"],"js和b":["89.14"],"js时":["89.14"],"会直接从缓存读取exports属性":["89.14"],"所以a":["89.14"],"js内部的console":["89.14"],"log语句都不会执行了":["89.14"],"node":["89.14","116.0"],"调用执行的时候":["89.15"],"通过require加载该脚本执行":["89.15"],"即module":["89.16"],"exports属性":["89.16"],"该对象只有在脚本运行完才会生成":["89.16"],"而":["89.16"],"arguments不会自动反映函数参数的变化":["90.0"],"不能使用arguments":["90.0"],"callee":["90.0"],"caller":["90.0"],"禁止this指向全局对象":["90.0"],"somearr":["91.0"],"while":["91.0"],"some":["91.0","93.0"],"eventbus":["92.0"],"hometask":["92.0"],"res":["92.0"],"another":["93.0"],"one":["93.0"],"contact":["93.0"],"值":["94.1"],"我们可以使用":["94.1"],"hashchange":["94.1","94.3"],"replacestate":["94.2"],"当前页面的hash值发生变化时触发":["94.3"],"作用":["95.0"],"在下次":["95.0"],"更新循环结束之后执行延迟回调":["95.0"],"然后在事件循环时优先触发":["95.1"],"但如果浏览器不支持":["95.1"],"标签上也会带上":["96.0"],"div":["96.0"],"class":["96.0"],"key的作用主要是为了高效的更新虚拟dom":["97.0"],"其原理是vue在patch过程中通过key可以精准判断两个节点是否是同一个":["97.0"],"从而避免频繁更新不同元素":["97.0"],"使得整个patch过程更加高效":["97.0"],"减少dom操作":["97.0"],"提高性能":["97.0"],"但页面结构复杂":["98.0"],"数据又多时":["98.0"],"这样就要写更多的代码":["98.0"],"旧尾节点根新起始节点比较":["98.1"],"还不值用key比较":["98.1"],"defineproperty的不监听属性的增加":["99.1"],"有get和set方法":["99.2"],"set内可以使用异步函数":["99.2"],"writable":["100.0"],"上面的value才能被赋值运算符改变":["100.0"],"get":["100.0"],"取值":["100.0"],"不触发set":["100.1"],"data":["100.2"],"key":["100.2"],"需要在这重新赋值":["101.0"],"不像defineproperty":["101.0"],"innertext":["101.0"],"还有":["101.1"],"修改不会直接设置属性":["101.2"],"允许组件有多个根元素":["102.0"],"template允许设置key":["102.0"],"scopedslots正式弃用":["102.0"],"监听数组变化需要用deep属性啦":["102.0"],"mvc和mvvm":["103.0"],"00":["104.0"],"全部解析编译玩":["105.0"],"整理所有chunk":["105.0"],"准备输出":["105.0"],"询问插件哪些文件需要输出":["105.0"],"哪些不需要":["105.0"],"执行输出文件":["105.0"],"成功完成一次编译和输出流程":["105.0"],"mainrouter":["106.1","106.5"],"router":["106.1"],"new":["106.1"],"h":["106.1"],"window":["106.1","106.4"],"powered":["106.1"],"by":["106.1"],"动态添加publicpath":["106.1"],"public":["106.1"],"if":["106.4"],"qiankunstarted2":["106.4"],"storemian":["106.5"],"shadow":["107.2"],"请求者已要求服务器切换协议":["108.1"],"服务器已确认并准备进行切换":["108.1"],"部分内容":["108.2"],"服务器返回此响应时":["108.3"],"不会返回网页内容":["108.3"],"使用代理":["108.3"],"请求者只能使用代理访问请求的网页":["108.3"],"如果服务器返回此响应":["108.3"],"还表示请求者应使用代理":["108.3"],"过长":["108.4"],"通常为网址":["108.4"],"服务器无法处理":["108.4"],"不支持的媒体类型":["108.4"],"请求的格式不受请求页面的支持":["108.4"],"但是没有及时从上游服务器收到请求":["108.5"],"data是一个函数":["109.0"],"组件实例化的时候这个函数将会被调用":["109.0"],"返回一个对象":["109.0"],"计算机会给这个对象分配一个内存地址":["109.0"],"你实例化几次":["109.0"],"在切换时会做内部事件子组件的销毁和重建":["110.0"],"性能消耗会更大些":["110.0"],"但它隐藏状态时":["110.0"],"初始不会去渲染":["110.0"],"而v":["110.0"],"show是通过控制样式的display做显隐":["110.0"],"一起使用时":["111.0"],"具有比":["111.0"],"更高的优先级":["111.0"],"这意味着":["111.0"],"09":["115.0"],"js常用":["116.0"],"css相关":["116.0"],"ts":["116.0"],"qiankun":["116.0"]},{"0":["15.8"],"1":["24.2","63.5"],"2":["24.2","29.2","97.0","98.0"],"3":["0.1","24.2","35.9","60.0","66.2","74.0","76.1"],"4":["13.2","15.9","18.2","74.0","76.1"],"5":["15.9","87.1"],"6":["1.3","22.7","34.3","47.3","58.0","89.12"],"7":["46.4","47.1","58.0","61.0"],"8":["116.0"],"9":["20.2","41.1","80.1","116.0"],"10":["16.6","25.0","41.1","62.0","80.1"],"11":["41.1","63.9","80.1"],"12":["80.1","102.0"],"13":["102.0"],"14":["90.0"],"15":["90.0"],"30":["62.0"],"80":["70.0"],"89":["22.8"],"99":["75.1"],"100":["0.0","14.4","66.1"],"135":["83.0"],"200":["86.1"],"307":["108.3"],"417":["108.4"],"800":["13.5"],"900":["13.5"],"1000":["72.3"],"3000":["101.0"],"指定容器必须滚动容器的子元素":["0.1"],"它控制了子元素在其网格区域内的块向轴上的对齐":["1.3"],"定义沿着弹性盒子布局的纵轴和网格布局的主轴在内容项之间和周围分配空间":["1.3"],"developer":["1.4"],"mozilla":["1.4"],"org":["1.4"],"zh":["1.4"],"cn":["1.4"],"docs":["1.4"],"web":["1.4","37.4"],"css":["1.4"],"的元素":["1.5"],"最好设置":["1.5"],"overflow":["1.5"],"属性":["1.5"],"不然超出比例值":["1.5"],"会挤压同轴上的其他元素高度":["1.5"],"设置为弹性盒子":["1.5"],"子元素时行内元素会被转换为块级元素":["1.5"],"10vmax":["2.2"],"觉得需要记下来的东西":["4.0"],"做成示例文档":["4.0"],"方便直观查看":["4.0"],"然后生成这个博客":["4.0"],"等于自身":["6.2"],"可能会更快些":["6.3"],"因为它匹配到第一项就会停止":["6.3"],"所以无法用父页面的数组判断方法去判断子页面的数组":["7.4"],"inex":["8.1"],"values":["8.4"],"true":["8.6","106.4"],"去处理计算密集型去重操作":["8.7"],"末尾":["9.2"],"多出部分往":["9.3"],"toselectindex":["9.3"],"按顺序插入":["9.3"],"return":["11.1","30.4","83.0"],"console":["12.0","83.0","86.1"],"log":["12.0","83.0","86.1"],"bind":["13.2","73.0"],"类似柯里化":["13.3"],"需要手动调用":["13.4"],"查看变量的值以及调用栈等信息":["14.2"],"从而更容易地定位和解决问题":["14.2"],"总之":["14.2"],"为":["14.2"],"的异步编程带来了许多好处":["14.2"],"使得代码更加清晰":["14.2"],"同时提供了更好的错误处理和调试体验":["14.2"],"执行":["14.3"],"data3":["14.4"],"中也提供了相同功能":["15.1"],"缺少状态意味着如果后续处理需要前面的信息":["15.2"],"则它必须重传":["15.2"],"这样可能导致每次连接传送的数据量增大":["15.2"],"另一方面":["15.2"],"在服务器不需要先前信息时它的应答就较快":["15.2"],"协议":["15.3"],"建立连接和断开":["15.3"],"分为三块":["15.5"],"证书验证":["15.5"],"公钥加密":["15.5"],"key":["15.5","89.13"],"传输初始信息":["15.5"],"私钥解密":["15.5"],"非对称":["15.5"],"私钥加密解密传输数据":["15.5"],"对称":["15.5"],"服务器主动推送":["15.9"],"更安全":["15.9"],"使用":["15.9","34.10"],"tls":["15.9"],"做了拓展":["15.9"],"服务器推送":["15.11"],"允许服务器将响应主动推动到客户端缓存中":["15.11"],"避免了后续请求这些资源时的往返时间浪费":["15.11"],"通过头部压缩和多路复用等技术提高了传输效率":["15.12"],"但它也可能导致更高的带宽需求":["15.12"],"因为在一个连接上并发处理多个请求时":["15.12"],"可能会同时传输更多的数据":["15.12"],"可维护性和错误处理能力":["16.2"],"通过使用":["16.2"],"我们可以更轻松地编写高效":["16.2"],"健壮的异步代码":["16.2"],"all":["16.3"],"这样让链式调用成功执行":["16.4"],"如果是等待任务则将链式调用加入到对应的回调列表里":["16.4"],"等业务逻辑":["16.4"],"后":["16.4"],"取出这里的回调列表数据":["16.4"],"然后处理函数去处理":["16.4"],"那再执行":["16.5"],"如果没有传入":["16.5"],"函数":["16.5"],"则去看有没有链式调用":["16.5"],"优先级高于":["16.5"],"会使用":["16.6"],"try":["16.6"],"如果触发":["16.6"],"则会执行":["16.6"],"如果状态为":["16.6"],"rejected":["16.6"],"但又没":["16.6"],"则直接执行":["16.6"],"去触发最近的":["16.6"],"显示绑定可以修改":["17.1"],"指向":["17.1","17.5"],"而不是在函数被定义时确定":["17.3"],"这使得你可以根据需要在不同的上下文中使用相同的函数":["17.3"],"灵活性":["17.3"],"由于":["17.3"],"的值可以在运行时改变":["17.3"],"因此它提供了很大的灵活性":["17.3"],"你可以根据需要更改函数的上下文":["17.3"],"从而改变":["17.3"],"的引用":["17.3"],"审题":["17.6"],"let":["18.1"],"b":["18.1"],"判断时两者转换为":["18.2"],"false":["18.2"],"mutationobserver":["19.2","63.2"],"浏览器环境":["19.2"],"等":["19.2"],"这些任务会被添加到微任务队列中":["19.2"],"并在每个宏任务执行完毕后立即执行":["19.2"],"这样往复的动作":["19.3"],"叫做事件循环":["19.3"],"托管资源":["20.1"],"懒加载方案":["20.2"],"javascript":["21.1","26.2"],"会沿着原型链向上查找":["21.1"],"只有函数才有原型对象":["21.2"],"在编译阶段":["22.1"],"会去收集所有的变量声明":["22.1"],"提前让声明生效":["22.1"],"剩下的在执行阶段生效":["22.1"],"可见性和生命周期":["22.2"],"容错性好":["22.3"],"到变量环境中查找":["22.7"],"当函数作用域执行完":["22.7"],"函数作用域就会从栈顶弹出":["22.7"],"去掉":["22.8"],"行就正常了":["22.8"],"即使它是全局对象的属性":["23.1"],"将当前空闲区和使用对调":["23.7"],"增加删除元素":["25.0"],"字体大小改变":["25.0"],"会触发页面的重新布局和节点信息计算":["25.0"],"这个动作称之为回流":["25.0"],"重排":["25.0"],"同时也会重新触发非几何的渲染比如颜色":["25.0"],"可见性":["25.0"],"布局没变的文本修改":["25.0"],"这个动作称之为重绘":["25.0"],"如果只修改颜色":["25.0"],"文本":["25.0"],"则只触发重绘":["25.0"],"yield":["26.1"],"也不能作为生成器函数创建":["26.1"],"引擎都支持尾调用优化":["26.2"],"tail":["26.2"],"call":["26.2"],"optimization":["26.2"],"tco":["26.2"],"这可以提高某些递归函数的性能":["26.2"],"虽然这不是箭头函数特有的":["26.2"],"但使用箭头函数编写递归函数时":["26.2"],"你可以更容易地利用":["26.2"],"如果适用":["26.2"],"来替代它":["26.4"],"对象":["26.5","79.8","80.3"],"如果需要实现继承":["27.9"],"可能需要额外的设计或转换工作":["27.9"],"但是输入类型却不可预知":["27.13"],"可能使代码难以阅读和理解":["27.15"],"由于适配器模式涉及到多个类和接口之间的交互":["27.15"],"因此代码可能会变得复杂且难以理解":["27.15"],"如果适配器类的设计不够清晰和简洁":["27.15"],"可能会使其他开发人员难以理解和维护代码":["27.15"],"不满足最少知识原则":["27.23"],"增加了使用成本":["27.23"],"发布者":["27.28"],"难以维护调用关系":["27.31"],"增加了理解成本":["27.31"],"整数部分和小数部分拼接":["30.4"],"负数":["31.2"],"负数绝对值":["31.2"],"相同返回空字符串":["31.3"],"data":["32.0","64.0","86.10"],"output":["32.0","34.9"],"报类型错误":["33.1"],"person32":["33.1"],"没问题":["33.1"],"这意味着它更适合用来做类库项目的打包器而不是应用程序项目的打包器":["34.1"],"语法解析器":["34.2"],"它将":["34.2"],"字符串解析成语法抽象树":["34.2"],"string":["34.3"],"拼接":["34.3"],"返回合并的代码":["34.3"],"根据配置信息生成文件":["34.3"],"将停止执行后续插件的":["34.5"],"逻辑":["34.5"],"closebundle":["34.8","35.14"],"你可以在这个钩子里面自定义删除一些无用的":["34.9"],"或者静态资源":["34.9"],"或者自己添加一些文件":["34.9"],"入参分别为":["34.9"],"配置":["34.9"],"所有打包产物的元信息对象":["34.9"],"通过操作元信息对象你可以删除一些不需要的":["34.9"],"也可以通过":["34.9"],"插件上下文对象的":["34.9"],"emitfile":["34.9"],"方法输出自定义文件":["34.9"],"transform":["34.10"],"renderchunk":["34.10"],"钩子":["34.10"],"可输出用于生产环境的高度优化过的静态资源":["35.1"],"单文件进行语法转译":["35.3"],"这个插件功能在开发环境和生产环境都会执行":["35.3"],"但其没有检查":["35.3"],"类型的功能":["35.3"],"所以在":["35.3"],"构建脚本里有":["35.3"],"tsc":["35.3"],"命令":["35.3"],"先做代码类型检查":["35.3"],"压缩代码":["35.3"],"共享":["35.3"],"和原生语言编写的压缩逻辑效率都比传统工具快极其多":["35.3"],"不支持拆包策略":["35.4"],"实现真正的按需加载":["35.6"],"边界内生效":["35.8"],"页面访问后在客户端使用":["35.8"],"websocket":["35.8"],"建立连接":["35.8"],"根据接收到的信息":["35.8"],"由浏览器去加载变化的文件":["35.8"],"做模块的操作":["35.8"],"生态不如":["35.9"],"一样":["35.11"],"或者进行自定义的热更新处理":["35.13"],"后置构建插件":["35.15"],"如压缩插件":["35.15"],"新模块":["35.17"],"交给浏览器更新替换删":["35.17"],"去将使用的变量加入字符串生成当中":["35.18"],"实现":["35.18"],"更灵活的方式来编写":["36.0"],"组件":["36.0"],"特别是在处理大型和复杂的应用时":["36.0"],"然而":["36.0"],"仍然是一个有效的选择":["36.0"],"尤其是在小型或中等规模的应用中":["36.0"],"或者当开发者对":["36.0"],"的":["36.0"],"不太熟悉时":["36.0"],"然后执行补丁指令":["37.3"],"更新到真实的":["37.3"],"dom":["37.3","107.2"],"上":["37.3"],"算法本身的问题":["37.4"],"而是在某些特定情况下可能会出现的潜在问题":["37.4"],"在大多数情况下":["37.4"],"算法仍然是一个非常高效和可靠的工具":["37.4"],"可以帮助开发者构建高性能的":["37.4"],"应用程序":["37.4"],"有则移动":["37.5"],"没就插入":["37.5"],"第七步":["37.5"],"循环结束":["37.5"],"比较新旧节点的开始结束下标":["37.5"],"做后面添加和删除节点":["37.5"],"编译时会记录不包含数据劫持的标签节点":["37.6"],"在更新直接使用这些节点":["37.6"],"同时再":["37.6"],"对比时直接跳过这些节点":["37.6"],"break":["37.7"],"endres2":["37.7"],"不过":["39.1"],"如果你需要在特定的环境中支持":["39.1"],"你可能需要确保这些环境支持":["39.1"],"或者其他相关的异步":["39.1"],"api":["39.1","47.4","50.30"],"或者引入相应的":["39.1"],"polyfills":["39.1"],"来模拟这些功能":["39.1"],"给组件传递了一个属性和":["40.2"],"可以多个":["40.2"],"后面":["40.2"],"自定义名名称":["40.2"],"onrendertriggered":["41.1"],"当响应式依赖的变更触发了组件渲染时调用":["41.1"],"onactivated":["41.1"],"组件实例是":["41.1"],"keepalive":["41.1"],"缓存树的一部分":["41.1"],"当组件被插入到":["41.1"],"中时调用":["41.1"],"ondeactivated":["41.1"],"若组件实例是":["41.1"],"当组件从":["41.1"],"中被移除时调用":["41.1"],"onserverprefetch":["41.1"],"在组件实例在服务器上被渲染之前调用":["41.1"],"v":["41.1"],"if":["41.1"],"for":["41.1","64.0"],"的实现":["41.1"],"多根节点处理":["41.1"],"jsx":["41.1"],"的写法还是一个":["41.1"],"遵循":["41.1"],"规范":["41.1"],"函数生成虚拟":["42.0"],"最后生成实际":["42.0"],"observer":["44.2"],"劫持的对象":["44.2"],"渲染时":["44.3"],"渲染前":["44.3"],"来控制是在组件更新之前还是之后执行":["45.0"],"来改变这一行为":["45.1"],"可能更方便":["45.2"],"每个组件都会有一个":["46.1"],"绑定的是组件更新":["46.1"],"只有":["46.2"],"无法监听到对象属性的增删":["46.2"],"数组也无法监听到项的修改和":["46.2"],"length":["46.2"],"的修改":["46.2"],"所以提供了":["46.2"],"set":["46.2","100.0"],"方法去触发视图更新":["46.2"],"方法":["46.4","89.12"],"然后执行":["46.4"],"没有就执行新增方法":["46.4"],"做依赖的收集":["46.4"],"渲染方法里会":["46.4"],"patch":["46.4"],"diff":["46.4"],"这些":["46.4"],"最后渲染页面":["46.4"],"的插件":["47.1"],"去修改":["47.1"],"最后将这个":["47.1"],"返回出去":["47.1"],"actions":["47.3"],"和":["47.3","50.7"],"类似":["47.3"],"生成的单参数函数内部":["47.3"],"会传入":["47.3"],"this":["47.3","86.10","88.0"],"和修改的数据值参数":["47.3"],"js":["48.2"],"unitcolor":["48.3"],"单位颜色":["48.3"],"用于展示你的内容":["50.1"],"多种模块标准语法":["50.2"],"到单文件中":["50.5"],"好让浏览器缓存":["50.5"],"需实例化到插件里":["50.5"],"less":["50.5"],"sass":["50.5"],"enforce":["50.7"],"的不是同一个东西":["50.7"],"源码处理转换在这个阶段":["50.7"],"pre":["50.8"],"链":["50.9"],"完成所有的编译过程":["50.11"],"failed":["50.11"],"编译失败的时候":["50.11"],"还有好多":["50.11"],"asyncserieswaterfallhook":["50.12"],"异步串行瀑布流钩子":["50.12"],"normalmodulefactory":["50.12"],"beforeresolve":["50.12"],"module":["50.14"],"exports":["50.14"],"img":["50.16","105.0"],"src":["50.16","105.0"],"文件中的图片链接":["50.16"],"在浏览器里做模块的更新替换删除":["50.18"],"以此实现打包产物的优化":["50.20"],"使用支持":["50.21"],"的包":["50.21"],"更轻量":["50.22"],"适配不同的浏览器环境":["50.22"],"中的依赖":["50.25"],"配置中的拆分点":["50.29"],"split":["50.29"],"points":["50.29"],"和代码块的依赖关系":["50.29"],"并且插件可以调用":["50.30"],"提供的":["50.30"],"改变":["50.30"],"的运行结果":["50.30"],"html":["52.0"],"功能强大":["54.1"],"包含子应用保活":["54.1"],"嵌套":["54.1"],"多应用激活":["54.1"],"便捷通讯":["54.1"],"生命周期":["54.1"],"插件系统等":["54.1"],"md":["55.0","56.0","57.0","75.0","78.0","80.0","81.0","82.0","89.0","94.0","99.0","104.0","106.0","107.0","108.0","112.0","113.0","114.0","115.0"],"margin":["56.0"],"float属性":["57.0"],"内联元素文档流如水排列":["57.2"],"如果父盒子没设置高":["57.3"],"可以触发bfc":["57.3"],"当父元素在视口内时":["58.0"],"表现为relative":["58.0"],"父元素开始出视口的时候":["58.0"],"表现为fixed":["58.0"],"但不会超出父元素":["58.0"],"inherit":["58.0"],"继承父元素的定位":["58.0"],"initial":["58.0"],"设置为默认值":["58.0"],"块级格式化上下文":["59.0"],"bfc是一个独立的布局环境":["59.0"],"bfc内部的元素布局与外部互不影响":["59.0"],"浮动元素加入高度计算":["59.1"],"1px":["59.2"],"solid":["59.2"],"red":["59.2"],"box":["59.2"],"sizing":["59.2"],"中间overflow":["59.4"],"将其none":["60.0"],"然后修改":["60.0"],"最后显示出来":["60.0"],"把要重排的元素绝对定位":["60.0"],"做模糊":["61.0"],"多条件查询":["61.0"],"树状结构数据":["61.0"],"创建关系数据表":["61.0"],"多表联查":["61.0"],"webscoket":["61.0"],"sse":["61.0"],"微服务等业务功能":["61.0"],"也熟悉express和koa":["61.0"],"上家离职原因":["61.0"],"rows":["62.0"],"loop即事件循环":["63.0"],"是指浏览器或node的一种解决javascript单线程运行时不会阻塞的一种机制":["63.0"],"也就是我们经常使用异步的原理":["63.0"],"监听dom变化触发":["63.2"],"排到await就全部执行完成":["63.4"],"error":["63.5"],"从队列中取出这个任务执行":["63.6"],"执行完毕后":["63.6"],"线程归还到线程池":["63.6"],"等待下个任务":["63.6"],"同时以事件的方式通知event":["63.6"],"loop":["63.6"],"event":["63.6"],"loop接收到事件执行该事件注册的回调函数":["63.6"],"检查有没有定时器":["63.9"],"io等事件句柄":["63.9"],"有就进入下一循环":["63.9"],"没就结束循环":["63.9"],"程序结束":["63.9"],"promise1":["63.10"],"promise2":["63.10"],"返回各":["64.0"],"以便then":["64.0"],"循环调用":["64.0"],"race":["64.0"],"存储最快执行完毕的返回值":["64.0"],"有返回值了就不再触发res":["64.0"],"of":["64.0"],"声明时添加function":["65.0"],"gen":["65.0"],"i4":["65.2"],"promise":["66.0"],"目前最好的js异步处理的方法":["66.0"],"相当于generator":["66.0"],"自动执行next":["66.0"],"的语法糖":["66.0"],"await必须使用在async中":["66.2"],"不能下层级":["66.2"],"new":["67.0"],"is":["67.0","86.10","89.9"],"的引擎通过垃圾回收机制来处理":["69.0"],"js自己有套垃圾回收机制":["69.0"],"开发人员不用关心内存分配和回收问题":["69.0"],"但要知道其机制":["69.0"],"下一次垃圾回收时被干掉":["69.4"],"zhimg":["70.0"],"com":["70.0"],"v2":["70.0"],"9351d2345a9186cc0dc5aeb2be28e16f":["70.0"],"720w":["70.0"],"jpg":["70.0","105.0"],"作用域链":["71.0"],"多个作用域的对象列表":["71.0"],"用来执行上下文的检索标识符":["71.0"],"变量名":["71.0"],"参数":["71.0"],"函数名":["71.0"],"然后创建自身的变量对象加入到其作用链中":["71.1"],"内函数":["72.0"],"可在":["72.0"],"scopes":["72.0"],"内查看":["72.0"],"谷歌旧版本heap会一直递增":["72.3"],"新版已处理":["72.3"],"该参数等于undefined":["74.0"],"对象没有赋值的属性":["74.0"],"该属性的值为undefined":["74.0"],"函数没有返回值时":["74.0"],"默认返回undefined":["74.0"],"类型判断":["75.0"],"js类型判断":["75.0"],"constractor":["75.4"],"objdect":["75.5"],"不能重复声明同名变量":["76.1"],"for循环中的局部作用域":["76.1"],"会被固定":["76.1"],"不会像var一样因为事件循环机制":["76.1"],"拿的都是循环最后的值":["76.1"],"预加载":["77.1"],"不执行":["77.1"],"var":["77.1","77.2"],"preloadlink":["77.1"],"document":["77.1"],"createelement":["77.1"],"myscript":["77.1"],"appendchild":["77.1"],"插入dom执行":["77.1"],"preloadedscript":["77.1"],"比如定义一个":["77.2"],"并不会创建一个全局变量":["77.2"],"因此你并不能通过window":["77.2"],"访问到它的值":["77.2"],"js代码中的异步加载资源全部完成":["77.3"],"video":["77.3"],"audio":["77.3"],"flash不影响":["77.3"],"触发load事件":["77.3"],"window":["77.3"],"performance可查看个阶段时间":["77.3"],"深拷贝和浅拷贝":["78.0"],"对象的拷贝":["78.0"],"set本身是一个构造函数":["79.0"],"用来生成":["79.0"],"数据结构":["79.0"],"只能去重在栈区重复的":["79.1"],"像匿名对象":["79.1"],"函数无效在堆没指向的无效":["79.1"],"t":["79.5"],"以下方法":["79.8"],"函数需要在栈区有指针才有效":["79.8"],"页面优化":["80.0"],"按需加载":["80.1"],"合理搭配js":["80.1"],"css加载的位置":["80.1"],"减少dom操作":["80.1"],"避免频繁重排":["80.1"],"起本地服务":["80.1"],"资源放本地":["80.1"],"避免页面重定向":["80.1","80.2"],"而不能访问跨域的数据库":["80.3"],"支持二进制储存":["80.3"],"不仅可以储存字符串":["80.3"],"还可以储存二进制数据":["80.3"],"arraybuffer":["80.3"],"对象和":["80.3"],"blob":["80.3"],"网络安全相关":["82.0"],"web网络安全":["82.0"],"像渲染script标签":["82.1"],"执行其内代码":["82.1"],"a标签":["82.1"],"点击执行相应代码或者跳转某个地方":["82.1"],"或者在meta头带入":["82.2"],"因为请求网站a时自动带上鉴权信息":["82.3"],"所以请求能通过":["82.3"],"验证码图片相关":["82.4"],"预编译防注入":["82.6"],"c":["83.0","86.10"],"闭包递归":["84.0"],"不推荐":["84.0"],"arguments":["85.0"],"内部函数在搜索这两个变量时":["85.0"],"只会搜索到其活动对象为止":["85.0"],"不需要同源策略":["86.0"],"也就不存在跨域问题":["86.0"],"status":["86.1"],"responsetext":["86.1"],"ie浏览器不能低于ie10":["86.3"],"其他的不行会报错":["86.8"],"与a同域名端口":["86.9"],"alert":["86.10"],"html空页面与a同域名端口":["86.10"],"style":["86.11"],"display":["86.11"],"none":["86.11"],"description":["87.0"],"普通函数和箭头函数":["87.0"],"箭头函数不能当作generator函数":["87.1"],"name":["88.0"],"像object":["88.0"],"string这些都是js自带的构造函数":["88.0"],"commonjs和es6":["89.0"],"module的区别":["89.0"],"这也导致了没法引用":["89.1"],"模块本身":["89.1"],"因为它不是对象":["89.1"],"textcontent":["89.5"],"message":["89.5"],"运行时加载":["89.7"],"加载的是整个对象":["89.7"],"如果是在入口文件":["89.8"],"其parent为null":["89.8"],"exports输出":["89.10"],"如果指定的模块文件没有发现":["89.12"],"node会尝试为文件名添加":["89.12"],"json":["89.12"],"node后":["89.12"],"再去搜索":["89.12"],"js件会以文本格式的javascript脚本文件解析":["89.12"],"json文件会以json格式的文本文件解析":["89.12"],"node文件会以编译后的二进制文件解析":["89.12"],"如果想得到require命令加载的确切文件名":["89.12"],"使用require":["89.12"],"resolve":["89.12"],"上面的表达式返回false":["89.15"],"模块不是对象":["89.16"],"它的对外接口只是一种静态定义":["89.16"],"在代码静态解析阶段就会生成":["89.16"],"不能使用fn":["90.0"],"caller和fn":["90.0"],"arguments获取函数调用的堆栈":["90.0"],"增加了保留字":["90.0"],"比如protected":["90.0"],"static和interface":["90.0"],"flatten":["91.0"],"destroyed":["92.0"],"off":["92.0","102.0"],"oldheader":["93.0"],"oldmian":["93.0"],"oldfooter":["93.0"],"vue的路由模式":["94.0"],"事件来监听":["94.1"],"值的变化":["94.1"],"从而对页面进行跳转":["94.1"],"渲染":["94.1"],"替换当前地址栏里的url":["94.2"],"在修改数据之后立即使用这个方法":["95.0"],"获取更新后的":["95.0"],"就用定时器包裹":["95.1"],"在宏任务队列中执行":["95.1"],"这样就限制即使同名":["96.0"],"但data属性不同":["96.0"],"样式也不生效":["96.0"],"vue中在使用相同标签名元素的过度切换时":["97.0"],"也会使用到key属性":["97.0"],"其目的也是为了让vue可以区分它们":["97.0"],"否则vue只会替换其内部属性而不会触发过度效果":["97.0"],"同层级比较":["98.0"],"节点类型一样":["98.0"],"当classname不一样会被判定不是同类型元素":["98.0"],"删除重建":["98.0"],"直到旧节点全部比完":["98.1"],"或者新节点全部比完":["98.1"],"缺增多删":["98.1"],"diff结束":["98.1"],"vue的computed和watch":["99.0"],"不监听未被observer劫持的对象":["99.1"],"只监听对象自身":["99.2"],"不监听其内元素值改变":["99.2"],"x":["100.0"],"设置":["100.0"],"index":["100.2"],"newvalue":["100.2"],"settimeout":["101.0"],"aleadychange":["101.0"],"数组的长度增删都会会触发set":["101.1"],"需要在set自行修改属性值":["101.2"],"children":["102.0"],"被移除":["102.0"],"on":["102.0"],"once不再使用":["102.0"],"x的eventbus方法不能再使用":["102.0"],"filter被移除":["102.0"],"mvc":["103.0"],"mvp":["103.0"],"mvvm":["103.0"],"react和vue区别":["104.0"],"why":["105.0"],"webpack":["105.0"],"compile":["105.0"],"乾坤微服务":["106.0"],"injected":["106.1"],"默认独立运行":["106.1"],"export":["106.1"],"async":["106.1"],"bootstrap":["106.1"],"unmount":["106.1"],"destroy":["106.1"],"组件拿到":["106.5"],"maindata":["106.5"],"info":["106.5"],"changestoredata":["106.5"],"newstoredata":["106.5"],"子应用":["106.5"],"自身修改":["106.5"],"因为":["106.5"],"storemian修改不触发视图更新":["106.5"],"commit":["106.5"],"updatainfo":["106.5"],"乾坤原理":["107.0"],"http状态":["108.0"],"http常用的状态码":["108.0"],"服务器成功处理了部分":["108.2"],"get":["108.2"],"请求":["108.2"],"临时重定向":["108.3"],"但请求者应继续使用原有位置来进行以后的请":["108.3"],"求":["108.3"],"请求范围不符合要求":["108.4"],"如果页面无法提供请求的范围":["108.4"],"则服务器会返回此状态代码":["108.4"],"未满足期望值":["108.4"],"服务器未满足":["108.4"],"期望":["108.4"],"请求标头字段的要求":["108.4"],"版本不受支持":["108.5"],"服务器不支持请求中所用的":["108.5"],"协议版本":["108.5"],"就分配几个内存地址":["109.0"],"他们的地址都不一样":["109.0"],"所以每个组件中的数据不会相互干扰":["109.0"],"改变其中一个组件的状态":["109.0"],"其它组件不变":["109.0"],"无论显隐":["110.0"],"都会在先渲染在页面":["110.0"],"有更高的初始渲染消耗":["110.0"],"所以在显隐频繁的操作用v":["110.0"],"show会较为合适些":["110.0"],"将分别重复运行于每个":["111.0"],"循环中":["111.0"],"所以":["111.0"],"不推荐v":["111.0"],"if和v":["111.0"],"for同时使用":["111.0"],"vue表单的双向绑定":["112.0"],"node中间件执行顺序":["113.0"],"webpack打包优化":["114.0"],"js数组求交集并集去重":["115.0"],"网络相关":["116.0"],"逻辑面试题":["116.0"],"react":["116.0"],"babal":["116.0"]}]'},t={"0.0":{t:"# animation-timeline",p:`动画时间线：是css滚动驱动动画的一个实验性功能属性，需要Chrome Canary 115+版本
驱动动画定义了两种新的的timeline, 可以指定动画在元素滚动时运行，@keyframes的进度 ...`,l:"HTMLCSS/css/animationTimeline.html",a:"animation-timeline"},"0.1":{t:" 注意",p:`
animation-timeline需要写在animation后面;
不设置scroll()函数的指定容器，滚动关联的是绑定动画元素的父级元素或者定位的元素，可以用scroll-timeline属性 ...`,l:"HTMLCSS/css/animationTimeline.html#注意",a:"注意"},"0.2":{t:"示例",p:`&lt;animationTimeline&gt;&lt;/animationTimeline&gt;
`,l:"HTMLCSS/css/animationTimeline.html#示例",a:"示例"},"0.3":{t:"代码",p:`&lt;template&gt;
  &lt;div class=&quot;animationTimelineWrap&quot;&gt;
    &lt;h3&gt;实现滚动进度条&lt;/h3& ...`,l:"HTMLCSS/css/animationTimeline.html#代码",a:"代码"},"0.4":{t:"贡献名单",p:`&lt;VPTeamMembers size=&quot;small&quot; :members=&quot;members&quot; /&gt;
`,l:"HTMLCSS/css/animationTimeline.html#贡献名单",a:"贡献名单"},"1.0":{t:"# flex 探究",p:`&lt;!-- &lt;FlexVue /&gt; --&gt;
`,l:"HTMLCSS/css/flex探究.html",a:"flex-探究"},"1.1":{t:"一、作用",p:`简便display+position+float等属性做一些特殊的布局，比如垂直居中、流式布局、响应式布局。对于目前的浏览器都有很好的支持。
`,l:"HTMLCSS/css/flex探究.html#一、作用",a:"一、作用"},"1.2":{t:"二、基本使用",p:"",l:"HTMLCSS/css/flex探究.html#二、基本使用",a:"二、基本使用"},"1.3":{t:"2.1 容器属性",p:`
flex-direction：定义内部元素是如何在弹性容器中布局的，定义了主轴的方向（正方向或反方向）。
flex-wrap： 定义flex元素单行显示还是多行显示。如果允许换行，这个属性允许你控制 ...`,l:"HTMLCSS/css/flex探究.html#_2-1-容器属性",a:"_2-1-容器属性"},"1.4":{t:"2.2 项目属性",p:`
flex-grow：设置flex项目主轴尺寸的每行均分时的所占比例。
flex-shrink： 定义flex元素一行的收缩规则。flex元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是 ...`,l:"HTMLCSS/css/flex探究.html#_2-2-项目属性",a:"_2-2-项目属性"},"1.5":{t:"注意点",p:`
justify-items、justify-self 在弹性盒子里是被忽略的
可以结合 gap 属性做流式间隔布局
项目不设置高度，也不设置align-items或者设置了stretch，项目高度会 ...`,l:"HTMLCSS/css/flex探究.html#注意点",a:"注意点"},"2.0":{t:"# vmin和vmax",p:`vmin: 取视口宽度( vw )和视口高度( vh )较小的值。
vmax: 取视口宽度( vw )和视口高度( vh )较大的值。
`,l:"HTMLCSS/css/vminVmax.html",a:"vmin和vmax"},"2.1":{t:"示例",p:`&lt;vminVmax&gt;&lt;/vminVmax&gt;
`,l:"HTMLCSS/css/vminVmax.html#示例",a:"示例"},"2.2":{t:"代码",p:`&lt;div class=&quot;vminVmaxWrap&quot;&gt;
  &lt;h3&gt;vmin&lt;/h3&gt;
  &lt;img class=&quot;min&quo ...`,l:"HTMLCSS/css/vminVmax.html#代码",a:"代码"},"2.3":{t:"贡献名单",p:`&lt;VPTeamMembers size=&quot;small&quot; :members=&quot;members&quot; /&gt;
`,l:"HTMLCSS/css/vminVmax.html#贡献名单",a:"贡献名单"},"3.0":{t:"# web 和 H5 兼容方式",p:`
viewport 视口

`,l:"HTMLCSS/css/web和H5兼容方式.html",a:"web-和-h5-兼容方式"},"3.1":{t:"Viewport 方案",p:`利用 vw\\vh\\vmax\\vmin
`,l:"HTMLCSS/css/web和H5兼容方式.html#viewport-方案",a:"viewport-方案"},"3.2":{t:"Flexible 方案",p:`利用 rem 配合 PostCSS-px2rem
`,l:"HTMLCSS/css/web和H5兼容方式.html#flexible-方案",a:"flexible-方案"},"4.0":{t:'# 简介 <Badge type="tip" text="^0.0.1" />',p:`&lt;p align=&quot;center&quot;&gt;
&lt;a href=&quot;https://gitee.com/maps_x/front-end-scraps.git&qu ...`,l:"guide/readme.html",a:"简介-badge-type-tip-text-0-0-1"},"6.0":{t:"# indexOf 和 includes",p:"",l:"js/array/indexof和includes.html",a:"indexof-和-includes"},"6.1":{t:"定义",p:`都是用来检查字符串或数组中是否包含某个元素的方法，但它们在使用和返回值上有一些重要的区别
`,l:"js/array/indexof和includes.html#定义",a:"定义"},"6.2":{t:"includes",p:`arr.includes(基本类型或者变量)，返回 boolean 值

能检测 NaN，因为内部使用 SameValueZero 算法比较，它认为 NaN 等于自身

`,l:"js/array/indexof和includes.html#includes",a:"includes"},"6.3":{t:"indexOf",p:`arr.indexOf(基本类型或者变量，开始检索位置（可选参数，规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1）),返回下标和-1

只关心元素 ...`,l:"js/array/indexof和includes.html#indexof",a:"indexof"},"7.0":{t:"# 判断是否为数组",p:"",l:"js/array/judgeIsArray.html",a:"判断是否为数组"},"7.1":{t:"对象描述符",p:"Object.prototype.toString.call(${var})用对象原型转字符串的方式判断，正常情况下如果执行完为[object Array]则为数组\n",l:"js/array/judgeIsArray.html#对象描述符",a:"对象描述符"},"7.2":{t:"注意点",p:`如果其他对象类型使用了Symbol.toStringTag修改了默认描述符为Array，是无法判断的。
`,l:"js/array/judgeIsArray.html#注意点",a:"注意点"},"7.3":{t:"原型链",p:"${var} instanceof Array判断变量原型链上是否有数组原型，正常情况下为true则为数组\n",l:"js/array/judgeIsArray.html#原型链",a:"原型链"},"7.4":{t:"注意点",p:`
如果其他类型对象使用了Object.setPrototypeOf(\${var}, Array.prototype)修改了这个对象原型，是无法正确判断的
iframe 子应用页面的 Array 和父页 ...`,l:"js/array/judgeIsArray.html#注意点",a:"注意点"},"7.5":{t:"构造函数（推荐）",p:`Array.isArray，声明数组肯定会经过构造函数，构造函数提供了这个方法用来准确判断是否为数组
`,l:"js/array/judgeIsArray.html#构造函数-推荐",a:"构造函数-推荐"},"8.0":{t:"# 数组去重",p:"",l:"js/array/removeAeduplicate.html",a:"数组去重"},"8.1":{t:"filter 搭配 indexof",p:`// O(n^2)，适用小型数据
const uniqueArrat = \${array}.filter((item, index, self) =&gt; {
  // 根据第一次返回的下标和当前下 ...`,l:"js/array/removeAeduplicate.html#filter-搭配-indexof",a:"filter-搭配-indexof"},"8.2":{t:"reduce 搭配 includes",p:`// O(n^2)，适用小型数据
const uniqueArray = \${array}.reduce((acc, item) =&gt; {
  // 定义空数组往里加没有的，不能用push，因为 ...`,l:"js/array/removeAeduplicate.html#reduce-搭配-includes",a:"reduce-搭配-includes"},"8.3":{t:"Set 数据结构 搭配 拓展运算符（推荐）",p:`// O(n)
// 利用Set数据自动去除重复元素的特性
const uniqueArray = [...new Set(\${array})]

`,l:"js/array/removeAeduplicate.html#set-数据结构-搭配-拓展运算符-推荐",a:"set-数据结构-搭配-拓展运算符-推荐"},"8.4":{t:"Map 数据结构",p:`// O(n)
// 通过Map键的唯一性来做，然后将Map转为数组
const uniqueArray = Array.from(new Map(\${array}.map(item =&gt; [i ...`,l:"js/array/removeAeduplicate.html#map-数据结构",a:"map-数据结构"},"8.5":{t:"双重循环遍历（不推荐）",p:"",l:"js/array/removeAeduplicate.html#双重循环遍历-不推荐",a:"双重循环遍历-不推荐"},"8.6":{t:"对象哈希表",p:`// 近乎O(n)
const uniqueArray = [];
const hashTable = {};
for (let i = 0; i &lt; array.length; i++) {
 ...`,l:"js/array/removeAeduplicate.html#对象哈希表",a:"对象哈希表"},"8.7":{t:"注意点",p:`
优先考虑 Set、Map、哈希法
懒加载分批处理
使用 web worker 去处理计算密集型去重操作

`,l:"js/array/removeAeduplicate.html#注意点",a:"注意点"},"9.0":{t:"# splice 和 slice",p:"",l:"js/array/splice和slice.html",a:"splice-和-slice"},"9.1":{t:"定义",p:`两者都能截取数组元素，但使用方式不一样
`,l:"js/array/splice和slice.html#定义",a:"定义"},"9.2":{t:"slice",p:`只能截取数组元素，arr.slice(startIndex, endIndex)

不会改变原数组，返回新数组
包头不包尾
二参不填，截取到末尾
一参填负数，相当于(长度+负数，末尾)

`,l:"js/array/splice和slice.html#slice",a:"slice"},"9.3":{t:"splice",p:`能添加，替换，删除数组元素,arr.slice(startIndex, selectNum, ...replaceArg)

改变原数组，返回截取的新数组
包头不包尾
二参不填，截取到末尾
selec ...`,l:"js/array/splice和slice.html#splice",a:"splice"},"10.0":{t:"# 交集并集",p:`const arr1 = [1, 2, 3, 4, 5, 6];
const arr2 = [4, 5, 6, 7, 8, 9];

// 交集（相同）

const q = arr1.filter( ...`,l:"js/array/交集并集.html",a:"交集并集"},"11.0":{t:"# 形成树结构",p:"",l:"js/array/形成树结构.html",a:"形成树结构"},"11.1":{t:"递归（不推荐）",p:`/**
 * 递归查找，获取children
 */
const getChildren = (data, result, pid) =&gt; {
  for (const item of data ...`,l:"js/array/形成树结构.html#递归-不推荐",a:"递归-不推荐"},"11.2":{t:"对象引用",p:`function arrayToTree(items) {
  const result = []; // 存放结果集
  const itemMap = {}; //
  for (const it ...`,l:"js/array/形成树结构.html#对象引用",a:"对象引用"},"12.0":{t:"插入排序",p:`const arr = [9, 2, 5, 6, 1, 0, 1, 2];

function insertSort(arr) {
  for (let i = 1; i &lt; arr.lengt ...`,l:"js/array/排序.html",a:"插入排序"},"13.0":{t:"# apply、call、bind",p:"",l:"js/base/apply、call、bind.html",a:"apply、call、bind"},"13.1":{t:"定义",p:`允许改变函数运行时的 this 上下文，并且传递参数。
`,l:"js/base/apply、call、bind.html#定义",a:"定义"},"13.2":{t:"使用方法",p:`const obj = {
  initNum: 0,
  Test(a, b, c, d) {
    console.log(this, a, b, c, d);
    return this. ...`,l:"js/base/apply、call、bind.html#使用方法",a:"使用方法"},"13.3":{t:"好处",p:`
都可以改变函数的 this 的指向，方便包含通过 this 业务逻辑复用。
apply 可以数组作为函数参数传递，比如 Math.max
因为 bind 会返回一个函数，所以可以在绑定线传入一些参数 ...`,l:"js/base/apply、call、bind.html#好处",a:"好处"},"13.4":{t:"注意点",p:`
他们无法改变箭头函数的 this 指向
使用方式不一样，apply 二参传入数组，call 二参及后面是正常参数列表，bind 和 call 参数传递一样，但会返会一个函数，需要手动调用。

`,l:"js/base/apply、call、bind.html#注意点",a:"注意点"},"13.5":{t:"实现",p:`Function.prototype.myApply = function () {
  const [constructor, ...args] = arguments;
  console.log ...`,l:"js/base/apply、call、bind.html#实现",a:"实现"},"14.0":{t:"# asyncawait",p:"",l:"js/base/asyncawait.html",a:"asyncawait"},"14.1":{t:"定义",p:`async/await 是 es7 正式加入，用于处理异步操作 generator + Promise 的语法糖。
`,l:"js/base/asyncawait.html#定义",a:"定义"},"14.2":{t:"解决啥问题",p:`
回调地狱（Callback Hell）：
在 JavaScript 的异步编程中，经常需要使用回调函数来处理异步操作的结果。然而，当多个异步操作需要按顺序执行时，回调函数很容易形成嵌套，导致代码结构 ...`,l:"js/base/asyncawait.html#解决啥问题",a:"解决啥问题"},"14.3":{t:"注意点",p:`
await 只能在 async 中使用
async 返回的是一个 Promise
await 不能处理状态为 rejected 的 Promise，需要 Promise 处理 rejected 后返 ...`,l:"js/base/asyncawait.html#注意点",a:"注意点"},"14.4":{t:"实现原理",p:`
调用 async，js 会将函数转换为一个 Promise 函数，返回出去
同时会生成一个生成器函数，将 await 的表达式转换为 yield 表达式
Promise 函数内部会去自动去调用生成器 ...`,l:"js/base/asyncawait.html#实现原理",a:"实现原理"},"15.0":{t:"# http",p:"",l:"js/base/http和https和http2.html",a:"http"},"15.1":{t:"定义",p:"HTTP 超文本传输协议是位于 TCP/IP 体系结构中的应用层协议，其内部 API XMLHttpRequest，它是 web 数据通信的基础。现代浏览器中 Fetch API 中也提供了相同功能。 ...",l:"js/base/http和https和http2.html#定义",a:"定义"},"15.2":{t:"特征",p:`
支持客户/服务器模式。
简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于 HTTP 协议简单，使 ...`,l:"js/base/http和https和http2.html#特征",a:"特征"},"15.3":{t:"优势",p:`
灵活性强，可拓展性高


允许传输各种类型数据，通过 content-type 来却分
从 1.0，1.1，2.0 一直在拓展


传输可靠


通过 TCP 协议，建立连接和断开

`,l:"js/base/http和https和http2.html#优势",a:"优势"},"15.4":{t:"注意点",p:`
通讯不加密，容易被窃听到
解决办法：https
不验证身份
解决办法：https，请求头验证

https
`,l:"js/base/http和https和http2.html#注意点",a:"注意点"},"15.5":{t:"定义",p:`相当于 HTTP+SSL/TLS， 即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL，用于安全的 HTTP 数据传输。
SSL（Secure Soc ...`,l:"js/base/http和https和http2.html#定义",a:"定义"},"15.6":{t:"怎么使用",p:"",l:"js/base/http和https和http2.html#怎么使用",a:"怎么使用"},"15.7":{t:"好处",p:`
通过加密算法，避免 http 数据传输被窃听

`,l:"js/base/http和https和http2.html#好处",a:"好处"},"15.8":{t:"注意点",p:`
由于需要对证书判定、数据加密解密，请求时间会更慢，资源消耗也会更大
需要去机构申请 CA 证书，颁发证书和公钥私钥
并不是百分百安全的，黑客攻击和服务器被劫持一样没用

https2.0
`,l:"js/base/http和https和http2.html#注意点",a:"注意点"},"15.9":{t:"定义",p:`2015 年发布的 http 第二个主要版本。在不改动 HTTP 语义、方法、状态码、URI 及首部字段的情况下，大幅度提高了 web 性能。

二进制分帧层


将 1.1 的文版传输方式，切分成了 ...`,l:"js/base/http和https和http2.html#定义",a:"定义"},"15.10":{t:"怎么使用",p:"",l:"js/base/http和https和http2.html#怎么使用",a:"怎么使用"},"15.11":{t:"好处",p:`
性能提升：HTTP/2.0 采用了二进制传输数据，而非之前的文本格式，这大大提高了传输效率。同时，它还引入了流控制和帧压缩等机制，进一步提升了数据传输的性能。
更好的并发性：HTTP/2.0 支持并 ...`,l:"js/base/http和https和http2.html#好处",a:"好处"},"15.12":{t:"注意点",p:`
复杂性增加：HTTP/2.0 相对于 HTTP/1.1 在协议设计和实现上更为复杂，这可能导致一些开发人员和服务器管理员在理解和使用上存在一定的困难。
依赖 TLS：HTTP/2.0 强制要求使用  ...`,l:"js/base/http和https和http2.html#注意点",a:"注意点"},"16.0":{t:"# promise",p:"",l:"js/base/promise.html",a:"promise"},"16.1":{t:"定义",p:`Promise，es6 里正式加入，用于处理异步操作和值传递的一个对象
`,l:"js/base/promise.html#定义",a:"定义"},"16.2":{t:"解决啥问题",p:`
回调地狱（Callback Hell）：在 JavaScript 的异步编程中，我们经常需要嵌套多个回调函数来处理异步操作的结果。这种嵌套会导致代码难以阅读和维护，形成所谓的“回调地狱”。Promi ...`,l:"js/base/promise.html#解决啥问题",a:"解决啥问题"},"16.3":{t:"其中概念",p:`
resolve
reject
then，onFulfiled，onRejected
catch
finally
peddind, fullfild, rejected
原型方法 race, all
 ...`,l:"js/base/promise.html#其中概念",a:"其中概念"},"16.4":{t:"实现原理",p:`首先知道几个概念

pending, fulfilled, rejected 三个状态
promise 的 value 和 fulfilled、rejected 回调列表
then 会返回一个新的 p ...`,l:"js/base/promise.html#实现原理",a:"实现原理"},"16.5":{t:"注意点",p:`下面的好混乱，错的
class MyPromise {
  sta;
}

维护一个回调函数列表，然后根据状态 peddind, fullfild, rejected 判断是去执行加入列表，走 the ...`,l:"js/base/promise.html#注意点",a:"注意点"},"16.6":{t:"",p:`
实例创建后，内部状态为 pending。
执行传入的函数，根据业务逻辑去执行 resolve 还是 reject。
如果业务逻辑能直接同步执行完，触发 resolve 或者 reject，则将传入参 ...`,l:"js/base/promise.html#",a:""},"17.0":{t:"# this 指向问题",p:"",l:"js/base/this指向问题.html",a:"this-指向问题"},"17.1":{t:"定义",p:`this是 js 一个关键字，表示当前对象，也是一个重要的语法点。它永远会指向一个对象。

非严格模式下，全局作用域里，单独使用的话指向全局对象
函数作用域里，单独使用的话也指向全局对象
在事件和方法 ...`,l:"js/base/this指向问题.html#定义",a:"定义"},"17.2":{t:"用处",p:`
在对象的方法内和类的方法内，快速获取自身的属性或者其他方法
获取事件触发的元素，像 button

`,l:"js/base/this指向问题.html#用处",a:"用处"},"17.3":{t:"好处",p:`
在 JavaScript 中，this 是一个非常重要的关键字，它引用函数运行时的上下文。理解并正确使用 this 可以帮助你编写更灵活、更可维护的代码。以下是 this 的一些主要好处：

代码复 ...`,l:"js/base/this指向问题.html#好处",a:"好处"},"17.4":{t:"坏处",p:`需要注意，this 的行为有时可能会让人感到困惑，特别是在回调函数、事件处理程序和某些异步操作中。因此，在使用 this 时要小心，并确保你理解它在当前上下文中的含义。
`,l:"js/base/this指向问题.html#坏处",a:"坏处"},"17.5":{t:"注意点",p:`
绑定优先级 new 关键字 &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定
箭头函数的this指向其定义时的所在的函数对象，bind、aplly、call 显示绑定也无法改变
在 set ...`,l:"js/base/this指向问题.html#注意点",a:"注意点"},"17.6":{t:"练习题",p:`// 1、直接调用
function foo() {
  console.log(this);
}
foo();

// 2、对象中的函数
var obj1 = {
  foo: foo,
};
va ...`,l:"js/base/this指向问题.html#练习题",a:"练习题"},"18.0":{t:"# undefined、null 区别",p:"",l:"js/base/undefinedWithnullDiff.html",a:"undefined、null-区别"},"18.1":{t:"定义",p:`两者都代表空，都是原始数据类型，使用typeof的类型检查，可以看出undefined就是undefined类型，null 是 object 类型（历史原因）。所以根据这个判断，可以帮助理解。

nu ...`,l:"js/base/undefinedWithnullDiff.html#定义",a:"定义"},"18.2":{t:"注意点",p:`
typeof 检查 null 的类型为 object
unefined 计算时会隐式转换为 NaN、null 为 0
JSON.stringify 时如果对象属性值是 undefined，会删除该属 ...`,l:"js/base/undefinedWithnullDiff.html#注意点",a:"注意点"},"19.0":{t:"# 事件循环",p:"",l:"js/base/事件循环.html",a:"事件循环"},"19.1":{t:"定义",p:`事件循环是 js 运行时环境（如 Node.js 或浏览器环境）中处理异步操作的核心机制。
`,l:"js/base/事件循环.html#定义",a:"定义"},"19.2":{t:"基本概念",p:`
调用栈（Call Stack）：JavaScript 引擎有一个单线程的调用栈，用于执行同步代码。
任务队列（Task Queue）：当异步任务完成时（例如，setTimeout 回调、Promis ...`,l:"js/base/事件循环.html#基本概念",a:"基本概念"},"19.3":{t:"工作原理",p:`
调用栈执行全局的同步代码
遇到各种异步任务将他们按宏、微任务按顺序加进对列里去
js 会先检查微任务队列，按先进先出原则，放到调用栈里去执行
后面再检查任务队列，，按先进先出原则，放到调用栈里去执行 ...`,l:"js/base/事件循环.html#工作原理",a:"工作原理"},"20.0":{t:"# 前端各类优化",p:"",l:"js/base/前端各类优化.html",a:"前端各类优化"},"20.1":{t:"http",p:`
强缓存协商缓存
资源懒加载
资源压缩
使用 http2.0 协议
资源合并
cdn 托管资源

`,l:"js/base/前端各类优化.html#http",a:"http"},"20.2":{t:"代码编写",p:`
vue2:v-for/v-if
内存泄漏
闭包
vue3 shallow
vue2 this
v-show
keep-alive
避免页面重定向
懒加载方案

`,l:"js/base/前端各类优化.html#代码编写",a:"代码编写"},"20.3":{t:"ssr",p:"",l:"js/base/前端各类优化.html#ssr",a:"ssr"},"20.4":{t:"预渲染",p:"",l:"js/base/前端各类优化.html#预渲染",a:"预渲染"},"20.5":{t:"使用 perfomance API 进行各类监听，然后针对优化",p:"",l:"js/base/前端各类优化.html#使用-perfomance-api-进行各类监听-然后针对优化",a:"使用-perfomance-api-进行各类监听-然后针对优化"},"21.0":{t:"# 原型和原型链",p:"",l:"js/base/原型和原型链.html",a:"原型和原型链"},"21.1":{t:"定义",p:"js 不管什么类型对象都有它的原型，用来共享属性和方法，实现继承。可以使用原型__proto__访问，指向其构造函数的原型对象 prototype，里面包含 constructor 和 prototy ...",l:"js/base/原型和原型链.html#定义",a:"定义"},"21.2":{t:"注意点",p:`
对象的__proto__指向构造函数的 prototype
不是所有函数都是构造函数，只有使用 new 关键字创建了实例对象，那 new 的这个函数就是这个实例对象的构造函数
__proto__是隐 ...`,l:"js/base/原型和原型链.html#注意点",a:"注意点"},"21.3":{t:"构造函数",p:`使用 new 关键字创建了实例对象，那 new 的这个函数就是这个实例对象的构造函数，在实例对象的隐式原型__proto__的 constructor 中可以找到。
`,l:"js/base/原型和原型链.html#构造函数",a:"构造函数"},"21.4":{t:"构造函数创建实例过程",p:`
创建一个新对象
将构造函数的作用域赋值给新对象（这样 this 就指向了新对象）
执行构造函数中的代码（为新对象添加实例属性和实例方法）
返回新对象

`,l:"js/base/原型和原型链.html#构造函数创建实例过程",a:"构造函数创建实例过程"},"21.5":{t:"原型对象 prototype（显式原型）",p:`只有函数才有原型对象 prototype，如果有以这个函数作为构造函数的实例对象，那这个实例可以直接使用原型对象 prototype 上的方法或属性
`,l:"js/base/原型和原型链.html#原型对象-prototype-显式原型",a:"原型对象-prototype-显式原型"},"21.6":{t:"实现",p:`function myNew() {
  const obj = {};
  const [constructor, ...args] = arguments;

  obj.__proto__ =  ...`,l:"js/base/原型和原型链.html#实现",a:"实现"},"22.0":{t:"# 变量提升（Hoisting）",p:"",l:"js/base/变量提升.html",a:"变量提升-hoisting"},"22.1":{t:"定义",p:"js 在执行上下文其中的一种工作方式，js 引擎在代码执行的过程中将变量声明部分和函数声明提取到开头一种行为。与直觉不相符，算是一种设计缺陷。在 es6 引入这个问题，但为了向下兼容，目前还存在这种情 ...",l:"js/base/变量提升.html#定义",a:"定义"},"22.2":{t:"为什么会有变量提升这种特性",p:`在 es6 之前，js 里作用域分两种全局作用域、函数作用域，不支持块级作用域。这种情况下，变量统一提升时最简单有效的设计。

作用域。控制着变量和函数的可访问范围（可见性和生命周期）

`,l:"js/base/变量提升.html#为什么会有变量提升这种特性",a:"为什么会有变量提升这种特性"},"22.3":{t:"好处",p:`

提高性能
js 执行代码前，会去语法检查和预编译，并且只操作一次。这样每次执行代码的时候就不用再去解析一边这些变量和函数，直接分配执行空间就行

预编译时会去统计哪些变量、函数，压缩代码，去除注释 ...`,l:"js/base/变量提升.html#好处",a:"好处"},"22.4":{t:"问题点",p:`

变量会被覆盖
函数内部同名变量会去覆盖全局的


变量未被销毁
经典问题，for 循环的变量外部获取它时等于++的最终结果


`,l:"js/base/变量提升.html#问题点",a:"问题点"},"22.5":{t:"注意点",p:`
函数内部不用var声明，会被自动提升到全局做声明

`,l:"js/base/变量提升.html#注意点",a:"注意点"},"22.6":{t:"解决方式",p:`为解决上述变量提升问题，es6 引入的let、const两个关键字，来创建块级作用域
`,l:"js/base/变量提升.html#解决方式",a:"解决方式"},"22.7":{t:"如何支持块级作用域的",p:`通过词法环境的栈结构来实现（变量提升是通过变量环境实现）

在创建执行上下文时，会创建两个环境变量环境，词法环境
如果解析当前作用域是，遇到 var，则将该变量放置变量环境，let、const 放置词 ...`,l:"js/base/变量提升.html#如何支持块级作用域的",a:"如何支持块级作用域的"},"22.8":{t:"暂示性死区",p:`ES6 规定：如果区块中存在 let 和 const，这个区块对这两个关键字声明的变量，从一开始就形成了封闭作用域。假如尝试在声明前去使用这类变量，就会报错。这一段会报错的区域就是暂时性死区。
var ...`,l:"js/base/变量提升.html#暂示性死区",a:"暂示性死区"},"22.9":{t:"练习",p:`temp();
let a = 1;
function temp() {
  asd();
  let a = 2;
  b = 111;
  function asd() {
    console ...`,l:"js/base/变量提升.html#练习",a:"练习"},"23.0":{t:"# 垃圾回收",p:"",l:"js/base/垃圾回收.html",a:"垃圾回收"},"23.1":{t:"js 内存概念",p:`基础类型保存在栈中，系统会自动处理
引用类型，栈只保存堆的引用地址，值保存在堆中，垃圾回收针对的就是这个堆中的引用数据。
全局变量的引用类型，会一直存在应用的生命周期里，不会被垃圾回收清除，但可以把该 ...`,l:"js/base/垃圾回收.html#js-内存概念",a:"js-内存概念"},"23.2":{t:"引用计数法",p:`变量声明、引用计数+1，变量被重新赋值-1，等于 0 时，被执行
`,l:"js/base/垃圾回收.html#引用计数法",a:"引用计数法"},"23.3":{t:"弊端",p:`循环引用，导致引用无法清除
`,l:"js/base/垃圾回收.html#弊端",a:"弊端"},"23.4":{t:"标记清除法",p:`垃圾回收器区将所有内存中的对象打上标记，然后从根结对象开始遍历，把还在上下文中的活动变量去掉标记，然后清理所有带标记的对象
`,l:"js/base/垃圾回收.html#标记清除法",a:"标记清除法"},"23.5":{t:"弊端",p:`内存碎片化，分配速度慢。老生代会有标记整理算法去解决
`,l:"js/base/垃圾回收.html#弊端",a:"弊端"},"23.6":{t:"分代回收法",p:"",l:"js/base/垃圾回收.html#分代回收法",a:"分代回收法"},"23.7":{t:"新生代",p:`内部又分为使用区，空闲区

新声明的对象都会放入使用区
垃圾回收时，会在使用区中寻找活动的对象，将其复制到空闲空间，如果标记有经历过一次的 scavenge 算法（垃圾回收）的则晋升到老生代的存储区里 ...`,l:"js/base/垃圾回收.html#新生代",a:"新生代"},"23.8":{t:"老生代",p:`使用标记清除法和标记整理算法回收
`,l:"js/base/垃圾回收.html#老生代",a:"老生代"},"24.0":{t:"# 柯里化",p:`将一个接受多个参数的函数转换为一系列使用一个参数的函数；
`,l:"js/base/柯里化.html",a:"柯里化"},"24.1":{t:"优势",p:`
参数复用
延迟执行
逻辑复用

`,l:"js/base/柯里化.html#优势",a:"优势"},"24.2":{t:"示例",p:`function add(a, b, c) {
  return a + b + c;
}

function currey(fn) {
  return function exec(...arr)  ...`,l:"js/base/柯里化.html#示例",a:"示例"},"25.0":{t:"# 浏览器渲染",p:`
DNS 解析，然后走 https 协议，TCP 协议，ip 协议，获取静态资源
浏览器会使用 HMTL 解析器去，从上往下解析 HTML
遇到资源加载


link 资源，通常是 link 样式和  ...`,l:"js/base/浏览器渲染.html",a:"浏览器渲染"},"26.0":{t:"# 箭头函数与普通函数区别",p:"",l:"js/base/箭头函数与普通函数区别.html",a:"箭头函数与普通函数区别"},"26.1":{t:"箭头函数定义",p:`箭头函数表达式的语法比传统的函数表达式更简洁，但在语义上有一些差异，在用法上也有一些限制：
箭头函数没有独立的 this、arguments 和 super 绑定，并且不可被用作方法。
箭头函数不能用 ...`,l:"js/base/箭头函数与普通函数区别.html#箭头函数定义",a:"箭头函数定义"},"26.2":{t:"好处",p:`

更简洁的语法：
箭头函数提供了一种更简洁的方式来编写函数，特别是当函数体很短或者不需要自己的 this、arguments 或 super 时。 传统函数：


不绑定自己的 this：
箭头函数 ...`,l:"js/base/箭头函数与普通函数区别.html#好处",a:"好处"},"26.3":{t:"弊端",p:"",l:"js/base/箭头函数与普通函数区别.html#弊端",a:"弊端"},"26.4":{t:"注意点",p:`
this 指向
没有 prototype 属性 不能作为构造函数
不能再其中使用 yield 关键字
没有自己的 arguments 对象。但是，你可以使用剩余参数（...args）来替代它

`,l:"js/base/箭头函数与普通函数区别.html#注意点",a:"注意点"},"26.5":{t:"与普通函数区别",p:`
箭头函数的this指向其定义时的所在的函数对象，bind、aplly、call 显示绑定也无法改变
不能作为构造函数
没有 arguments 对象

`,l:"js/base/箭头函数与普通函数区别.html#与普通函数区别",a:"与普通函数区别"},"27.0":{t:"# js 设计模式",p:`主要分为 3 大类，创建类， 结构类，行为类。
`,l:"js/base/设计模式.html",a:"js-设计模式"},"27.1":{t:"创建类",p:"",l:"js/base/设计模式.html#创建类",a:"创建类"},"27.2":{t:"1. 单例模式",p:`全局只有一个实例，并提供一个全局访问点。由特定类，暴露获取实例方法，有这个实例则直接返回单例，没就先实例化。
`,l:"js/base/设计模式.html#_1-单例模式",a:"_1-单例模式"},"27.3":{t:"适用情况",p:`全局需要供用一个访问点。
`,l:"js/base/设计模式.html#适用情况",a:"适用情况"},"27.4":{t:"运用",p:`vuex 插件的 install 方法
`,l:"js/base/设计模式.html#运用",a:"运用"},"27.5":{t:"优缺点",p:`优点：

节约资源
保证访问的一致性

缺点：

不好拓展，因为时自身内部实例化

`,l:"js/base/设计模式.html#优缺点",a:"优缺点"},"27.6":{t:"2. 工厂模式",p:`根据不同参数返回不同类的实例，将对象的创建与对象的实现分离。实现复杂，但使用简单。工厂会给我们提供一个工厂方法，我们直接去调用即可
`,l:"js/base/设计模式.html#_2-工厂模式",a:"_2-工厂模式"},"27.7":{t:"适用情况",p:`当类中有一些通用处理，但所需的子类在运行时动态确定时才能确定时，我们可以用工厂方法模式
`,l:"js/base/设计模式.html#适用情况",a:"适用情况"},"27.8":{t:"运用",p:`js 的 Document.createElement
`,l:"js/base/设计模式.html#运用",a:"运用"},"27.9":{t:"优缺点",p:`优点：

良好的封装，访问者无需关注创建过程，代码结构清晰
良好的拓展性，隔离了用户和创建流程，符合开闭原则
解耦了高层逻辑和底层产品类，符合最少知识原则
代码复用性好

缺点:

可能增加系统的复杂 ...`,l:"js/base/设计模式.html#优缺点",a:"优缺点"},"27.10":{t:"3. 建造者模式",p:"",l:"js/base/设计模式.html#_3-建造者模式",a:"_3-建造者模式"},"27.11":{t:"结构类",p:"",l:"js/base/设计模式.html#结构类",a:"结构类"},"27.12":{t:"4. 适配器模式",p:`用于解决兼容问题，接口/方法/数据不兼容，将其转换成访问者期望的格式进行使用。
`,l:"js/base/设计模式.html#_4-适配器模式",a:"_4-适配器模式"},"27.13":{t:"适用情况",p:`
使用一个已经存在的对象，但其方法或属性接口不符合你的要求。
你想创建一个可复用的对象，该对象可以与其它不相关的对象或不可见对象（即接口方法或属性不兼容的对象）协同工作。
想使用已经存在的对象，但是不 ...`,l:"js/base/设计模式.html#适用情况",a:"适用情况"},"27.14":{t:"运用",p:`echarts 数据格式转换、时间格式转换
`,l:"js/base/设计模式.html#运用",a:"运用"},"27.15":{t:"优缺点",p:`优点：

提高代码的复用性：适配器模式允许已有的接口与新的接口协同工作，无需修改已有代码，从而提高了代码的复用性。
更好的扩展性：通过使用适配器模式，我们可以更轻松地扩展系统的功能。例如，当需要添加新 ...`,l:"js/base/设计模式.html#优缺点",a:"优缺点"},"27.16":{t:"5. 装饰器模式",p:`在不改变原对象的基础上，增加新属性/方法/功能。
`,l:"js/base/设计模式.html#_5-装饰器模式",a:"_5-装饰器模式"},"27.17":{t:"运用",p:`静态数据过滤，只保存动态数据。使用时添加静态数据
`,l:"js/base/设计模式.html#运用",a:"运用"},"27.18":{t:"优缺点",p:`优点：

对象的核心职责和装饰功能区分开，可以通过动态增删装饰去除目标对象中的装饰逻辑。

缺点：

性能，需要操作数据对象

`,l:"js/base/设计模式.html#优缺点",a:"优缺点"},"27.19":{t:"行为类",p:"",l:"js/base/设计模式.html#行为类",a:"行为类"},"27.20":{t:"6. 策略模式",p:`定义一系列算法，根据输入的参数决定使用哪个算法
`,l:"js/base/设计模式.html#_6-策略模式",a:"_6-策略模式"},"27.21":{t:"适用情况",p:`
算法需要自由切换的场景。
多个算法只有行为上有些不同，可以考虑策略模式动态选择算法。
需要多重判断，可以考虑策略模式规避多重条件判断。

`,l:"js/base/设计模式.html#适用情况",a:"适用情况"},"27.22":{t:"运用",p:`element 的表单验证，适用邮件还是电话等
`,l:"js/base/设计模式.html#运用",a:"运用"},"27.23":{t:"优缺点",p:`优点：

策略相互独立，可以互相切换。提高了灵活性以及复用性。
不需要使用 if-else 进行策略选择，提高了维护性。
可扩展性好，满足开闭原则。

缺点：

策略相互独立，一些复杂的算法逻辑无法共 ...`,l:"js/base/设计模式.html#优缺点",a:"优缺点"},"27.24":{t:"7. 观察者模式",p:`一个对象（称为 subject）维持一系列依赖于它的对象（称为 observer），将有关状态的任何变更自动通知给它们（观察者）。观察者必须订阅内容改变的事件，定义一对多的依赖关系。
`,l:"js/base/设计模式.html#_7-观察者模式",a:"_7-观察者模式"},"27.25":{t:"适用情况",p:"",l:"js/base/设计模式.html#适用情况",a:"适用情况"},"27.26":{t:"运用",p:`DOM 事件监听，RxJS
`,l:"js/base/设计模式.html#运用",a:"运用"},"27.27":{t:"优缺点",p:`优点：

目标变化就会通知观察者，这是观察者模式最大的优点。

缺点：

不灵活。目标和观察者是耦合在一起的，要实现观察者模式，必须同时引入被观察者和观察者才能达到响应式的效果。

`,l:"js/base/设计模式.html#优缺点",a:"优缺点"},"27.28":{t:"8. 发布订阅模式",p:"观察者模式的变种，基于一个主题/事件通道，希望接收通知的对象（称为 subscriber）通过自定义事件订阅主题，被激活事件的对象（称为 publisher）通过发布主题事件的方式被通知。（有三方，事 ...",l:"js/base/设计模式.html#_8-发布订阅模式",a:"_8-发布订阅模式"},"27.29":{t:"适用情况",p:"",l:"js/base/设计模式.html#适用情况",a:"适用情况"},"27.30":{t:"运用",p:`vue 双向绑定，data（发布者），setter（事件通道），watcher（订阅者）
`,l:"js/base/设计模式.html#运用",a:"运用"},"27.31":{t:"优缺点",p:`优点：

时间解耦：注册的订阅行为由发布者决定何时调用，订阅者无需持续关注，由发布者负责通知。
对象解耦：发布者无需知道消息的接受者，只需遍历订阅该消息类型的订阅者发送消息，解耦了发布者和订阅者之间的 ...`,l:"js/base/设计模式.html#优缺点",a:"优缺点"},"28.0":{t:"# 闭包",p:"",l:"js/base/闭包.html",a:"闭包"},"28.1":{t:"定义",p:`在函数作用域内执行上下文时，如果内函数引用了外函数的变量，那内函数的作用域里就会新增一个包含这个变量的作用域，这个作用域就称之为闭包
`,l:"js/base/闭包.html#定义",a:"定义"},"28.2":{t:"好处",p:`
封装私有化变量，让外部无法访问
延长局部变量的生命周期

`,l:"js/base/闭包.html#好处",a:"好处"},"28.3":{t:"注意点",p:`
如果将内函数返回出去了，那需要及时清除，不然闭包会一直存在。将接受返回的变量置为 null

`,l:"js/base/闭包.html#注意点",a:"注意点"},"29.0":{t:"# 函数参数数量重载",p:"",l:"js/methods/argsNumberOverload.html",a:"函数参数数量重载"},"29.1":{t:"代码",p:`export const argsNumberOverload = (
  overloadObj: { [x: string]: () =&gt; any },
  name: string,
   ...`,l:"js/methods/argsNumberOverload.html#代码",a:"代码"},"29.2":{t:"使用",p:`/* 重载汇集的对象 */
const overloadObj: { [x: string]: () =&gt; any } = {};

argsNumberOverload(overloadObj ...`,l:"js/methods/argsNumberOverload.html#使用",a:"使用"},"30.0":{t:"# 数字逗号分隔 count",p:"",l:"js/number/count.html",a:"数字逗号分隔-count"},"30.1":{t:"示例",p:`&lt;div &gt;
&lt;h1&gt;{{ count(999999999) }}&lt;/h1&gt;
&lt;/div&gt;
`,l:"js/number/count.html#示例",a:"示例"},"30.2":{t:"代码",p:`&lt;div &gt;
  &lt;h1&gt;{{ count(999999999) }}&lt;/h1&gt;
&lt;/div&gt;



`,l:"js/number/count.html#代码",a:"代码"},"30.3":{t:"API",p:`


函数名
说明
参数
返回类型




count
数字每3位逗号分隔
num: number
string



`,l:"js/number/count.html#api",a:"api"},"30.4":{t:"源码",p:`(number: number | string, decimals?: number): string =&gt; {
  number = number + ''
  // 转为字符串，并按照.拆 ...`,l:"js/number/count.html#源码",a:"源码"},"31.0":{t:"# substr 和 substring",p:"",l:"js/string/substr和substring.html",a:"substr-和-substring"},"31.1":{t:"定义",p:`两者都能截取字符串
`,l:"js/string/substr和substring.html#定义",a:"定义"},"31.2":{t:"substr",p:`在 ECMAScript 2015 中已标记为弃用，str.substr(startIndex, length)

包头包尾，不改变原字符串，返回截取字符串
startIndex 为负数，相当于 st ...`,l:"js/string/substr和substring.html#substr",a:"substr"},"31.3":{t:"substring",p:`str.substring(startIndex, endIndex)

包头不包尾，不改变原字符串，返回截取字符串
内部会做参数大小比较，将更小的置为 startIndex，大的 endIndex
 ...`,l:"js/string/substr和substring.html#substring",a:"substring"},"32.0":{t:"```js",p:`const response = await fetch(&quot;http://127.0.0.1:7345/api/gpt/get&quot;, {
method: &quot;POST&quo ...`,l:"js/string/打字效果.html",a:"js"},"33.0":{t:"# interface 和 type 的区别",p:"",l:"js/ts/interfaceTypeDiff.html",a:"interface-和-type-的区别"},"33.1":{t:"声明合并",p:"interface会做声明合并，将同变量名的合并，导致其声明的类型具有不确定性。会造成比如，将这个类型的变量赋值给Record&lt;string, string&gt;、{[x: string],  ...",l:"js/ts/interfaceTypeDiff.html#声明合并",a:"声明合并"},"33.2":{t:"类型拓展",p:`interface使用extends实现，type通过&amp;交叉运算符形成交叉类型
interface userExtends {
  breed: string;
}

interface us ...`,l:"js/ts/interfaceTypeDiff.html#类型拓展",a:"类型拓展"},"34.0":{t:"# Rollup 实现原理",p:"",l:"vite/Rollup实现原理.html",a:"rollup-实现原理"},"34.1":{t:"定义",p:"模块打包器，支持 ES6 模块，支持 Tree-shaking，但不支持 webpack 的 code-splitting、模块热更新等，这意味着它更适合用来做类库项目的打包器而不是应用程序项目的打包 ...",l:"vite/Rollup实现原理.html#定义",a:"定义"},"34.2":{t:"概念",p:`
magic-string
是 Rollup 作者写的一个关于字符串操作的库，这个库主要是对字符串一些常用方法进行了封装
AST
通过 javascript parse 可以把代码转化为一颗抽象语法树 ...`,l:"vite/Rollup实现原理.html#概念",a:"概念"},"34.3":{t:"实现过程",p:`在 Rollup 中，一个文件就是一个模块，每个模块都会根据文件的代码生成一个 AST 抽象语法树。​

首先生成一个打包器 bundle 实例，从入口出发，将其生成 module 实例
在实例中，使 ...`,l:"vite/Rollup实现原理.html#实现过程",a:"实现过程"},"34.4":{t:"插件",p:"对于一个真实的项目构建场景来说，我们还需要考虑到模块打包之外的问题，比如路径别名(alias) 、全局变量注入和代码压缩等等。因此 ，Rollup 设计出了一套完整的插件机制，将自身的核心逻辑与插件逻 ...",l:"vite/Rollup实现原理.html#插件",a:"插件"},"34.5":{t:"Hook 类型",p:`

Async &amp; Sync


Parallel
并行钩子


Sequential
串行钩子


First
如果有多个插件实现了这个 Hook，那么 Hook 将依次运行，直到返回一个非 ...`,l:"vite/Rollup实现原理.html#hook-类型",a:"hook-类型"},"34.6":{t:"钩子函数",p:`有很多钩子函数：
`,l:"vite/Rollup实现原理.html#钩子函数",a:"钩子函数"},"34.7":{t:"build 阶段工作流",p:`options、buildStart,resolveld,load,transform,moduleParsed,resolveDynamicImport,buildEnd
`,l:"vite/Rollup实现原理.html#build-阶段工作流",a:"build-阶段工作流"},"34.8":{t:"output 阶段工作流",p:"outputOptions,renderStart,banner,footer,intro,outro,renderDynamicImport,augumentChunkHash,resolveFil ...",l:"vite/Rollup实现原理.html#output-阶段工作流",a:"output-阶段工作流"},"34.9":{t:"主要介绍",p:`
路径解析：resolveId
一般用来解析路径, Async + First 类型的钩子；

返回值为 null 时，会默认交给下一个插件的 resolveId 钩子处理。
返回值为 string  ...`,l:"vite/Rollup实现原理.html#主要介绍",a:"主要介绍"},"34.10":{t:"与 webpack 的区别",p:`
设计理念不同


webpack 是一个全能型的打包工具，可以处理 css、html、图片等资源。适合构建大型的 web 应用
Rollup 主要是针对库打包而设计的 ESM 模块打包工具


功能 ...`,l:"vite/Rollup实现原理.html#与-webpack-的区别",a:"与-webpack-的区别"},"35.0":{t:"# vite",p:"",l:"vite/vite实现原理.html",a:"vite"},"35.1":{t:"定义",p:`一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：


一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 模块热更新（HMR）。


一套构建指令， ...`,l:"vite/vite实现原理.html#定义",a:"定义"},"35.2":{t:"双引擎架构",p:"",l:"vite/vite实现原理.html#双引擎架构",a:"双引擎架构"},"35.3":{t:"Esbuild - 性能利器",p:`基于 Golang 开发的一款打包工具，相比传统的打包工具，主打性能优势，在构建速度上可以比传统工具快 10~100 倍。那么，它是如何达到这样超高的构建性能的呢？主要原因可以概括为 4 点。

使用 ...`,l:"vite/vite实现原理.html#esbuild-性能利器",a:"esbuild-性能利器"},"35.4":{t:"Esbuild 打包工具缺点",p:`
不支持降级到 es5
不支持 const enum 等语法
没提供操作打包产物的接口、钩子
不支持拆包策略

`,l:"vite/vite实现原理.html#esbuild-打包工具缺点",a:"esbuild-打包工具缺点"},"35.5":{t:"Rollup - 构建基石",p:`解决 esbuild 支持不了的功能，加上预加载、异步加载这些功能，并提供插件功能，自定义产出。vite 插件完全兼容 Rollup，反之不一定。
`,l:"vite/vite实现原理.html#rollup-构建基石",a:"rollup-构建基石"},"35.6":{t:"实现原理",p:`关键点：

快速冷启动：No Buonld + Esbuild 预构建
热更新模块：基于 ESM 的 HMR 和浏览器的缓存策略
真正的按需加载：利用浏览器的 ESM 支持，实现真正的按需加载

`,l:"vite/vite实现原理.html#实现原理",a:"实现原理"},"35.7":{t:"实现方法",p:"",l:"vite/vite实现原理.html#实现方法",a:"实现方法"},"35.8":{t:"开发阶段",p:`
首先是基于 ESM 为核心，

浏览器可以使用该模块，做 No Bounld 机制，
自带按需加载的机制 import，只有使用到时才去加载
同时会在本地会起一个 node 服务去拦截请求，并在响应 ...`,l:"vite/vite实现原理.html#开发阶段",a:"开发阶段"},"35.9":{t:"该阶段与 webpack 对比",p:`优势：

更快的启动，利用 ESM 做 No_bounld，业务代码不编译，只做简单的分析转换。webpack 需要先构建再打包成 boundle
更快的热更新，还是利用了 ESM，只去更新边界内的模 ...`,l:"vite/vite实现原理.html#该阶段与-webpack-对比",a:"该阶段与-webpack-对比"},"35.10":{t:"生产阶段",p:`
Rollup 打包

`,l:"vite/vite实现原理.html#生产阶段",a:"生产阶段"},"35.11":{t:"插件机制",p:`在开发阶段 vite 有部分 Hook 是和 Rollup 的 Hook 是通用的，再加上自己的独有 Hook；生产阶段则是和 Rollup 一样。
`,l:"vite/vite实现原理.html#插件机制",a:"插件机制"},"35.12":{t:"通用 Hook:",p:`
服务器启动阶段：options 和 buildStart
请求响应阶段：resolved, load, transform
服务器关闭阶段：buildEnd, closeBundle

`,l:"vite/vite实现原理.html#通用-hook",a:"通用-hook"},"35.13":{t:"独有 Hook",p:`
config: 用来进一步修改配置。
configResolved: 用来记录最终的配置信息。
configureServer: 用来获取 Vite Dev Server 实例，添加中间件。
tra ...`,l:"vite/vite实现原理.html#独有-hook",a:"独有-hook"},"35.14":{t:"Hook 执行顺序",p:`
服务启动阶段: config、configResolved、options、configureServer、buildStart
请求响应阶段: 如果是 html 文件，仅执行 transformI ...`,l:"vite/vite实现原理.html#hook-执行顺序",a:"hook-执行顺序"},"35.15":{t:"插件执行顺序",p:`
Alias (路径别名)相关的插件。
带有 enforce: 'pre' 的用户插件。
Vite 核心插件。
没有 enforce 值的用户插件，也叫普通插件。
Vite 生产环境构建用的插件。
带 ...`,l:"vite/vite实现原理.html#插件执行顺序",a:"插件执行顺序"},"35.16":{t:"与 webpack 的区别",p:`vite 是双引擎架构，开发阶段和生产阶段涉及引擎使用不统一，所以要分开做对比
`,l:"vite/vite实现原理.html#与-webpack-的区别",a:"与-webpack-的区别"},"35.17":{t:"开发阶段",p:`
构建原理不一样

webpack 需要将所有依赖编译构建好标准 js 执行文件，再启动本地服务；
vite 业务代码构建，将第三方依赖预构建，页面访问时再去转换成 ESM 返回给浏览器执行，并带上浏 ...`,l:"vite/vite实现原理.html#开发阶段",a:"开发阶段"},"35.18":{t:"生产阶段",p:`使用 Rollup 打包

treeshaking 的实现逻辑不一样

webpack，先收集所以模块的导出值，形成导出列表，放到依赖图对象里去，然后再递归遍历模块标记哪些导出值使用到了哪些没使用到， ...`,l:"vite/vite实现原理.html#生产阶段",a:"生产阶段"},"36.0":{t:"Vue.js 3.x 引入了 Composition API，它与之前的 Options API 有一些显著的区别。以下是两者之间的主要区别：",p:`
组织和重用逻辑的方式：
Options API：在 Options API 中，组件的逻辑是以选项对象的形式组织的，如 data、methods、computed、watch 等。每个选项都有自己的 ...`,l:"vue/vue-base/compositionAPI和OptionsAPI区别.html",a:"vue-js-3-x-引入了-composition-api-它与之前的-options-api-有一些显著的区别。以下是两者之间的主要区别"},"37.0":{t:"# diff 算法",p:"",l:"vue/vue-base/diff算法.html",a:"diff-算法"},"37.1":{t:"定义",p:"Diff 算法（差异算法）的主要操作是比较两个数据结构（如文本、树形结构等）的差异，并生成描述这些差异的补丁或指令。在 Vue.js 等前端框架中，Diff 算法主要用于比较新旧虚拟 DOM（Virt ...",l:"vue/vue-base/diff算法.html#定义",a:"定义"},"37.2":{t:"好处",p:`比较简单的 dom 结构直接更新 node 效率是比较高，但页面结构复杂，数据又多时，这样就要写更多的代码，花费的时间也多，并且维护性也不高；
`,l:"vue/vue-base/diff算法.html#好处",a:"好处"},"37.3":{t:"大致实现逻辑",p:`
Vue 组件状态发生变化，生成新的 vnode 树后，diff 算法会去获取旧树和新树，开始比较（vue 视图更新是组件级的）
首先是同层比较，比较两个节点的 key 和属性值，看是否相同
节点不同 ...`,l:"vue/vue-base/diff算法.html#大致实现逻辑",a:"大致实现逻辑"},"37.4":{t:"缺陷",p:`

对大型 DOM 树的性能影响：
当处理大型、复杂的 DOM 树时，diff 算法的性能可能会受到影响。因为即使是最小的变化也可能需要遍历整个树来找出差异。


key 的重要性：
在列表渲染中，V ...`,l:"vue/vue-base/diff算法.html#缺陷",a:"缺陷"},"37.5":{t:"diff 步骤",p:`第一步：调用 patch 方法，传入新旧虚拟 DOM，开始同层对比
第二步：调用 SameNode 方法，对比新旧节点是否同类型节点
第三步：如果不同，新节点直接代替旧节点
第四步：如果相同，调用 p ...`,l:"vue/vue-base/diff算法.html#diff-步骤",a:"diff-步骤"},"37.6":{t:"vue2 和 vue3 的 diff 区别",p:`
子节点比较


vue2 使用双端比较法，头和头、尾和尾、头和尾、尾和头，匹配到再位移起始结束节点下标，然后再利用 key，循环比较看有没有可以复用的节点，然后移动。
vue3 使用双端比较头和头、 ...`,l:"vue/vue-base/diff算法.html#vue2-和-vue3-的-diff-区别",a:"vue2-和-vue3-的-diff-区别"},"37.7":{t:"最长子序列的索引（贪心算法+二分法）+前置回溯法",p:`export function getSequence(arr) {
  const len = arr.length;
  const result = [0]; // 默认以数组中第0个为基准来做 ...`,l:"vue/vue-base/diff算法.html#最长子序列的索引-贪心算法-二分法-前置回溯法",a:"最长子序列的索引-贪心算法-二分法-前置回溯法"},"39.0":{t:"# nextTick",p:"",l:"vue/vue-base/nextTik.html",a:"nexttick"},"39.1":{t:"nextTick 兼容方式",p:"在 Vue.js 中，nextTick 的兼容方式主要依赖于不同 JavaScript 环境提供的异步任务队列。由于 nextTick 需要在 DOM 更新完成后执行回调，因此它需要一种机制来保证回调 ...",l:"vue/vue-base/nextTik.html#nexttick-兼容方式",a:"nexttick-兼容方式"},"40.0":{t:"# v-model 原理",p:"",l:"vue/vue-base/v-model原理.html",a:"v-model-原理"},"40.1":{t:"定义和用处",p:`它是一个 vue 的的核心指令，于在表单元素（如 input、textarea、select 等）和 Vue 实例的数据之间创建双向数据绑定。
`,l:"vue/vue-base/v-model原理.html#定义和用处",a:"定义和用处"},"40.2":{t:"区别",p:`

使用在表单元素这类标签上面，比如 input 相当于给 input 添加了一个:value 属性和 v-on:input 修改 value 值的方法的指令语法糖，在标签 onInput 事件触发后 ...`,l:"vue/vue-base/v-model原理.html#区别",a:"区别"},"41.0":{t:"# vue2 和 vue3 区别",p:"",l:"vue/vue-base/vue2和vue3区别.html",a:"vue2-和-vue3-区别"},"41.1":{t:"主要区别",p:`
工程源码


工程目录 v3 改成了 monorepo 方式维护，v2 是在 src 目录下根据功能拆分。

让开发人员更容易理解、更改模块
让包可以单独引用，而不用依赖整个 vuejs，比如响应式 ...`,l:"vue/vue-base/vue2和vue3区别.html#主要区别",a:"主要区别"},"42.0":{t:"# vue 模板解析渲染流程",p:`
首先会将单文件编译包模板使用编译函数，生成模板信息
然后会使用 DOM 编译包，拓展模板信息，比如 style 的转换函数和指令函数
结合这些信息，使用 core 里包里的解析方法，将模板信息转换成 ...`,l:"vue/vue-base/vue模板解析渲染流程.html",a:"vue-模板解析渲染流程"},"44.0":{t:"# vue 的 watch 和 computed",p:"",l:"vue/vue-base/z_watch和computed的实现.html",a:"vue-的-watch-和-computed"},"44.1":{t:"区别",p:"",l:"vue/vue-base/z_watch和computed的实现.html#区别",a:"区别"},"44.2":{t:"watch",p:`
是一个数据监听属性，数据有变化会触发 handle 的执行回调函数
有 deep 属性可以设置，深度监听元素变化，默认是 false， 只监听对象自身，不监听其内元素值改变 0，true，监听子属性 ...`,l:"vue/vue-base/z_watch和computed的实现.html#watch",a:"watch"},"44.3":{t:"computed",p:`
要依赖 data 上的属性变化返回一个值，watch 则是观察数据触发回调
再次引用该变量，如果关联的劫持变量没改变，会从缓存中拿
内部不能操作异步函数，会提示错误
有 get 和 set 方法，s ...`,l:"vue/vue-base/z_watch和computed的实现.html#computed",a:"computed"},"44.4":{t:"实现",p:"",l:"vue/vue-base/z_watch和computed的实现.html#实现",a:"实现"},"45.0":{t:"watch:",p:`watch 需要明确指定要侦听的响应式数据源，它可以侦听一个或多个数据源，如响应式对象的属性、getter 函数、甚至是多个数据源组成的数组。
watch 只会在侦听的数据源发生变更时才执行回调函数。 ...`,l:"vue/vue-base/z_watch和watchEffect.html",a:"watch"},"45.1":{t:"watchEffect:",p:`watchEffect 不需要明确指定要侦听的数据源，它会在函数内部自动追踪所有被访问的响应式数据。
watchEffect 在组件初始化时会立即执行一次，以收集依赖，之后会在任何依赖的数据变更时重新 ...`,l:"vue/vue-base/z_watch和watchEffect.html#watcheffect",a:"watcheffect"},"45.2":{t:"区别与优缺点:",p:`watch 更适合于特定的侦听场景，当你知道要侦听哪些特定的数据源时使用 watch 更为合适。它提供了更多的灵活性，并且可以访问旧值和新值。
watchEffect 更适合于一些通用的副作用场景，当 ...`,l:"vue/vue-base/z_watch和watchEffect.html#区别与优缺点",a:"区别与优缺点"},"46.0":{t:"# 响应式原理",p:"",l:"vue/vue-base/响应式原理.html",a:"响应式原理"},"46.1":{t:"vue2",p:`首先需要了解三个概念和发布-订阅模式（data 属性发布者，setter 事务处理，watcher 订阅者）

Observer（数据的劫持者，用来劫持 data、props、computed 的数据 ...`,l:"vue/vue-base/响应式原理.html#vue2",a:"vue2"},"46.2":{t:"具体流程",p:`
在组件实例初始化时，Observer 会使用 object.definePropty 对 data 这些对象遍历它的所有属性做 getter 和 setter 做数据劫持，同时也会创建一个观察者对象 ...`,l:"vue/vue-base/响应式原理.html#具体流程",a:"具体流程"},"46.3":{t:"vue3",p:`和 vue2 不同它需要先了解两个概念

reactive （内部做数据劫持）
effect （副作用函数，内部包含渲染方法）

`,l:"vue/vue-base/响应式原理.html#vue3",a:"vue3"},"46.4":{t:"具体流程",p:`
初始化实例时，会使用 reactive 将对象和集合使用 proxy，做 getter/setter/deletePropty 这些操作，针对对象和集合会有不同的处理方法。
然后会执行 effect ...`,l:"vue/vue-base/响应式原理.html#具体流程",a:"具体流程"},"47.0":{t:"# vue 状态管理",p:"",l:"vue/vue-base/状态管理.html",a:"vue-状态管理"},"47.1":{t:"pinia 实现原理",p:`
利用 vue 的 use，调用 pinia 提供的 install 方法，通过 vue 的 provide，将当前 pinia 实例注册到每个组件实例里去。
当业务里使用 usexx 时，会调用 p ...`,l:"vue/vue-base/状态管理.html#pinia-实现原理",a:"pinia-实现原理"},"47.2":{t:"storeToRef",p:"",l:"vue/vue-base/状态管理.html#storetoref",a:"storetoref"},"47.3":{t:"vuex 原理",p:`
利用 vue 的 use 方法，vuex 提供 install 方法，vue 将 vuex 对象，通过$options 挂载到 vue 组件全局。
利用 new Vue 实例，创建响应式 data， ...`,l:"vue/vue-base/状态管理.html#vuex-原理",a:"vuex-原理"},"47.4":{t:"区别",p:`
去掉了 mutaions 属性，同时提供了$reset,$onActions 这类 API

`,l:"vue/vue-base/状态管理.html#区别",a:"区别"},"48.0":{t:"# 动态数字",p:"",l:"vue/vue3/countTo.html",a:"动态数字"},"48.1":{t:"示例",p:`&lt;div&gt;
&lt;countTo :endVal=&quot;99999999&quot;&gt;&lt;/countTo&gt;
&lt;br/&gt;
&lt;countTo :en ...`,l:"vue/vue3/countTo.html#示例",a:"示例"},"48.2":{t:"代码",p:`&lt;div &gt;
  &lt;countTo :endVal=&quot;99999999&quot;&gt;&lt;/countTo&gt;
  &lt;br/&gt;
  &lt;coun ...`,l:"vue/vue3/countTo.html#代码",a:"代码"},"48.3":{t:"参数",p:`


参数
说明
类型
默认值




startVal
开始滚动数值
number
0


endVal
结束滚动数值
number
0


duration
滚动时间，单位ms
number
0
 ...`,l:"vue/vue3/countTo.html#参数",a:"参数"},"48.4":{t:"贡献名单",p:`&lt;VPTeamMembers size=&quot;small&quot; :members=&quot;members&quot; /&gt;
`,l:"vue/vue3/countTo.html#贡献名单",a:"贡献名单"},"49.0":{t:"# 响应式 API 区别",p:"",l:"vue/vue3/响应式 API.html",a:"响应式-api-区别"},"49.1":{t:"ref",p:"",l:"vue/vue3/响应式 API.html#ref",a:"ref"},"49.2":{t:"为什么访问值需要.value",p:"",l:"vue/vue3/响应式 API.html#为什么访问值需要-value",a:"为什么访问值需要-value"},"49.3":{t:"reactive",p:"",l:"vue/vue3/响应式 API.html#reactive",a:"reactive"},"49.4":{t:"shallowRef",p:"",l:"vue/vue3/响应式 API.html#shallowref",a:"shallowref"},"49.5":{t:"shallowReactive",p:"",l:"vue/vue3/响应式 API.html#shallowreactive",a:"shallowreactive"},"49.6":{t:"toRaw",p:"",l:"vue/vue3/响应式 API.html#toraw",a:"toraw"},"49.7":{t:"markRaw",p:"",l:"vue/vue3/响应式 API.html#markraw",a:"markraw"},"49.8":{t:"toRef",p:"",l:"vue/vue3/响应式 API.html#toref",a:"toref"},"49.9":{t:"toRefS",p:"",l:"vue/vue3/响应式 API.html#torefs",a:"torefs"},"49.10":{t:"watch",p:"",l:"vue/vue3/响应式 API.html#watch",a:"watch"},"49.11":{t:"computed",p:"",l:"vue/vue3/响应式 API.html#computed",a:"computed"},"50.0":{t:"# webpack",p:"",l:"webpack/webpack实现原理.html",a:"webpack"},"50.1":{t:"定义",p:"一个用于现代 JavaScript 应用程序的 静态模块打包工具。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图(dependency graph)，然后将你项目中所 ...",l:"webpack/webpack实现原理.html#定义",a:"定义"},"50.2":{t:"作用",p:`把静态模块内容，压缩、转译、打包等（前端工程化）
把 less/sass 转成 css 代码
把 ES6+ 降级成 ES5 等
支持多种模块文件类型，多种模块标准语法
`,l:"webpack/webpack实现原理.html#作用",a:"作用"},"50.3":{t:"加载器 loader",p:`webpack 默认只识别 js 和 json，要想识别更多内容，就需要使用加载器器（loader）
`,l:"webpack/webpack实现原理.html#加载器-loader",a:"加载器-loader"},"50.4":{t:"规则 rules",p:`它有两个属性：

test，识别出哪些文件会被转换，一般是正则匹配
use，定义用哪个 loader 进行转换

`,l:"webpack/webpack实现原理.html#规则-rules",a:"规则-rules"},"50.5":{t:"占位符",p:`
【hash】对模块内容做算法计算，得到映射的数字字母组合的字符串
【ext】使用当前模块原本的占位符，例如：.png / .jpg 等字符串
【query】保留引入文件时代码中查询参数（只有 URL ...`,l:"webpack/webpack实现原理.html#占位符",a:"占位符"},"50.6":{t:"类型",p:`enforce 属性，分为前置(pre)、普通(normal)、行内(inline)、后置(post)
`,l:"webpack/webpack实现原理.html#类型",a:"类型"},"50.7":{t:"执行顺序",p:`
Pitching 阶段: Loader 上的 pitch 方法，按照 后置(post)、行内(inline)、普通(normal)、前置(pre) 的顺序调用。
Normal 阶段: Loader  ...`,l:"webpack/webpack实现原理.html#执行顺序",a:"执行顺序"},"50.8":{t:"内联方式",p:`
使用 ! 前缀，将禁用所有已配置的 normal loader(普通 loader)

import test from &quot;!c-loader&quot;;

const a = 1;

 ...`,l:"webpack/webpack实现原理.html#内联方式",a:"内联方式"},"50.9":{t:"编写自定义 loader",p:`三个参数 source、map、meta

loader 是一个函数，接收一个源代码
不能是箭头函数因为要复用 this，传递上下文参数
同步处理必须返回 buffer 或者 string，异步需要调 ...`,l:"webpack/webpack实现原理.html#编写自定义-loader",a:"编写自定义-loader"},"50.10":{t:"插件 plugin",p:`loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。
`,l:"webpack/webpack实现原理.html#插件-plugin",a:"插件-plugin"},"50.11":{t:"hooks",p:`
entry-option 初始化 option
run 开始编译
compile 真正开始的编译，在创建 compilation 对象之前
compilation 生成好了 compilation  ...`,l:"webpack/webpack实现原理.html#hooks",a:"hooks"},"50.12":{t:"Hook 类型",p:`
SyncHook 同步钩子 Webpack 共出现 71 次，如 Compiler.hooks.compilation
SyncBailHook 同步熔断钩子 Webpack 共出现 66 次，如  ...`,l:"webpack/webpack实现原理.html#hook-类型",a:"hook-类型"},"50.13":{t:"执行顺序",p:`钩子处理，没有执行顺序一说，谁先触发钩子谁先执行
`,l:"webpack/webpack实现原理.html#执行顺序",a:"执行顺序"},"50.14":{t:"自定义插件",p:`class TestPlugin {
  constructor() {
    console.log(&quot;TestPlugin constructor()&quot;);
  }
  // ...`,l:"webpack/webpack实现原理.html#自定义插件",a:"自定义插件"},"50.15":{t:"配置 Configuration",p:"",l:"webpack/webpack实现原理.html#配置-configuration",a:"配置-configuration"},"50.16":{t:"模块 Modules",p:`与 Node.js 模块相比，webpack 模块能以各种方式表达它们的依赖关系。下面是一些示例：

ES2015 import 语句
CommonJS require() 语句
AMD define ...`,l:"webpack/webpack实现原理.html#模块-modules",a:"模块-modules"},"50.17":{t:"优化 Optimization",p:`
css-minimizer-webpack-plugin压缩 css，在 optimization 的 minimizer 里实例化

`,l:"webpack/webpack实现原理.html#优化-optimization",a:"优化-optimization"},"50.18":{t:"热更新机制",p:`
本地服务启动时，会启动一个 websocket 服务，与浏览器建立连接
服务端监控到文件修改，会去构建新的模块，生成新的编译标识
与旧模块做对比，分析出要替换的模块，生成热更新文件
ws 通知浏览器 ...`,l:"webpack/webpack实现原理.html#热更新机制",a:"热更新机制"},"50.19":{t:"treeshaking 机制",p:"",l:"webpack/webpack实现原理.html#treeshaking-机制",a:"treeshaking-机制"},"50.20":{t:"定义",p:"是一种基于 ES Module 规范的 Dead Code Elimination 技术，它会在运行过程中静态分析模块之间的导入导出，确定 ESM 模块中哪些导出值未曾其他模块使用，并将其删除，以此实 ...",l:"webpack/webpack实现原理.html#定义",a:"定义"},"50.21":{t:"实现过程",p:`
构建阶段收集模块信息，有哪些导出值，形成导出列表，记录到依赖关系图 ModuleGraph 对象里去
封装阶段，再次遍历模块，标记出导出列表哪些导出值被用到，哪些没有
导出阶段，将未使用和使用的值生 ...`,l:"webpack/webpack实现原理.html#实现过程",a:"实现过程"},"50.22":{t:"开发环境搭建",p:`使用webpack-dev-server做服务器
// ...

module.exports = {
  // ...
  mode: &quot;development&quot;,
};

&q ...`,l:"webpack/webpack实现原理.html#开发环境搭建",a:"开发环境搭建"},"50.23":{t:"注入环境变量",p:`// ...
const webpack = require(&quot;webpack&quot;);

module.exports = {
  // ...
  plugins: [
    / ...`,l:"webpack/webpack实现原理.html#注入环境变量",a:"注入环境变量"},"50.24":{t:"别名",p:`// ...

const config = {
  // ...
  resolve: {
    alias: {
      &quot;@&quot;: path.resolve(__dirn ...`,l:"webpack/webpack实现原理.html#别名",a:"别名"},"50.25":{t:"外部扩展 Externals",p:`externals 配置选项提供了「从输出的 bundle 中排除依赖」的方法。相反，所创建的 bundle 依赖于那些存在于用户环境(consumer's environment)中的依赖
`,l:"webpack/webpack实现原理.html#外部扩展-externals",a:"外部扩展-externals"},"50.26":{t:"获取第三方对应 key,value",p:`key 是 package.json 中安装的包名，value 导出时的全局变量
`,l:"webpack/webpack实现原理.html#获取第三方对应-key-value",a:"获取第三方对应-key-value"},"50.27":{t:"缺点",p:`没 tree shaking
`,l:"webpack/webpack实现原理.html#缺点",a:"缺点"},"50.28":{t:"编译打包过程",p:"",l:"webpack/webpack实现原理.html#编译打包过程",a:"编译打包过程"},"50.29":{t:"概念",p:`
bundle


Bundle（捆绑包）是指将所有相关的模块和资源打包在一起形成的单个文件。它是应用程序的最终输出，可以在浏览器中加载和执行。
捆绑包通常由 Webpack 根据入口点（entry） ...`,l:"webpack/webpack实现原理.html#概念",a:"概念"},"50.30":{t:"过程",p:`
初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。
开始编译：用上一步得到的参数初始化 Compiler 对象,加载所有配置的插件,执行对象的 run 方法开始执行编译。
 ...`,l:"webpack/webpack实现原理.html#过程",a:"过程"},"52.0":{t:"# 性能分析",p:`
https://jonny-wei.github.io/blog/devops/performance/indicator.html

`,l:"工程化/性能分析.html",a:"性能分析"},"53.0":{t:"# 错误监听",p:`
https://segmentfault.com/a/1190000016959011

`,l:"工程化/错误监听.html",a:"错误监听"},"54.0":{t:"# 无界微前端方案",p:"",l:"微前端/wujie.html",a:"无界微前端方案"},"54.1":{t:"优势",p:`
使用成本低
运行快
不仅可以预加载，也提供了类似 fiber 的方式，使用 requestIdleCallback Api 去执行，避免阻塞主应用的渲染进程。同时子应用的 js 在 iframe 执 ...`,l:"微前端/wujie.html#优势",a:"优势"},"55.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-06-24 21:40:24
@LastEditors   ...`,l:"面试经验/00-盒模型.html",a:""},"55.1":{t:"定义",p:`本质是一个区块盒子，包裹着HMTL的元素，它有四个属性，content、margin、panding、border。但她又分为两者类型，标准和IE盒模型
`,l:"面试经验/00-盒模型.html#定义",a:"定义"},"55.2":{t:"注意点",p:`根据实际获取的宽度来区分
padding, margin, boxder, content决定盒子大小

W3C
真实的宽高等于content的，不包含border和padding。相当于box-si ...`,l:"面试经验/00-盒模型.html#注意点",a:"注意点"},"56.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-06-27 12:27:12
@LastEditors   ...`,l:"面试经验/01-margin和padding.html",a:""},"56.1":{t:"定义",p:`设置元素的外边距
`,l:"面试经验/01-margin和padding.html#定义",a:"定义"},"56.2":{t:"注意",p:`
对于内联元素上下无效，左右正常

padding
`,l:"面试经验/01-margin和padding.html#注意",a:"注意"},"56.3":{t:"定义",p:`设置元素的外边距
`,l:"面试经验/01-margin和padding.html#定义",a:"定义"},"56.4":{t:"注意",p:`
对内联元素有效果，但只影响文档流左右，上下不影响

`,l:"面试经验/01-margin和padding.html#注意",a:"注意"},"57.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-06-26 23:26:31
@LastEditors   ...`,l:"面试经验/02-float属性.html",a:""},"57.1":{t:"定义",p:`
标准文档流：

空白折叠，无论多少个tab、空格、换行都折叠成一个空格，所以要紧挨着就不要触发这现象
高矮不齐，底部对齐
自动换行


`,l:"面试经验/02-float属性.html#定义",a:"定义"},"57.2":{t:"对文档流的影响",p:`
改变块级、内联盒子特性，内联可设宽高，块级可内容撑开
脱离标准文档流，向文本流前面带相同float属性的元素对齐，如果没有就向前直到找到块级元素排在其后面，如果没有前面没有块级元素，对齐父元素两边
 ...`,l:"面试经验/02-float属性.html#对文档流的影响",a:"对文档流的影响"},"57.3":{t:"清除浮动",p:`
给上层级的盒子添加特定高度
父级after类添加clear: both
浮动元素后隔添加元素的带上clear: both，内-浮动元素后，外-不想受影响元素前
如果父盒子没设置高，可以触发bfc

`,l:"面试经验/02-float属性.html#清除浮动",a:"清除浮动"},"58.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-06-26 10:00:04
@LastEditors   ...`,l:"面试经验/03-position属性.html",a:""},"59.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-06-26 13:59:14
@LastEditors   ...`,l:"面试经验/04-BFC.html",a:""},"59.1":{t:"BFC特性",p:`
同一BFC下相邻块级元素的margin会重叠
触发了BFC的元素，不会被浮动元素覆盖，避免文字环绕

overflow、float、dispaly: inline-block、table-cell触 ...`,l:"面试经验/04-BFC.html#bfc特性",a:"bfc特性"},"59.2":{t:"触发BFC",p:`
子 float: left \\ right （每个元素都设置，注意宽度，换行了才有效果显示）
子 position: absolute \\ fixed
display: inline-block \\ ...`,l:"面试经验/04-BFC.html#触发bfc",a:"触发bfc"},"59.3":{t:"解决块级块级margin重叠",p:`
给其中一个元素触发bfc，但overflow作用在子元素上所以无效
用个父盒子包裹其中一个元素，然后给父盒子设置overflow

`,l:"面试经验/04-BFC.html#解决块级块级margin重叠",a:"解决块级块级margin重叠"},"59.4":{t:"自适应布局",p:`
左右自适应，一边浮动，另一边overflow
中间自适应，左右浮动，中间overflow

`,l:"面试经验/04-BFC.html#自适应布局",a:"自适应布局"},"60.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-06-24 21:28:00
@LastEditors   ...`,l:"面试经验/05-重排(回流)和重绘的优化.html",a:""},"61.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-06-24 21:28:26
@LastEditors   ...`,l:"面试经验/06-浏览器cookies工作原理.html",a:""},"62.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-06-24 22:12:12
@LastEditors   ...`,l:"面试经验/07-js监听复制和粘贴.html",a:""},"63.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-06-29 21:07:17
@LastEditors:  ...`,l:"面试经验/08-eventloop.html",a:""},"63.1":{t:"任务队列",p:`一种先进先出的操作受限制的线性表
`,l:"面试经验/08-eventloop.html#任务队列",a:"任务队列"},"63.2":{t:"任务",p:`在js中任务被分为宏任务和微任务

宏任务

script里的代码
setTimeout
setInterval
setImmediate(非标准api)
I / O


微任务

Process.n ...`,l:"面试经验/08-eventloop.html#任务",a:"任务"},"63.3":{t:"机制",p:"JavaScript是一个单线程，它执行的所有代码都放在调用栈里面，遇到宏微任务分别将其加入各自任务队列，当调用栈执行完毕之后，就会在任务队列里面找任务，如果有微任务，就会先执行微任务，再去执行宏任务 ...",l:"面试经验/08-eventloop.html#机制",a:"机制"},"63.4":{t:"版本差异",p:`
在Google73版本之前，node.js v11之前
await的值被包裹在一个promise中，尚未resolve，然后将整个await放进微任务队列，等排到时执行了promise，then添加 ...`,l:"面试经验/08-eventloop.html#版本差异",a:"版本差异"},"63.5":{t:"nodejs",p:"&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/6/12/163f35f70dc06fcd?imageView2/0/w/1280/h/960 ...",l:"面试经验/08-eventloop.html#nodejs",a:"nodejs"},"63.6":{t:"libuv",p:"&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/6/12/163f410b951ce409?imageView2/0/w/1280/h/960 ...",l:"面试经验/08-eventloop.html#libuv",a:"libuv"},"63.7":{t:"机制",p:"",l:"面试经验/08-eventloop.html#机制",a:"机制"},"63.8":{t:"六个阶段",p:`
timers: 执行setTimeout和setInterval中到期的callback
pending callback: 上一轮循环中少数的callback会放在这一阶段执行
idle, pre ...`,l:"面试经验/08-eventloop.html#六个阶段",a:"六个阶段"},"63.9":{t:"循环原理",p:`
setImmediate设计用于在当前poll阶段完成后check阶段执行脚本


当每个阶段完成后，如果存在 nextTick 队列，就会执行队列中的所有回调函数，并且优先于其他 microtas ...`,l:"面试经验/08-eventloop.html#循环原理",a:"循环原理"},"63.10":{t:"练习",p:`  console.log('script start')

  async function async1() {
    await async2()
    let i = await asyn ...`,l:"面试经验/08-eventloop.html#练习",a:"练习"},"64.0":{t:"# 手写promise",p:`/*
 * @Author: maps131_liaoxing
 * @Date: 2021-06-11 15:58:48
 * @LastEditors  : maps131_liaoxing
 * ...`,l:"面试经验/09-手写promise.html",a:"手写promise"},"65.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-06-30 21:55:51
@LastEditors   ...`,l:"面试经验/10-generator.html",a:""},"65.1":{t:"特性",p:`
遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值
yield表达式本身没有返回值，或者说总是返回undefined
next方法 ...`,l:"面试经验/10-generator.html#特性",a:"特性"},"65.2":{t:"demo",p:`  function fetchData(params) {
    return new Promise((resolve, reject) =&gt; {
      setTimeout(()  ...`,l:"面试经验/10-generator.html#demo",a:"demo"},"66.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-01 21:19:57
@LastEditors   ...`,l:"面试经验/11-async和await.html",a:""},"66.1":{t:"原理demo",p:`  /* 自动执行next */
  function co (gen) {
      return new Promise((res, rej) =&gt; {
        let next  ...`,l:"面试经验/11-async和await.html#原理demo",a:"原理demo"},"66.2":{t:"注意事项",p:`
await 命令后面的Promise对象，运行结果可能是 rejected，此时等同于 async 函数返回的 Promise 对象被reject。因此需要加上错误处理，可以给每个 await 后的 ...`,l:"面试经验/11-async和await.html#注意事项",a:"注意事项"},"67.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-06-30 22:08:47
@LastEditors   ...`,l:"面试经验/12-监听页面性能.html",a:""},"68.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-01 21:21:22
@LastEditors:  ...`,l:"面试经验/13-js变量提升.html",a:""},"69.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-01 21:22:09
@LastEditors   ...`,l:"面试经验/14-垃圾回收机制.html",a:""},"69.1":{t:"不被回收的固有值",p:`
本地函数的局部变量和参数
全局变量 (所以为什么要注意)
内部的

`,l:"面试经验/14-垃圾回收机制.html#不被回收的固有值",a:"不被回收的固有值"},"69.2":{t:"回收机制",p:`基于'可达性'概念，活在作用域中。
`,l:"面试经验/14-垃圾回收机制.html#回收机制",a:"回收机制"},"69.3":{t:"标记清除法",p:`当进入作用域，局部变量打上进入的标签，垃圾回收时对进入状态的变量永远不会清除，当作用域结束时，局部变量打上结束标签，下一次垃圾回收时，就会被干掉

`,l:"面试经验/14-垃圾回收机制.html#标记清除法",a:"标记清除法"},"69.4":{t:"引用计数法",p:`声明一个引用类型时，标记其引用为0，然后跟踪这个引用类型，当这个引用类型地址赋值给变量时引用标记+1，当变量改变值之后，引用标记-1，当0时，下一次垃圾回收时被干掉

`,l:"面试经验/14-垃圾回收机制.html#引用计数法",a:"引用计数法"},"70.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-02 23:42:48
@LastEditors   ...`,l:"面试经验/16-js执行上下文.html",a:""},"71.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-03 16:15:56
@LastEditors   ...`,l:"面试经验/17-作用域.html",a:""},"71.1":{t:"作用域的形成",p:`
在执行上下文阶段，遇到函数声明时，在创建阶段，汇报父级的变量对象集合保存到内部属性[[ scope ]]中，这个集合称之为作用域链
然后在运行激活阶段，会复制[[ scope ]]，然后创建自身的变 ...`,l:"面试经验/17-作用域.html#作用域的形成",a:"作用域的形成"},"72.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-01 21:51:49
@LastEditors   ...`,l:"面试经验/18-闭包.html",a:""},"72.1":{t:"闭包的特征",p:`
函数内包含一个函数，且内函数含引用了父层函数的变量(包括形参)
闭包不会随着父级作用域的结束而结束

`,l:"面试经验/18-闭包.html#闭包的特征",a:"闭包的特征"},"72.2":{t:"闭包共性",p:`多个内函数共用一个闭包
`,l:"面试经验/18-闭包.html#闭包共性",a:"闭包共性"},"72.3":{t:"metetor经典闭包泄露问题",p:`  var t = null;
  var replaceThing = function() {
    var o = t
    var unused = function() {
       ...`,l:"面试经验/18-闭包.html#metetor经典闭包泄露问题",a:"metetor经典闭包泄露问题"},"73.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-02 23:43:22
@LastEditors   ...`,l:"面试经验/19-this指向.html",a:""},"74.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-01 21:38:45
@LastEditors   ...`,l:"面试经验/20-null和undefined.html",a:""},"75.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-01 21:51:09
@LastEditors   ...`,l:"面试经验/21-类型判断.html",a:""},"75.1":{t:"typeOf",p:`
typeof操作符一般用来检测基本数据类型，返回以下某个字符串：'undefined', 'boolean', 'number', 'string', 'object', 'function'。
n ...`,l:"面试经验/21-类型判断.html#typeof",a:"typeof"},"75.2":{t:"instabceof",p:`instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。
  class Lei {
    
  }

  let temp = new Lei() ...`,l:"面试经验/21-类型判断.html#instabceof",a:"instabceof"},"75.3":{t:"字符串",p:`let str = 'str'
let str2 = String('str')
let str3 = new String('str')
typeof(str) // string
typeof(s ...`,l:"面试经验/21-类型判断.html#字符串",a:"字符串"},"75.4":{t:"数组判断",p:`
instanceof   arr instanceof Array
proto    arr._proto === Array.prototype
Object.prototype.toString ...`,l:"面试经验/21-类型判断.html#数组判断",a:"数组判断"},"75.5":{t:"对象判断",p:`
typeof   只能判断基本类型
instanceof   obj intancepof Object
constructor  obj.contractor === Object
Object. ...`,l:"面试经验/21-类型判断.html#对象判断",a:"对象判断"},"76.0":{t:"# const",p:`const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。
var、let
都是 ...`,l:"面试经验/22-varletconst.html",a:"const"},"76.1":{t:"区别",p:`
let声明的变量在块作用域内可访问，例如在{}内声明，只能在{}内访问

if (1) {
  var i = 0
  let c = 0
}
console.log(i) // 0
console ...`,l:"面试经验/22-varletconst.html#区别",a:"区别"},"77.0":{t:"# 浏览器资源加载",p:"",l:"面试经验/23-浏览器资源加载.html",a:"浏览器资源加载"},"77.1":{t:"预加载新标准api",p:`
link-prefetch

作为link的rel属性的值，允许浏览器后台在空闲时间获取将来可能用到的资源，并且储存在缓存中，当请求prefetched的资源时，直接读取缓存中的。
低优先级
不要滥 ...`,l:"面试经验/23-浏览器资源加载.html#预加载新标准api",a:"预加载新标准api"},"77.2":{t:"异步加载",p:`&lt;img src=&quot;./img/html异步加载.png&quot;&gt;

默认情况HTML解析，然后加载JS，此时HTML解析中断，然后执行JS，最后JS执行完成恢复HTML解析 ...`,l:"面试经验/23-浏览器资源加载.html#异步加载",a:"异步加载"},"77.3":{t:"页面加载过程",p:`
拿到地址，进入应用层，DNS解析，发起http请求（细节待补充）
进入传输层使用tcp协议，然后通过网路层、数据链路层、物理层，建立三次握手连接
传输html页面数据，
开始解析html的文档，开启 ...`,l:"面试经验/23-浏览器资源加载.html#页面加载过程",a:"页面加载过程"},"78.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-05 21:40:16
@LastEditors   ...`,l:"面试经验/24-深拷贝和浅拷贝.html",a:""},"78.1":{t:"浅拷贝",p:`让变量指向某个对象的指针，共享指针，其中一成员修改内容，其他也跟着修改
`,l:"面试经验/24-深拷贝和浅拷贝.html#浅拷贝",a:"浅拷贝"},"78.2":{t:"浅拷贝方式",p:`
Object.assign() 对象合并

  let newObj = Object.assign({}, obj)


合并一层相当于深拷贝，值不为数组，对象，可以是函数，类


Array.c ...`,l:"面试经验/24-深拷贝和浅拷贝.html#浅拷贝方式",a:"浅拷贝方式"},"78.3":{t:"深拷贝",p:`
JSON.parse + JSON.stringify

  let newObj = JSON.parse(JSON.stringify(obj))

undefined 会转为null JSON ...`,l:"面试经验/24-深拷贝和浅拷贝.html#深拷贝",a:"深拷贝"},"79.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-05 21:41:28
@LastEditors   ...`,l:"面试经验/25-es6newSet.html",a:""},"79.1":{t:"方法",p:`


方法
描述




add
添加某个值，返回Set对象本身。


clear
删除所有的键/值对，没有返回值。


delete
删除某个键，返回true。如果删除失败，返回false。


h ...`,l:"面试经验/25-es6newSet.html#方法",a:"方法"},"79.2":{t:"add",p:`  let list = new Set()
  list.add(99)

`,l:"面试经验/25-es6newSet.html#add",a:"add"},"79.3":{t:"clear",p:`  list.clear()

`,l:"面试经验/25-es6newSet.html#clear",a:"clear"},"79.4":{t:"delete",p:`  /* 栈区储存，删除无效 */
  let list2 = new Set([{name: 1, id: 1}, {naem: 2, id: 2}])
  list2.delete(0)
  li ...`,l:"面试经验/25-es6newSet.html#delete",a:"delete"},"79.5":{t:"has",p:`  /* 判断栈区 */
  console.log(list2.has(0), list2.has({name: 1, id: 1}), list3.has(obj2)) // f f t

`,l:"面试经验/25-es6newSet.html#has",a:"has"},"79.6":{t:"forEach",p:`function logSetElements(value1, value2, set) {
  console.log(&quot;s[&quot; + value1 + &quot;] = &qu ...`,l:"面试经验/25-es6newSet.html#foreach",a:"foreach"},"79.7":{t:"entries",p:`var mySet = new Set();
mySet.add(&quot;foobar&quot;);
mySet.add(1);
mySet.add(&quot;baz&quot;);

var ...`,l:"面试经验/25-es6newSet.html#entries",a:"entries"},"79.8":{t:"values",p:`  var mySet = new Set();
mySet.add('foo');
mySet.add('bar');
mySet.add('baz');

var setIter = mySet. ...`,l:"面试经验/25-es6newSet.html#values",a:"values"},"79.9":{t:"数组去重",p:`  let arr = [3, 5, 2, 2, 5, 5];
  let setArr = new Set(arr)     // 返回set数据结构  Set(3) {3, 5, 2}

  // ...`,l:"面试经验/25-es6newSet.html#数组去重",a:"数组去重"},"79.10":{t:"字符串去重",p:`  let str = &quot;352255&quot;
  let unique = [...new Set(str)].join(&quot;&quot;)

`,l:"面试经验/25-es6newSet.html#字符串去重",a:"字符串去重"},"79.11":{t:"实现并集、交集、和差集",p:`  let a = new Set([1, 2, 3]);
  let b = new Set([4, 3, 2]);

  // 并集
  let union = new Set([...a, .. ...`,l:"面试经验/25-es6newSet.html#实现并集、交集、和差集",a:"实现并集、交集、和差集"},"80.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-05 21:41:46
@LastEditors   ...`,l:"面试经验/26-页面优化.html",a:""},"80.1":{t:"基本优化",p:`
减少http请求

根据页面情况，后台尽量将数据量小的几个接口，合并成一个


使用浏览器http缓存
常规http缓存只缓存get方式

不常变资源使用强缓存，后台可以设置prama（http1. ...`,l:"面试经验/26-页面优化.html#基本优化",a:"基本优化"},"80.2":{t:"首次进入页面",p:`
gzip压缩，静态资源最好本地打包时压好，不要让服务器响应时去压
静态资源压缩、合并
Sprites图片
资源懒加载，按需加载
合理搭配js，css加载的位置
起本地服务，资源放本地
避免页面重定向 ...`,l:"面试经验/26-页面优化.html#首次进入页面",a:"首次进入页面"},"80.3":{t:"再次进入页面",p:`
使用浏览器http缓存
常规http缓存只缓存get方式

不常变资源使用强缓存，后台可以设置prama（http1.0产物）、cache-control、expires

破强缓存，资源带上has ...`,l:"面试经验/26-页面优化.html#再次进入页面",a:"再次进入页面"},"81.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-06 21:40:51
@LastEditors   ...`,l:"面试经验/27-== 和 === 的区别.html",a:""},"81.1":{t:"==",p:`
只比较值，不比较类型
在判断相等时会进行隐式的类型转换， 其比较遵循一些原则，即先转换类型再比较。

如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值，即是调用Number()方法。
如 ...`,l:"面试经验/27-== 和 === 的区别.html#",a:""},"81.2":{t:"===",p:`先判断类型再比较，类型不同直接不相等
`,l:"面试经验/27-== 和 === 的区别.html#",a:""},"82.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-06 22:45:21
@LastEditors   ...`,l:"面试经验/28-网络安全相关.html",a:""},"82.1":{t:"xss攻击 （Cross Site Scripting攻击,跨站脚本攻击）",p:`
反射型：所谓反射型，得用户去触发，那得先注入，注入得通过页面劫持或者不法数据返回，所以不明白这是咋分成反射型的，和其他方式关联极大

账号密码

表单方式提交： 输入js代码，表单没做过滤转义，因为 ...`,l:"面试经验/28-网络安全相关.html#xss攻击-cross-site-scripting攻击-跨站脚本攻击",a:"xss攻击-cross-site-scripting攻击-跨站脚本攻击"},"82.2":{t:"防御方式",p:`
前端入参字符转义过滤，服务端入参过滤
服务器端返回前过滤或者转义
长度限制
cookies设置httponly为true，让js无法获取
csp(Content-Security-Policy)，设 ...`,l:"面试经验/28-网络安全相关.html#防御方式",a:"防御方式"},"82.3":{t:"csrf攻击 （Cross-site request forgery, 跨站请求伪造）",p:`通过存储在cookies里的信息，请求自动带上，校验身份

在只有cookies鉴权时，用户a登入网站A，拿到鉴权信息后，点进了用户b引诱的网页B，B内向网站A的服务发送了恶意请求，因为请求网站A时自 ...`,l:"面试经验/28-网络安全相关.html#csrf攻击-cross-site-request-forgery-跨站请求伪造",a:"csrf攻击-cross-site-request-forgery-跨站请求伪造"},"82.4":{t:"防御方式",p:`
验证 HTTP Referer 字段。判断请求来源
添加请求参数双重验证
在 HTTP 头中自定义属性并验证
cookie设置SameSite，只能url和请求url同样时才带上cookies
验证 ...`,l:"面试经验/28-网络安全相关.html#防御方式",a:"防御方式"},"82.5":{t:"sql注入",p:`利用服务端代码漏洞，注入可执行SQL代码，服务端读取时没做相关处理，导致这段SQL命令
`,l:"面试经验/28-网络安全相关.html#sql注入",a:"sql注入"},"82.6":{t:"防御方式",p:`
长度限制
关键字过滤转义
不直接返回显示错误原因
预编译防注入

`,l:"面试经验/28-网络安全相关.html#防御方式",a:"防御方式"},"83.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-10 21:08:10
@LastEditors   ...`,l:"面试经验/29-谷歌扔两鸡蛋问题.html",a:""},"84.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-10 21:58:06
@LastEditors   ...`,l:"面试经验/30-斐波那契数.html",a:""},"85.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-10 21:58:40
@LastEditors   ...`,l:"面试经验/31-函数arguments.html",a:""},"85.1":{t:"arguments",p:`它是一个类数组对象，指向形参。有length，可以索引，同时也有个callee属性，指向这个函数本身
`,l:"面试经验/31-函数arguments.html#arguments",a:"arguments"},"85.2":{t:"将其转化为数组",p:`
Array.prototype.slice.apply(arguments)和Array.prototype.concat.apply([], arguments) 返回一个数组 相当于复制
Arr ...`,l:"面试经验/31-函数arguments.html#将其转化为数组",a:"将其转化为数组"},"86.0":{t:"<!--",p:`
@Author: maps131_liaoxing
@Date: 2021-07-09 11:54:49
@LastEditors: maps131_liaoxing
@LastEditTime:  ...`,l:"面试经验/32-跨域请求.html",a:""},"86.1":{t:"原生ajax",p:`  let xhr = null
  if (window.XMLHttpRequest) {
    xhr = new XMLHttpRequest()
  } else {
    xhr =  ...`,l:"面试经验/32-跨域请求.html#原生ajax",a:"原生ajax"},"86.2":{t:"jsonp",p:"jsonp的原理就是利用script标签没有跨域限制，通过script标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解 ...",l:"面试经验/32-跨域请求.html#jsonp",a:"jsonp"},"86.3":{t:"cors",p:"CORS是一个W3C标准，全称是&quot;跨域资源共享&quot;（Cross-origin resource sharing）。 它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从 ...",l:"面试经验/32-跨域请求.html#cors",a:"cors"},"86.4":{t:"nginx反向代理",p:`服务配置一个代理服务器，反向代理请求跨域接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域访问。
`,l:"面试经验/32-跨域请求.html#nginx反向代理",a:"nginx反向代理"},"86.5":{t:"nodejs中间件代理",p:"node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的co ...",l:"面试经验/32-跨域请求.html#nodejs中间件代理",a:"nodejs中间件代理"},"86.6":{t:"webSocket协议跨域",p:"",l:"面试经验/32-跨域请求.html#websocket协议跨域",a:"websocket协议跨域"},"86.7":{t:"iframe跨域通讯",p:"",l:"面试经验/32-跨域请求.html#iframe跨域通讯",a:"iframe跨域通讯"},"86.8":{t:"document.domain + iframe跨域",p:`两个域名必须属于同一个一级域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域
例如news.maps131.com，和game.maps131.com，news页面 ...`,l:"面试经验/32-跨域请求.html#document-domain-iframe跨域",a:"document-domain-iframe跨域"},"86.9":{t:"location.hash + iframe跨域",p:`利用iframe的引用地址修改hash和监听hash，再加一个相同域名页面实现。
例如A嵌B,B嵌C，A，C同域名端口。C可以通过window.parent.parent访问A，所以可以在创建一个方法 ...`,l:"面试经验/32-跨域请求.html#location-hash-iframe跨域",a:"location-hash-iframe跨域"},"86.10":{t:"window.name + iframe跨域",p:`利用window.name的独特之处，name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。

A页面创建一个方法，监听iframe的onload方法，会 ...`,l:"面试经验/32-跨域请求.html#window-name-iframe跨域",a:"window-name-iframe跨域"},"86.11":{t:"postMessage跨域",p:`postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：
a.） 页面和其打开的新窗口的 ...`,l:"面试经验/32-跨域请求.html#postmessage跨域",a:"postmessage跨域"},"87.0":{t:"<!--",p:`
@Author: maps131_liaoxing
@Date: 2021-07-09 17:37:29
@LastEditors: maps131_liaoxing
@LastEditTime:  ...`,l:"面试经验/33-普通函数和箭头函数.html",a:""},"87.1":{t:"区别",p:`
this

普通函数内部默认指向window,严格undefined
箭头指向上一作用域this指向


argunments

箭头函数没有，...rest是代替功能代替，变量rest是数组；no ...`,l:"面试经验/33-普通函数和箭头函数.html#区别",a:"区别"},"88.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-10 22:01:01
@LastEditors   ...`,l:"面试经验/34-原型.html",a:""},"88.1":{t:"实例对象",p:`实力对象的没有prototype，但有—__proto__指向原型对象
  let e = new Enum()
  e.prototype.age = 15
  e.prototype // und ...`,l:"面试经验/34-原型.html#实例对象",a:"实例对象"},"88.2":{t:"原型链",p:"当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会去它的__proto__隐式原型上查找，即它的构造函数的prototype，如果还没有找到就会再在构造函数的prototyp ...",l:"面试经验/34-原型.html#原型链",a:"原型链"},"88.3":{t:"instabceof 检测实例对象的原型对象在不在这个构造函数的原型链上",p:`e instanceof Enum
e.__proto__ === Enum.prototype

`,l:"面试经验/34-原型.html#instabceof-检测实例对象的原型对象在不在这个构造函数的原型链上",a:"instabceof-检测实例对象的原型对象在不在这个构造函数的原型链上"},"88.4":{t:"hasOwnProperty() 和 in 检测属性是否在原型链中",p:`dd.hasOwnProperty('name') // true
dd.hasOwnProperty('age')  // true

'name' in dd // true
'age' in d ...`,l:"面试经验/34-原型.html#hasownproperty-和-in-检测属性是否在原型链中",a:"hasownproperty-和-in-检测属性是否在原型链中"},"89.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-11 14:54:59
@LastEditors   ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html",a:""},"89.1":{t:"Es6 Module",p:`ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。
ES6 模块不是对象，而是通过令显式指定 ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#es6-module",a:"es6-module"},"89.2":{t:"export",p:"输出模块，一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。因为是静态化的，所以不能写在运行时的代码里， ...",l:"面试经验/35-CommonJs和Es6Module的区别.html#export",a:"export"},"89.3":{t:"import",p:`使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。

引入是只读接口无法修改，但对象可以
import命令具有提升效果，会提升到整个模块的头部，首先 ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#import",a:"import"},"89.4":{t:"export 与 import 的复合写法",p:`如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。
export { foo, bar } from 'my_module';
// 可以简单理解为
impo ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#export-与-import-的复合写法",a:"export-与-import-的复合写法"},"89.5":{t:"import()",p:`ES2020提案 引入import()函数，支持动态加载模块。
import函数的参数specifier，指定所要加载的模块的位置。import命令能够接受什么参数，import()函数就能接受什么参 ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#import",a:"import"},"89.6":{t:"script中使用",p:`

`,l:"面试经验/35-CommonJs和Es6Module的区别.html#script中使用",a:"script中使用"},"89.7":{t:"CommonJs",p:`
Node 应用由模块组成，采用 CommonJS 模块规范。
每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。
运行时加载，加载的是整个对象
 ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#commonjs",a:"commonjs"},"89.8":{t:"module对象",p:`Node内部提供一个Module构建函数。所有模块都是Module的实例。每个模块内部，都有一个module对象，代表当前模块。它有以下属性。

module.id 模块的识别符，通常是带有绝对路径的 ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#module对象",a:"module对象"},"89.9":{t:"module.exports属性",p:`module.exports属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取module.exports变量。
  // a.js
  var EventEmitter = requ ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#module-exports属性",a:"module-exports属性"},"89.10":{t:"exports变量",p:`为了方便，Node为每个模块提供一个exports变量，指向module.exports。这等同在每个模块头部，有一行这样的命令。
  var exports = module.exports
  / ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#exports变量",a:"exports变量"},"89.11":{t:"require",p:"Node使用CommonJS模块规范，内置的require命令用于加载模块文件。require命令的基本功能是，读入并执行一个JavaScript文件，然后返回该模块的exports对象。如果没有发现 ...",l:"面试经验/35-CommonJs和Es6Module的区别.html#require",a:"require"},"89.12":{t:"加载规则",p:`require命令用于加载文件，后缀名默认为.js。
var foo = require('foo');
//  等同于
var foo = require('foo.js');

根据参数的不同格式 ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#加载规则",a:"加载规则"},"89.13":{t:"模块的缓存",p:`第一次加载某个模块时，Node会缓存该模块。以后再加载该模块，就直接从缓存取出该模块的module.exports属性。
require('./example.js');
require('./exa ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#模块的缓存",a:"模块的缓存"},"89.14":{t:"循环加载",p:`如果发生模块的循环加载，即A加载B，B又加载A，则B将加载A的不完整版本。
// a.js
exports.x = 'a1';
console.log('a.js ', require('./b.js ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#循环加载",a:"循环加载"},"89.15":{t:"require.main",p:`require方法有一个main属性，可以用来判断模块是直接执行，还是被调用执行。
直接执行的时候（node module.js），require.main属性指向模块本身。
require.main ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#require-main",a:"require-main"},"89.16":{t:"模块的加载机制",p:`CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值
CommonJs和Es6 Module的区别

CommonJS 是同步加载模块（ ...`,l:"面试经验/35-CommonJs和Es6Module的区别.html#模块的加载机制",a:"模块的加载机制"},"90.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-11 17:02:43
@LastEditors   ...`,l:"面试经验/36-严格模式.html",a:""},"91.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-14 20:48:46
@LastEditors   ...`,l:"面试经验/37-js数组扁平化.html",a:""},"92.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-14 20:49:09
@LastEditors   ...`,l:"面试经验/38-spa页面易造成的内存泄露.html",a:""},"93.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-14 20:50:07
@LastEditors   ...`,l:"面试经验/39-vue插槽相关.html",a:""},"94.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-15 20:49:15
@LastEditors   ...`,l:"面试经验/40-vue的路由模式.html",a:""},"94.1":{t:"hash ",p:`hash模式的工作原理是hashchange事件，可以在window监听hash的变化


URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；

 ...`,l:"面试经验/40-vue的路由模式.html#hash",a:"hash"},"94.2":{t:"history",p:`利用html5的新api，window.history，修改浏览器历史记录，并渲染页面

back(), foeward(), go(step), 前进后退
pushState(state, titl ...`,l:"面试经验/40-vue的路由模式.html#history",a:"history"},"94.3":{t:"相关",p:`
popstate，前进或者后退时会触发。pushState 和 replaceState 不会触发此事件。
hashchange，当前页面的hash值发生变化时触发。

`,l:"面试经验/40-vue的路由模式.html#相关",a:"相关"},"95.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-15 20:49:35
@LastEditors   ...`,l:"面试经验/41-vue的$nextTick.html",a:""},"95.1":{t:"原理",p:"根据eventloop的微任务优先原则，在dom更新完，进入事件队列。$nextTick会根据浏览器的支持程度，判断用那种任务的执行方法包裹回调函数执行，比如promise包裹，Promise.res ...",l:"面试经验/41-vue的$nextTick.html#原理",a:"原理"},"96.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-15 20:49:45
@LastEditors   ...`,l:"面试经验/42-vue的scope原理.html",a:""},"97.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-15 20:50:46
@LastEditors   ...`,l:"面试经验/43-vue中key的作用.html",a:""},"98.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-15 20:51:26
@LastEditors   ...`,l:"面试经验/44-vue中diff算法.html",a:""},"98.1":{t:"diff流程",p:`
数据更新，生成新的vnode，调用patch方法
用sameVnode判断两个node是否值得比较，不值得，就直接替换oldVnode


判断key是否相同与标签是否相同、是否都含有data属性、 ...`,l:"面试经验/44-vue中diff算法.html#diff流程",a:"diff流程"},"99.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-15 20:52:14
@LastEditors   ...`,l:"面试经验/45-vue的computed和watch.html",a:""},"99.1":{t:"watch",p:`
是一个数据监听属性，数据有变化会触发handle的执行回调函数
有deep属性可以设置，深度监听元素变化，默认是false， 只监听对象自身，不监听其内元素值改变0，true，监听子属性变化，但还是 ...`,l:"面试经验/45-vue的computed和watch.html#watch",a:"watch"},"99.2":{t:"computed",p:`
是一个接收return 数据的变量，内部可以含有被劫持的变量，变量改变，也会触发该函数的get属性，return最新值
再次引用该变量，如果关联的劫持变量没改变，会从缓存中拿
内部不能操作异步函数， ...`,l:"面试经验/45-vue的computed和watch.html#computed",a:"computed"},"100.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-15 20:52:58
@LastEditors   ...`,l:"面试经验/46-vue2.0Object.defineProperty.html",a:""},"100.1":{t:"对于对象和数组属性，只监听其指针是否改变",p:`
当传入一个对象，和key,define会对这个对象的属性监听，只监听其在栈区是否改变，如果属性值包含对象或者包含数组，修改对象属性或者数组元素，不触发set

`,l:"面试经验/46-vue2.0Object.defineProperty.html#对于对象和数组属性-只监听其指针是否改变",a:"对于对象和数组属性-只监听其指针是否改变"},"100.2":{t:"vue中Object.defineProperty",p:`属性劫持时判断值是否为对象，是的话再对值进行劫持，不过Object.defineProperty有弊端

对于值为数组，数组内元素的增删改，不触发set视图更新
对于对象，对象属性的增删，不触发set ...`,l:"面试经验/46-vue2.0Object.defineProperty.html#vue中object-defineproperty",a:"vue中object-defineproperty"},"101.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-15 20:53:13
@LastEditors   ...`,l:"面试经验/47-vue3proxy.html",a:""},"101.1":{t:"对于对象和数组属性，只监听其指针是否改变",p:`
当传入一个对象，proxy会对起所有属性的栈区监听，如果属性值包含对象或者包含数组，修改对象属性或者数组元素，不触发set，
但这个传入对象的属性新增一个属性时会触发set，删除不会
还有数组的长度 ...`,l:"面试经验/47-vue3proxy.html#对于对象和数组属性-只监听其指针是否改变",a:"对于对象和数组属性-只监听其指针是否改变"},"101.2":{t:"与其继承的defineproperty相比",p:`
不需要逐一为每个做劫持，直接监听对象
get可用参数做return返回，不像define会进入调用死循环
修改不会直接设置属性，需要在set自行修改属性值

`,l:"面试经验/47-vue3proxy.html#与其继承的defineproperty相比",a:"与其继承的defineproperty相比"},"102.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-15 20:53:37
@LastEditors   ...`,l:"面试经验/48-vue2,3区别.html",a:""},"103.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-17 10:16:51
@LastEditors   ...`,l:"面试经验/49-mvc、mvp、mvvm.html",a:""},"104.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-17 10:17:16
@LastEditors   ...`,l:"面试经验/50-react和vue区别.html",a:""},"105.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-17 12:37:15
@LastEditors   ...`,l:"面试经验/52-webpack工作原理.html",a:""},"106.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-18 11:59:37
@LastEditors   ...`,l:"面试经验/53-乾坤微服务基本.html",a:""},"106.1":{t:"基本使用",p:`
安装

  $ yarn add qiankun # 或者 npm i qiankun -S


在主应用中注册微应用

  import { registerMicroApps, start, s ...`,l:"面试经验/53-乾坤微服务基本.html#基本使用",a:"基本使用"},"106.2":{t:"主应用vue-history或者hash模式",p:`子应用可以是hash或者history
`,l:"面试经验/53-乾坤微服务基本.html#主应用vue-history或者hash模式",a:"主应用vue-history或者hash模式"},"106.3":{t:"单页面多子应用",p:`需要展示的子应用控制activeRules为true
`,l:"面试经验/53-乾坤微服务基本.html#单页面多子应用",a:"单页面多子应用"},"106.4":{t:"子应用子路由嵌套可以在一个子组件内引入乾坤",p:`  import { start, registerMicroApps } from 'qiankun'

  mounted () {
    const apps = [ // 子应用配置
    ...`,l:"面试经验/53-乾坤微服务基本.html#子应用子路由嵌套可以在一个子组件内引入乾坤",a:"子应用子路由嵌套可以在一个子组件内引入乾坤"},"106.5":{t:"应用间通讯",p:`
官方组件通讯，引入initGlobalState，返回MicroAppStateActions，会自动注入微应用mount的props中

/actions.js/
import { initGlo ...`,l:"面试经验/53-乾坤微服务基本.html#应用间通讯",a:"应用间通讯"},"106.6":{t:"子应用跳转其他应用",p:`传入父组件router作为props，然后子应用拿到做跳转
`,l:"面试经验/53-乾坤微服务基本.html#子应用跳转其他应用",a:"子应用跳转其他应用"},"107.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-18 16:01:17
@LastEditors   ...`,l:"面试经验/54-乾坤原理.html",a:""},"107.1":{t:"沙箱隔离",p:"",l:"面试经验/54-乾坤原理.html#沙箱隔离",a:"沙箱隔离"},"107.2":{t:"样式隔离",p:`
命名空间
css Modules
css-in-js
Shadow DOM

`,l:"面试经验/54-乾坤原理.html#样式隔离",a:"样式隔离"},"108.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-19 22:47:11
@LastEditors   ...`,l:"面试经验/55-http状态.html",a:""},"108.1":{t:"1开头（临时响应）用于表示临时响应并需要请求者执行操作才能继续的状态代码。",p:`100（继续）请求者应当继续提出请求。服务器返回此代码则意味着，服务器已收到了请求的第一部分，现正在等待接收其余部分。
101（切换协议）请求者已要求服务器切换协议，服务器已确认并准备进行切换。
`,l:"面试经验/55-http状态.html#_1开头-临时响应-用于表示临时响应并需要请求者执行操作才能继续的状态代码。",a:"_1开头-临时响应-用于表示临时响应并需要请求者执行操作才能继续的状态代码。"},"108.2":{t:"2开头 （请求成功）表示成功处理了请求的状态代码",p:`200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。
201 （已创建） 请求成功并且服务器创建了新的资源。
202 （已接受） 服务器已接受请求，但尚未处理。
203 （ ...`,l:"面试经验/55-http状态.html#_2开头-请求成功-表示成功处理了请求的状态代码",a:"_2开头-请求成功-表示成功处理了请求的状态代码"},"108.3":{t:"3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向",p:`300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent)
选择一项操作，或提供操作列表供请求者选择。
301 （永久移动） 请求的网页已永久移动到新位置。  ...`,l:"面试经验/55-http状态.html#_3开头-请求被重定向-表示要完成请求-需要进一步操作。-通常-这些状态代码用来重定向",a:"_3开头-请求被重定向-表示要完成请求-需要进一步操作。-通常-这些状态代码用来重定向"},"108.4":{t:"4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理",p:`400 （错误请求） 服务器不理解请求的语法。
401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。
403 （禁止） 服务器拒绝请求。
404 （未找到） 服务器找不到 ...`,l:"面试经验/55-http状态.html#_4开头-请求错误-这些状态代码表示请求可能出错-妨碍了服务器的处理",a:"_4开头-请求错误-这些状态代码表示请求可能出错-妨碍了服务器的处理"},"108.5":{t:"5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错",p:`500 （服务器内部错误） 服务器遇到错误，无法完成请求。
501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。
502 （错误网关） 服务器作为网关或 ...`,l:"面试经验/55-http状态.html#_5开头-服务器错误-这些状态代码表示服务器在尝试处理请求时发生内部错误。-这些错误可能是服务器本身的错误-而不是请求出错",a:"_5开头-服务器错误-这些状态代码表示服务器在尝试处理请求时发生内部错误。-这些错误可能是服务器本身的错误-而不是请求出错"},"109.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-19 23:29:11
@LastEditors   ...`,l:"面试经验/56-vue-data.html",a:""},"110.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-20 08:07:52
@LastEditors   ...`,l:"面试经验/57-v-if和v-show.html",a:""},"111.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-20 08:19:29
@LastEditors   ...`,l:"面试经验/58-v-for和v-if.html",a:""},"112.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-20 12:31:34
@LastEditors   ...`,l:"面试经验/59-vue表单的双向绑定.html",a:""},"113.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-20 12:48:31
@LastEditors   ...`,l:"面试经验/60-node中间件执行顺序.html",a:""},"114.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-20 12:48:53
@LastEditors   ...`,l:"面试经验/61-webpack打包优化.html",a:""},"115.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-24 11:14:08
@LastEditors   ...`,l:"面试经验/62-js数组求交集并集去重.html",a:""},"116.0":{t:"<!--",p:`
@Descriptios  :
@Author       : maps131_liaoxing
@Date         : 2021-07-10 22:00:27
@LastEditors   ...`,l:"面试经验/路线.html",a:""}},n={previewLength:100,buttonLabel:"搜索",placeholder:"情输入关键词",allow:[],ignore:[]},a={INDEX_DATA:e,PREVIEW_LOOKUP:t,Options:n};export{a as default};
