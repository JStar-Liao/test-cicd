import{_ as s,o as n,c as a,U as l}from"./chunks/framework.1bc6aac7.js";const d=JSON.parse('{"title":"proxy","description":"","frontmatter":{},"headers":[],"relativePath":"面试经验/47-vue3proxy.md"}'),p={name:"面试经验/47-vue3proxy.md"},e=l(`<h1 id="proxy" tabindex="-1">proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;proxy&quot;">​</a></h1><p>简单使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#text&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Proxy</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">], {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(o, p)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> o[p]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(o, p, val)</span></span>
<span class="line"><span style="color:#E1E4E8;">    o[p] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val </span><span style="color:#6A737D;">// 需要在这重新赋值，不像defineproperty</span></span>
<span class="line"><span style="color:#E1E4E8;">    text.innerText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">text.innerText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  obj[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;aleadyChange&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="对于对象和数组属性-只监听其指针是否改变" tabindex="-1">对于对象和数组属性，只监听其指针是否改变 <a class="header-anchor" href="#对于对象和数组属性-只监听其指针是否改变" aria-label="Permalink to &quot;对于对象和数组属性，只监听其指针是否改变&quot;">​</a></h2><ol><li>当传入一个对象，proxy会对起所有属性的栈区监听，如果属性值包含对象或者包含数组，修改对象属性或者数组元素，不触发set，</li><li>但<code>这个传入对象的属性新增一个属性时会触发set，删除不会</code></li><li>还有<code>数组的长度增删都会会触发set</code></li></ol><h2 id="与其继承的defineproperty相比" tabindex="-1">与其继承的defineproperty相比 <a class="header-anchor" href="#与其继承的defineproperty相比" aria-label="Permalink to &quot;与其继承的defineproperty相比&quot;">​</a></h2><ol><li>不需要逐一为每个做劫持，直接监听对象</li><li>get可用参数做return返回，不像define会进入调用死循环</li><li>修改不会直接设置属性，需要在set自行修改属性值</li></ol>`,7),o=[e];function r(t,c,E,y,i,b){return n(),a("div",null,o)}const u=s(p,[["render",r]]);export{d as __pageData,u as default};
