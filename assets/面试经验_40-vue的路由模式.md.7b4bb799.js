import{_ as a,o as e,c as t,U as h}from"./chunks/framework.1d5623bb.js";const f=JSON.parse('{"title":"vue的路由模式","description":"","frontmatter":{},"headers":[],"relativePath":"面试经验/40-vue的路由模式.md"}'),i={name:"面试经验/40-vue的路由模式.md"},s=h('<h1 id="vue的路由模式" tabindex="-1">vue的路由模式 <a class="header-anchor" href="#vue的路由模式" aria-label="Permalink to &quot;vue的路由模式&quot;">​</a></h1><h2 id="hash" tabindex="-1">hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;hash&quot;">​</a></h2><p>hash模式的工作原理是hashchange事件，可以在window监听hash的变化</p><ol><li><p>URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；</p></li><li><p>hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；</p></li><li><p>可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用 JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；</p></li><li><p>我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转(渲染)。</p></li></ol><h2 id="history" tabindex="-1">history <a class="header-anchor" href="#history" aria-label="Permalink to &quot;history&quot;">​</a></h2><p>利用html5的新api，window.history，修改浏览器历史记录，并渲染页面</p><ol><li>back(), foeward(), go(step), 前进后退</li><li>pushState(state, title, url) 不刷新页面并添加一条历史记录</li><li>history.replaceState(state, title, url) 替换当前地址栏里的url</li></ol><h2 id="相关" tabindex="-1">相关 <a class="header-anchor" href="#相关" aria-label="Permalink to &quot;相关&quot;">​</a></h2><ol><li>popstate，前进或者后退时会触发。pushState 和 replaceState 不会触发此事件。</li><li>hashchange，当前页面的hash值发生变化时触发。</li></ol>',9),l=[s];function o(r,n,c,_,p,d){return e(),t("div",null,l)}const m=a(i,[["render",o]]);export{f as __pageData,m as default};
